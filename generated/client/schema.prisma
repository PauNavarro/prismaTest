generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  previewFeatures = ["deno"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model XDiario {
  id           Int       @id @default(autoincrement())
  ASIEN        Float?
  FECHA        DateTime? @db.DateTime(0)
  SUBCTA       String?   @db.VarChar(12)
  CONTRA       String?   @db.VarChar(12)
  CONCEPTO     String?   @db.VarChar(50)
  EURODEBE     Decimal?  @db.Decimal(10, 2)
  EUROHABER    Decimal?  @db.Decimal(10, 2)
  BASEEURO     Decimal?  @db.Decimal(10, 2)
  SERIE        String?   @db.VarChar(1)
  FACTURA      String?   @default("0") @db.VarChar(8)
  BASEIMPO     Decimal?  @db.Decimal(10, 2)
  IVA          Decimal?  @db.Decimal(10, 2)
  RECEQUIV     Decimal?  @default(0.00) @db.Decimal(10, 2)
  DOCUMENTO    String?   @db.VarChar(10)
  DEPARTA      String?   @db.VarChar(3)
  CLAVE        Int?
  ESTADO       String?   @db.VarChar(1)
  NCASADO      Decimal?  @db.Decimal(10, 2)
  TCASADO      Decimal?  @db.Decimal(10, 2)
  TRANS        Decimal?  @db.Decimal(10, 2)
  CAMBIO       Decimal?  @db.Decimal(10, 2)
  DEBEME       Decimal?  @db.Decimal(10, 2)
  HABERME      Decimal?  @db.Decimal(10, 2)
  PTAHABER     Decimal?  @db.Decimal(10, 2)
  AUXILIAR     String?   @db.VarChar(1)
  SUCURSAL     String?   @db.VarChar(4)
  PTADEBE      Decimal?  @db.Decimal(10, 2)
  CODDIVISA    String?   @db.VarChar(5)
  IMPAUXME     Decimal?  @db.Decimal(10, 2)
  MONEDAUSO    String?   @default("2") @db.VarChar(1)
  NOCONV       Boolean   @default(false)
  NUMEROINV    String?   @db.VarChar(10)
  TIPOOPE      String?   @db.VarChar(1)
  NFACTICK     Boolean   @default(true)
  TERIDNIF     Int       @default(2) @db.TinyInt
  TERNIF       String    @default("I.F.") @db.VarChar(20)
  TERNOM       String    @default("Nombre Importador") @db.VarChar(50)
  OPBIENES     Boolean   @default(true)
  TIPOFAC      String?   @db.VarChar(1)
  TIPOIVA      String?   @db.VarChar(1)
  L340         Int       @default(0) @db.TinyInt
  enlazado     Boolean   @default(false)
  FECHA_EX     DateTime? @db.Date
  LRECT349     Boolean   @default(false)
  empresa_id   Int       @default(442) @db.UnsignedSmallInt
  LDIFADUAN    Int       @default(0) @db.TinyInt
  METAL        Boolean   @default(false)
  METALIMP     Decimal   @default(0.00) @db.Decimal(10, 2)
  CLIENTE      String?   @db.VarChar(12)
  METALEJE     String?   @db.VarChar(4)
  FECHA_OP     DateTime? @db.Date
  FACTURAEX    String?   @db.VarChar(45)
  TIPOCLAVE    Int?
  TIPOEXENCI   Int?
  TIPONOSUJE   Int?
  TIPOFACT     Int?
  TIPORECTIF   Int?
  SERIE_RT     String?   @db.VarChar(2)
  FACTU_RT     String?   @db.VarChar(10)
  BASEIMP_RT   Decimal?  @db.Decimal(10, 2)
  BASEIMP_RF   Decimal?  @db.Decimal(10, 2)
  RECTIFICA    Int       @default(0)
  FECHA_RT     DateTime? @db.Date
  created      DateTime? @default(now()) @db.Timestamp(0)
  updated      DateTime? @default(now()) @db.Timestamp(0)
  FECREGCON    DateTime? @db.Date
  enlazadoSage Boolean   @default(false)
  company      company   @relation(fields: [empresa_id], references: [id], onDelete: Cascade, map: "XDiario_ibfk_1")

  @@index([id, ASIEN], map: "ASIENidx")
  @@index([ASIEN, SERIE], map: "SERIEidx")
  @@index([enlazado], map: "XDiario")
  @@index([empresa_id], map: "empresa_id")
  @@index([enlazadoSage], map: "enlazadoSage")
}

model absenceType {
  id                     Int        @id @default(autoincrement())
  name                   String     @db.VarChar(30)
  rgb                    String     @db.VarChar(7)
  color                  BigInt?    @default(0)
  permissionRate         Decimal?   @db.Decimal(3, 2)
  code                   String?    @db.VarChar(45)
  isAllowedToWork        Int        @default(0) @db.TinyInt
  isPrintable            Boolean    @default(false)
  discountRate           Decimal?   @db.Decimal(3, 2)
  holidayEntitlementRate Decimal?   @default(1.00) @db.Decimal(3, 2)
  isNaturalDay           Boolean?   @default(false)
  isCalculate            Boolean?   @default(false)
  calendar               calendar[]
}

model accounting {
  id               Int               @id @default(0)
  bank             String?           @db.VarChar(50)
  account          String?           @db.VarChar(10)
  accountingTypeFk Int               @default(0) @db.SmallInt
  entityFk         Int?              @db.UnsignedInt
  isActive         Int               @default(1) @db.TinyInt
  currencyFk       Int?              @default(1) @db.UnsignedTinyInt
  code             String?           @db.VarChar(45)
  currency         currency?         @relation(fields: [currencyFk], references: [id], onDelete: Restrict, map: "Bancoscurrency")
  bankEntity       bankEntity?       @relation(fields: [entityFk], references: [id], onDelete: Restrict, map: "accounting_FK")
  accountingType   accountingType    @relation(fields: [accountingTypeFk], references: [id], map: "bank_FK")
  host             host[]
  invoiceInDueDay  invoiceInDueDay[]
  invoiceOut       invoiceOut[]
  payment          payment[]
  receipt          receipt[]
  sinisterDetail   sinisterDetail[]
  till             till[]

  @@index([bank], map: "BancosBanco")
  @@index([currencyFk], map: "Bancoscurrency_idx")
  @@index([entityFk], map: "fk_Bancos_entity1_idx")
  @@index([accountingTypeFk], map: "foreignkey1_idx")
}

model accountingConfig {
  id      Int      @id @default(autoincrement())
  minDate DateTime @db.Date
  maxDate DateTime @db.Date
}

model accountingType {
  id                 Int          @id @default(0) @db.SmallInt
  description        String       @db.VarChar(100)
  receiptDescription String?      @db.VarChar(50)
  code               String?      @db.VarChar(20)
  isAutoConciliated  Boolean?     @default(true)
  maxAmount          Int?
  daysInFuture       Int?         @default(0)
  accounting         accounting[]

  @@index([code], map: "accountingType_code_IDX")
}

model activityTaxDismissed {
  clientFk    Int      @id
  isNotified  Boolean? @default(false)
  isDismissed Boolean? @default(false)
  notified    Int?     @default(0)
  client      client   @relation(fields: [clientFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "clientFk")
}

model address {
  id                                      Int                  @id @default(autoincrement())
  clientFk                                Int                  @default(0)
  street                                  String?              @db.VarChar(255)
  city                                    String?              @db.VarChar(50)
  provinceFk                              Int?                 @db.UnsignedSmallInt
  postalCode                              String?              @db.VarChar(10)
  phone                                   String?              @db.VarChar(15)
  mobile                                  String?              @db.VarChar(15)
  nickname                                String?              @db.VarChar(40)
  isDefaultAddress                        Boolean              @default(false)
  agencyModeFk                            Int                  @default(2)
  isActive                                Int                  @default(1) @db.TinyInt
  longitude                               Decimal?             @db.Decimal(11, 7)
  latitude                                Decimal?             @db.Decimal(11, 7)
  isEqualizated                           Boolean?
  customsAgentFk                          Int?
  incotermsFk                             String?              @db.VarChar(3)
  isLogifloraAllowed                      Int                  @default(0) @db.TinyInt
  client_address_clientFkToclient         client               @relation("address_clientFkToclient", fields: [clientFk], references: [id], map: "address_customer_id")
  customsAgent                            customsAgent?        @relation(fields: [customsAgentFk], references: [id], onDelete: Restrict, map: "address_customsAgentFk")
  province                                province?            @relation(fields: [provinceFk], references: [id], onDelete: Restrict, map: "address_ibfk_3")
  agencyMode                              agencyMode           @relation(fields: [agencyModeFk], references: [id], map: "address_ibfk_4")
  incoterms                               incoterms?           @relation(fields: [incotermsFk], references: [code], onDelete: Restrict, map: "address_incotermsFk")
  addressForPackaging                     addressForPackaging?
  addressObservation                      addressObservation[]
  claimDestination                        claimDestination[]
  client_client_defaultAddressFkToaddress client[]             @relation("client_defaultAddressFkToaddress")
  cmr_cmr_addressFromFkToaddress          cmr[]                @relation("cmr_addressFromFkToaddress")
  cmr_cmr_addressToFkToaddress            cmr[]                @relation("cmr_addressToFkToaddress")
  delivery                                delivery[]
  ektEntryAssign                          ektEntryAssign[]
  ticket                                  ticket[]
  warehouse                               warehouse[]

  @@index([postalCode], map: "CODPOSTAL")
  @@index([agencyModeFk], map: "Id_Agencia")
  @@index([clientFk], map: "Id_cliente")
  @@index([customsAgentFk])
  @@index([incotermsFk])
  @@index([mobile], map: "movil")
  @@index([provinceFk], map: "province_id")
  @@index([phone], map: "telefono")
}

model addressFilter {
  id                 Int        @id @default(autoincrement())
  created            DateTime   @default(now()) @db.Timestamp(0)
  provinceFk         Int?       @db.UnsignedSmallInt
  countryFk          Int?       @db.UnsignedMediumInt
  isLogifloraAllowed Boolean?   @default(false)
  isVNHSupplier      Boolean?   @default(false)
  isEarlyBird        Boolean?   @default(false)
  warehouseFk        Int?       @db.UnsignedSmallInt
  beforeDated        DateTime?  @db.Date
  afterDated         DateTime?  @db.Date
  province           province?  @relation(fields: [provinceFk], references: [id], onDelete: Cascade, map: "addressFilter_FK")
  country            country?   @relation(fields: [countryFk], references: [id], onDelete: Cascade, map: "addressFilter_FK_1")
  warehouse          warehouse? @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, map: "addressFilter_FK_2")

  @@index([provinceFk], map: "addressFilter_FK")
  @@index([countryFk], map: "addressFilter_FK_1")
  @@index([warehouseFk], map: "addressFilter_FK_2")
}

model addressForPackaging {
  addressFk      Int     @id
  packagingValue Decimal @default(0.04) @db.Decimal(10, 2)
  address        address @relation(fields: [addressFk], references: [id], onDelete: Cascade, map: "addresForPackaging_fk1")
}

model addressObservation {
  id                Int             @id @default(autoincrement()) @db.UnsignedMediumInt
  addressFk         Int
  observationTypeFk Int             @db.UnsignedTinyInt
  description       String          @db.Text
  address           address         @relation(fields: [addressFk], references: [id], onDelete: Cascade, map: "addressFgn")
  observationType   observationType @relation(fields: [observationTypeFk], references: [id], onDelete: Cascade, map: "addressObservationFgn")

  @@unique([addressFk, observationTypeFk], map: "Id_Consigna")
  @@index([observationTypeFk], map: "addressObservationFgn_idx")
}

model agency {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedSmallInt
  name               String              @db.VarChar(25)
  warehouseFk        Int?                @db.UnsignedSmallInt
  warehouseAliasFk   Int?                @db.UnsignedSmallInt
  isOwn              Boolean             @default(false)
  workCenterFk       Int?
  isAnyVolumeAllowed Boolean             @default(false)
  warehouseAlias     warehouseAlias?     @relation(fields: [warehouseAliasFk], references: [id], onDelete: Restrict, map: "agency_FK")
  warehouse          warehouse?          @relation(fields: [warehouseFk], references: [id], onDelete: Restrict, map: "agency_ibfk_1")
  workCenter         workCenter?         @relation(fields: [workCenterFk], references: [id], onDelete: Restrict, map: "agency_ibfk_3")
  agencyExtraCharge  agencyExtraCharge[]
  agencyMode         agencyMode[]
  supplierAgencyTerm supplierAgencyTerm?

  @@index([warehouseAliasFk], map: "agencias_alias_idx")
  @@index([workCenterFk], map: "agency_ibfk_3_idx")
  @@index([warehouseFk], map: "warehouse_id")
}

model agencyExtraCharge {
  id       Int      @id
  agencyFk Int      @db.UnsignedSmallInt
  sizeMin  Int
  sizeMax  Int
  sinced   DateTime @db.Date
  price    Decimal  @db.Decimal(10, 2)
  agency   agency   @relation(fields: [agencyFk], references: [id], onDelete: Cascade, map: "agencyExtraChargeFk1")

  @@unique([agencyFk, sinced, sizeMin], map: "agencyExtraChargeUniqueIdx")
}

model agencyMode {
  id                                     Int                  @id @default(autoincrement())
  name                                   String?              @db.VarChar(50)
  description                            String?              @db.VarChar(50)
  deliveryMethodFk                       Int?
  m3                                     Float?               @default(0)
  web                                    Int                  @default(0) @db.SmallInt
  agencyFk                               Int                  @db.UnsignedSmallInt
  inflation                              Decimal              @default(0.00) @db.Decimal(5, 2)
  isVolumetric                           Boolean              @default(false)
  reportMail                             String?              @db.VarChar(100)
  showAgencyName                         Boolean?             @default(true)
  isActive                               Boolean              @default(true)
  isExternalAgency                       Boolean              @default(false)
  flag                                   Bytes?               @db.Blob
  code                                   String?              @unique@db.VarChar(45)
  isRiskFree                             Boolean              @default(false)
  hasWeightVolumetric                    Int                  @default(0)
  address                                address[]
  agency                                 agency               @relation(fields: [agencyFk], references: [id], map: "agencyMode_agencyFk")
  deliveryMethod                         deliveryMethod?      @relation(fields: [deliveryMethodFk], references: [id], onDelete: Restrict, map: "agencyMode_deliveryMethodFk")
  expedition                             expedition[]
  mrwService                             mrwService?
  mrwServiceWeekday                      mrwServiceWeekday?
  route                                  route[]
  ticket                                 ticket[]
  ticketWeekly                           ticketWeekly[]
  travel_travel_agencyModeFkToagencyMode travel[]             @relation("travel_agencyModeFkToagencyMode")
  travel_travel_agencyFkToagencyMode     travel[]             @relation("travel_agencyFkToagencyMode")
  travelClonedWeekly                     travelClonedWeekly[]
  warehouse                              warehouse[]
  zone                                   zone[]
  zoneAgencyMode                         zoneAgencyMode[]

  @@index([name], map: "Agencias")
  @@index([deliveryMethodFk], map: "Vista")
  @@index([agencyFk], map: "agencyMode_agencyFk")
  @@index([code], map: "agencyMode_code")
}

model agencyTermConfig {
  id                  Int      @id @default(autoincrement())
  expenceFk           String?  @db.VarChar(10)
  vatAccountSupported String?  @db.VarChar(15)
  vatPercentage       Decimal? @db.Decimal(28, 10)
  transaction         String?  @db.VarChar(50)
}

model alertLevel {
  code                               String  @db.VarChar(45)
  id                                 Int     @id
  state_state_alertLevelToalertLevel state[] @relation("state_alertLevelToalertLevel")
}

model amortizationType {
  code        String  @id @db.VarChar(45)
  description String? @db.VarChar(255)
}

model assignedTicketToWorker {
  id       Int  @id @default(autoincrement())
  idWorker Int? @unique(map: "idWorker_UNIQUE")
  idTicket Int? @unique(map: "idTicket_UNIQUE")
}

model autoRadioConfig {
  id       Int     @id
  password String? @db.VarChar(45)
  user     String? @db.VarChar(45)
  url      String? @db.VarChar(75)
  client   Int?
  center   String? @db.VarChar(2)
}

model autoRadioLogCall {
  id       Int      @id @default(autoincrement())
  ticketFk Int
  created  DateTime @default(now()) @db.Timestamp(0)
  response String   @db.LongText
  ticket   ticket   @relation(fields: [ticketFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ticket")

  @@index([ticketFk], map: "ticket_idx")
}

model autonomy {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(100)
  countryFk   Int          @db.UnsignedMediumInt
  geoFk       Int?
  country     country      @relation(fields: [countryFk], references: [id], onDelete: Cascade, map: "autonomy_FK")
  zoneGeo     zoneGeo?     @relation(fields: [geoFk], references: [id], onDelete: Restrict, map: "autonomy_FK_1")
  province    province[]
  splitFilter splitFilter?

  @@index([countryFk], map: "autonomy_FK")
  @@index([geoFk], map: "autonomy_FK_1")
}

model awb {
  id                                            Int        @id @default(autoincrement()) @db.UnsignedSmallInt
  code                                          String     @db.VarChar(18)
  package                                       Float      @db.Float
  weight                                        Float?     @db.Float
  created                                       DateTime   @default(now()) @db.Timestamp(0)
  transitoryFk                                  Int?
  taxFk                                         Int?       @default(62) @db.UnsignedInt
  duakk                                         String?    @db.VarChar(18)
  docFk                                         Int?
  amount                                        Float      @default(0)
  freightFk                                     Int?
  m3                                            Float?
  stems                                         Int?       @db.UnsignedInt
  flightFk                                      String?    @db.VarChar(10)
  volumeWeight                                  Float?     @db.Float
  hb                                            Decimal?   @db.Decimal(10, 1)
  rate                                          Decimal?   @db.Decimal(10, 2)
  booked                                        DateTime?  @db.DateTime(0)
  issued                                        DateTime?  @db.DateTime(0)
  operated                                      DateTime?  @db.DateTime(0)
  bookEntried                                   DateTime?  @db.Date
  invoiceInFk                                   Int?       @db.UnsignedMediumInt
  isChecked                                     Int?       @default(0) @db.TinyInt
  isTransitoryChecked                           Int?       @default(0) @db.TinyInt
  year                                          Int?
  observation                                   String?    @db.VarChar(45)
  hasFreightPrepaid                             Int?       @default(0) @db.TinyInt
  invoiceInPaletizedFk                          Int?       @db.UnsignedMediumInt
  propertyNumber                                Int?
  invoiceIn_awb_invoiceInFkToinvoiceIn          invoiceIn? @relation("awb_invoiceInFkToinvoiceIn", fields: [invoiceInFk], references: [id], map: "awbInvoiceIn")
  supplier_awb_transitoryFkTosupplier           supplier?  @relation("awb_transitoryFkTosupplier", fields: [transitoryFk], references: [id], onDelete: Restrict, map: "awbTransitoryFk")
  dms                                           dms?       @relation(fields: [docFk], references: [id], onDelete: Restrict, map: "awb_FK")
  supplier_awb_freightFkTosupplier              supplier?  @relation("awb_freightFkTosupplier", fields: [freightFk], references: [id], onDelete: Restrict, map: "awb_FK_2")
  invoiceIn_awb_invoiceInPaletizedFkToinvoiceIn invoiceIn? @relation("awb_invoiceInPaletizedFkToinvoiceIn", fields: [invoiceInPaletizedFk], references: [id], onDelete: Restrict, map: "awb_FK_3")
  taxCode                                       taxCode?   @relation(fields: [taxFk], references: [id], onDelete: Restrict, map: "awb_ibfk_1")
  dua                                           dua[]

  @@unique([code, year], map: "codigo_UNIQUE")
  @@index([invoiceInFk], map: "awbInvoiceIn")
  @@index([docFk], map: "awb_FK")
  @@index([invoiceInPaletizedFk], map: "awb_FK_3")
  @@index([freightFk], map: "carguera_id")
  @@index([flightFk], map: "flight_id")
  @@index([taxFk], map: "iva_id")
  @@index([transitoryFk], map: "proveedor_id")
}

model bankEntity {
  countryFk       Int               @default(1) @db.UnsignedMediumInt
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @db.VarChar(45)
  bic             String            @unique(map: "bic_UNIQUE") @db.VarChar(11)
  accounting      accounting[]
  country         country           @relation(fields: [countryFk], references: [id], map: "fg_entity1")
  client          client[]
  supplierAccount supplierAccount[]

  @@index([countryFk], map: "fg_entity1_idx")
}

model bankEntityConfig {
  id        Int  @id @default(autoincrement())
  bicLength Int? @default(11) @db.TinyInt
}

model beach {
  code          String          @id @db.VarChar(45)
  warehouseFk   Int             @default(60) @db.SmallInt
  routesMonitor routesMonitor[]
}

model bionicConfig {
  id                             Int   @id @default(autoincrement())
  generalInflationCoeficient     Float
  minimumDensityVolumetricWeight Float
  verdnaturaVolumeBox            Int
  itemCarryBox                   Int
}

model bookingPlanner {
  id         Int      @id @default(autoincrement())
  effectived DateTime @default(now()) @db.Timestamp(0)
  pgcFk      String   @db.VarChar(10)
  taxAreaFk  String   @default("SPAIN") @db.VarChar(15)
  priority   Int?     @db.UnsignedInt
  taxClassFk Int      @default(1) @db.UnsignedTinyInt
  countryFk  Int      @default(1) @db.UnsignedMediumInt
  taxArea    taxArea  @relation(fields: [taxAreaFk], references: [code], map: "bookingPlannerTaxArea")
  pgc        pgc      @relation(fields: [pgcFk], references: [code], onDelete: Cascade, map: "bookingPlanner_ibfk_1")
  taxClass   taxClass @relation(fields: [taxClassFk], references: [id], onDelete: Cascade, map: "bookingPlanner_ibfk_2")
  country    country  @relation(fields: [countryFk], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "bookingPlanner_ibfk_3")

  @@index([taxAreaFk, taxClassFk, countryFk], map: "bookingPlannerIdx3")
  @@index([countryFk], map: "countryFk")
  @@index([pgcFk], map: "pgcFk_bookingPlanner_idx")
  @@index([taxClassFk], map: "taxClassFk")
}

model botanicExport {
  id              Int                       @id @default(autoincrement()) @db.UnsignedInt
  ediGenusFk      Int                       @db.UnsignedMediumInt
  ediSpecieFk     Int?                      @db.UnsignedMediumInt
  countryFk       Int?                      @db.UnsignedMediumInt
  restriction     botanicExport_restriction
  description     String?                   @db.VarChar(45)
  isProtectedZone Boolean                   @default(false)
  code            botanicExport_code?
  country         country?                  @relation(fields: [countryFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "botanicExport_ibfk_1")

  @@index([countryFk], map: "Id_Paises")
  @@index([ediGenusFk], map: "botanicExport_ibfk_2_idx")
  @@index([ediSpecieFk], map: "botanicExport_ibfk_3_idx")
}

model budget {
  id              Int               @id @default(autoincrement())
  created         DateTime          @default(now()) @db.Timestamp(0)
  name            String            @db.VarChar(100)
  started         DateTime?         @db.Date
  finished        DateTime?         @db.Date
  userFk          Int?              @db.UnsignedInt
  departmentFk    Int?
  supplierFk      Int?
  photo           Bytes?            @db.Blob
  amount          Decimal?          @db.Decimal(10, 2)
  projectFk       Int
  project         project           @relation(fields: [projectFk], references: [id], onDelete: Cascade, map: "budget_FK")
  department      department?       @relation(fields: [departmentFk], references: [id], onDelete: Cascade, map: "budget_FK_2")
  supplier        supplier?         @relation(fields: [supplierFk], references: [id], onDelete: Cascade, map: "budget_FK_3")
  budgetDms       budgetDms[]
  budgetInvoiceIn budgetInvoiceIn[]
  budgetNotes     budgetNotes[]

  @@index([projectFk], map: "budget_FK")
  @@index([userFk], map: "budget_FK_1")
  @@index([departmentFk], map: "budget_FK_2")
  @@index([supplierFk], map: "budget_FK_3")
}

model budgetDms {
  id       Int    @id @default(autoincrement())
  budgetFk Int
  dmsFk    Int
  budget   budget @relation(fields: [budgetFk], references: [id], onDelete: Cascade, map: "budgetDms_FK")
  dms      dms    @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "budgetDms_FK_1")

  @@index([budgetFk], map: "budgetDms_FK")
  @@index([dmsFk], map: "budgetDms_FK_1")
}

model budgetInvoiceIn {
  id          Int       @id @default(autoincrement())
  budgetFk    Int
  created     DateTime  @default(now()) @db.Timestamp(0)
  invoiceInFk Int       @db.UnsignedMediumInt
  amount      Decimal   @db.Decimal(10, 2)
  budget      budget    @relation(fields: [budgetFk], references: [id], onDelete: Cascade, map: "budgetInvoiceIn_FK")
  invoiceIn   invoiceIn @relation(fields: [invoiceInFk], references: [id], onDelete: Cascade, map: "budgetInvoiceIn_FK_1")

  @@index([budgetFk], map: "budgetInvoiceIn_FK")
  @@index([invoiceInFk], map: "budgetInvoiceIn_FK_1")
}

model budgetNotes {
  id       Int      @id @default(autoincrement())
  budgetFk Int
  created  DateTime @default(now()) @db.Timestamp(0)
  txt      String   @db.VarChar(255)
  userFk   Int?     @db.UnsignedInt
  budget   budget   @relation(fields: [budgetFk], references: [id], onDelete: Cascade, map: "budgetNotes_FK")

  @@index([budgetFk], map: "budgetNotes_FK")
  @@index([userFk], map: "budgetNotes_FK_2")
}

model business {
  id                                   Int                 @id @default(autoincrement())
  companyCodeFk                        String?             @db.Char(3)
  started                              DateTime?           @db.Date
  ended                                DateTime?           @db.Date
  workerBusiness                       String?             @db.LongText
  reasonEndFk                          Int?
  payedHolidays                        Decimal             @default(0.00) @db.Decimal(5, 2)
  occupationCodeFk                     String?             @db.VarChar(1)
  workerFk                             Int                 @db.UnsignedInt
  notes                                String?             @db.LongText
  departmentFk                         Int?
  workerBusinessProfessionalCategoryFk Int?
  calendarTypeFk                       Int?                @default(1)
  isHourlyLabor                        Boolean             @default(false)
  workcenterFk                         Int
  rate                                 Int?
  workerBusinessCategoryFk             Int?
  workerBusinessTypeFk                 Int?
  amount                               Decimal             @default(0.00) @db.Decimal(10, 2)
  workerBusinessAgreementFk            Int?
  basicSalary                          Decimal?            @db.Decimal(10, 2)
  company                              company?            @relation(fields: [companyCodeFk], references: [code], onDelete: Restrict, map: "business_companyCodeFk")
  department                           department?         @relation(fields: [departmentFk], references: [id], onDelete: Restrict, map: "business_departmentFk")
  occupationCode                       occupationCode?     @relation(fields: [occupationCodeFk], references: [code], onDelete: Restrict, map: "business_occupationCodeFk")
  workerBusinessType                   workerBusinessType? @relation(fields: [workerBusinessTypeFk], references: [id], onDelete: Restrict, map: "business_workerBusinessTypeFk")
  worker_business_workerFkToworker     worker              @relation("business_workerFkToworker", fields: [workerFk], references: [id], map: "business_workerFk")
  calendar                             calendar[]
  worker_worker_businessFkTobusiness   worker?             @relation("worker_businessFkTobusiness")
  workerJourney                        workerJourney[]

  @@index([calendarTypeFk])
  @@index([companyCodeFk], map: "business_companyCodeFk")
  @@index([departmentFk])
  @@index([occupationCodeFk], map: "business_occupationCodeFk")
  @@index([workerBusinessAgreementFk])
  @@index([workerBusinessProfessionalCategoryFk])
  @@index([workerBusinessTypeFk])
  @@index([workerFk])
}

model businessReasonEnd {
  id     Int     @id @default(autoincrement()) @db.TinyInt
  reason String? @db.VarChar(255)
}

model businessType {
  code        String   @id @default("") @db.VarChar(100)
  description String   @db.VarChar(100)
  client      client[]
}

model buy {
  id                            Int        @id @default(autoincrement())
  entryFk                       Int        @default(0)
  itemFk                        Int        @default(90)
  quantity                      Int?       @default(0)
  dispatched                    Int        @default(0)
  buyingValue                   Decimal    @default(0.000) @db.Decimal(10, 3)
  freightValue                  Decimal    @default(0.000) @db.Decimal(10, 3)
  isIgnored                     Boolean    @default(false)
  stickers                      Int        @default(0)
  packing                       Int?       @default(0)
  grouping                      Int        @default(1) @db.UnsignedSmallInt
  groupingMode                  Int        @default(0) @db.TinyInt
  containerFk                   Int?       @db.UnsignedSmallInt
  comissionValue                Decimal    @default(0.000) @db.Decimal(10, 3)
  packageValue                  Decimal    @default(0.000) @db.Decimal(10, 3)
  location                      String?    @db.VarChar(5)
  packageFk                     String?    @default("--") @db.VarChar(10)
  price1                        Decimal?   @default(0.00) @db.Decimal(10, 2)
  price2                        Decimal?   @default(0.00) @db.Decimal(10, 2)
  price3                        Decimal?   @default(0.00) @db.Decimal(10, 2)
  minPrice                      Decimal?   @default(0.00) @db.Decimal(10, 2)
  printedStickers               Int?       @default(0)
  workerFk                      Int?       @default(0)
  isChecked                     Boolean    @default(false)
  isPickedOff                   Boolean    @default(false)
  created                       DateTime   @default(now()) @db.Timestamp(0)
  cm2                           Int        @default(0) @map("__cm2") @db.UnsignedInt
  ektFk                         Int?
  weight                        Decimal?   @db.Decimal(10, 2)
  deliveryFk                    Int?
  itemOriginalFk                Int?
  item_buy_itemOriginalFkToitem item?      @relation("buy_itemOriginalFkToitem", fields: [itemOriginalFk], references: [id], map: "buy_FK")
  item_buy_itemFkToitem         item       @relation("buy_itemFkToitem", fields: [itemFk], references: [id], map: "buy_ibfk_1")
  packaging                     packaging? @relation(fields: [packageFk], references: [id], onDelete: Restrict, map: "buy_ibfk_2")
  entry                         entry      @relation(fields: [entryFk], references: [id], onDelete: NoAction, map: "buy_id")
  buyMark                       buyMark?
  saleBuy                       saleBuy[]

  @@index([workerFk], map: "CompresId_Trabajador")
  @@index([packageFk], map: "Id_Cubo")
  @@index([entryFk], map: "Id_Entrada")
  @@index([itemOriginalFk], map: "buy_FK")
  @@index([ektFk], map: "buy_edi_id")
  @@index([deliveryFk], map: "buy_fk_4_idx")
  @@index([containerFk], map: "container_id")
  @@index([itemFk, entryFk], map: "itemFk_entryFk")
}

model buyMark {
  id       Int       @id
  comment  String?   @db.VarChar(255)
  mark     Boolean?
  odbcDate DateTime? @default(now()) @db.Timestamp(0)
  buy      buy       @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Compres_mark_ibfk_1")
}

model calendar {
  id           Int         @id @default(autoincrement())
  businessFk   Int
  dayOffTypeFk Int
  dated        DateTime    @db.Date
  absenceType  absenceType @relation(fields: [dayOffTypeFk], references: [id], map: "calendar_FK")
  business     business    @relation(fields: [businessFk], references: [id], map: "calendar_businessFk")

  @@index([businessFk], map: "calendar_employee_business_labour_id_idx")
  @@index([dayOffTypeFk], map: "calendar_employee_calendar_state_calendar_state_id_idx")
  @@index([id], map: "id_index")
}

model calendarHolidays {
  id                     Int                   @id @default(autoincrement())
  calendarHolidaysTypeFk Int
  dated                  DateTime              @db.Date
  calendarHolidaysNameFk Int?
  workCenterFk           Int?
  calendarHolidaysName   calendarHolidaysName? @relation(fields: [calendarHolidaysNameFk], references: [id], onDelete: Cascade, map: "calendarHolidaysNameFk")
  calendarHolidaysType   calendarHolidaysType  @relation(fields: [calendarHolidaysTypeFk], references: [id], onDelete: Cascade, map: "calendarholidaystypeFk")
  workCenter             workCenter?           @relation(fields: [workCenterFk], references: [id], onDelete: Cascade, map: "workCenterFk")

  @@unique([dated, workCenterFk], map: "calendarHolidays_UN")
  @@index([calendarHolidaysNameFk], map: "calendarHolidaysNameFk_idx")
  @@index([calendarHolidaysTypeFk], map: "calendarholidaystypeFk_idx")
  @@index([workCenterFk], map: "workCenterFk_idx")
}

model calendarHolidaysName {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar(100)
  calendarHolidays calendarHolidays[]
}

model calendarHolidaysType {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  hexColour        String             @db.Char(7)
  calendarHolidays calendarHolidays[]
}

model campaign {
  id        Int           @id @default(autoincrement())
  code      campaign_code
  dated     DateTime      @unique(map: "campaign_dated_uindex") @default(now()) @db.DateTime(0)
  scopeDays Int           @default(15)
}

model category {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(45)
  nick        String @db.VarChar(3)
}

model chain {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(45)
  rappel      Decimal       @default(0.00) @db.Decimal(5, 2)
  componentFk Int?
  component   component?    @relation(fields: [componentFk], references: [id], map: "chain_FK")
  clientChain clientChain[]

  @@index([componentFk], map: "chain_FK")
}

model chat {
  id              Int       @id @default(autoincrement())
  senderFk        Int?      @db.UnsignedInt
  recipient       String?   @db.VarChar(50)
  dated           DateTime? @db.DateTime(0)
  checkUserStatus Boolean?
  message         String?   @db.Text
  status          Boolean?
  attempts        Int?
  error           String?   @db.Text

  @@index([senderFk], map: "chat_FK")
}

model chatConfig {
  id       Int    @id @default(autoincrement())
  host     String @db.VarChar(255)
  api      String @db.VarChar(255)
  user     String @db.VarChar(50)
  password String @db.VarChar(50)
}

model claim {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  ticketCreated    DateTime           @db.Date
  claimStateFk     Int                @default(1) @db.UnsignedInt
  observation      String?            @db.Text
  clientFk         Int
  workerFk         Int
  responsibility   Int                @default(3) @db.UnsignedInt
  isChargedToMana  Boolean            @default(false)
  created          DateTime?          @default(now()) @db.Timestamp(0)
  ticketFk         Int?
  hasToPickUp      Boolean
  packages         Int?               @default(0) @db.UnsignedSmallInt
  rma              String?            @db.VarChar(100)
  ticket           ticket?            @relation(fields: [ticketFk], references: [id], onDelete: Restrict, map: "cl_main_ticketFk")
  claimState       claimState         @relation(fields: [claimStateFk], references: [id], map: "claim_ibfk_3")
  client           client             @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "claim_ibfk_5")
  claimBeginning   claimBeginning[]
  claimDevelopment claimDevelopment[]
  claimDms         claimDms[]
  claimEnd         claimEnd[]
  claimLog         claimLog[]
  claimObservation claimObservation[]

  @@index([clientFk], map: "Id_Cliente")
  @@index([workerFk], map: "Id_Trabajador")
  @@index([claimStateFk], map: "cl_est_id")
  @@index([ticketFk], map: "cl_main_ticketFk_idx")
}

model claimBeginning {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  claimFk  Int    @db.UnsignedInt
  saleFk   Int?
  quantity Float?
  sale     sale?  @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "claimBeginning_ibfk_7")
  claim    claim  @relation(fields: [claimFk], references: [id], onDelete: Cascade, map: "claimBeginning_ibfk_8")

  @@index([saleFk], map: "Id_Movimiento")
  @@index([claimFk], map: "cl_main_id")
}

model claimConfig {
  id                Int  @id
  maxResponsibility Int?
}

model claimDestination {
  id               Int                @id @default(autoincrement()) @db.UnsignedTinyInt
  description      String             @db.VarChar(15)
  addressFk        Int?
  address          address?           @relation(fields: [addressFk], references: [id], map: "clSolAddressFk")
  claimDevelopment claimDevelopment[]

  @@index([addressFk], map: "clSolAddressFk_idx")
}

model claimDevelopment {
  id                 Int              @id @default(autoincrement()) @db.UnsignedInt
  claimFk            Int              @db.UnsignedInt
  claimResponsibleFk Int              @default(1) @db.UnsignedInt
  workerFk           Int?             @db.UnsignedInt
  claimReasonFk      Int              @default(1) @db.UnsignedInt
  claimResultFk      Int              @default(1) @db.UnsignedInt
  claimRedeliveryFk  Int              @default(1) @db.UnsignedTinyInt
  claimDestinationFk Int              @default(2) @db.UnsignedTinyInt
  claim              claim            @relation(fields: [claimFk], references: [id], onDelete: Cascade, map: "claimDevelopment_ibfk_10")
  claimRedelivery    claimRedelivery  @relation(fields: [claimRedeliveryFk], references: [id], map: "claimDevelopment_ibfk_11")
  claimDestination   claimDestination @relation(fields: [claimDestinationFk], references: [id], map: "claimDevelopment_ibfk_12")
  claimResponsible   claimResponsible @relation(fields: [claimResponsibleFk], references: [id], map: "claimDevelopment_ibfk_6")
  claimReason        claimReason      @relation(fields: [claimReasonFk], references: [id], map: "claimDevelopment_ibfk_7")
  claimResult        claimResult      @relation(fields: [claimResultFk], references: [id], map: "claimDevelopment_ibfk_8")
  worker             worker?          @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "claimDevelopment_ibfk_9")

  @@index([workerFk], map: "Id_Trabajador")
  @@index([claimResultFk], map: "cl_con_id")
  @@index([claimRedeliveryFk], map: "cl_dev")
  @@index([claimFk], map: "cl_main_id")
  @@index([claimReasonFk], map: "cl_mot_id")
  @@index([claimResponsibleFk], map: "cl_res_id")
  @@index([claimDestinationFk], map: "cl_sol")
}

model claimDms {
  claimFk Int   @db.UnsignedInt
  dmsFk   Int
  claim   claim @relation(fields: [claimFk], references: [id], onDelete: Cascade, map: "claimFk")
  dms     dms   @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "dmsFk")

  @@id([claimFk, dmsFk])
  @@index([dmsFk], map: "dmsFk_idx")
}

model claimEnd {
  id                 Int    @id @default(autoincrement()) @db.UnsignedInt
  saleFk             Int?
  claimFk            Int    @db.UnsignedInt
  workerFk           Int    @default(20) @db.UnsignedInt
  claimDestinationFk Int?   @db.TinyInt
  isGreuge           Int    @default(0) @db.TinyInt
  sale               sale?  @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "claimEnd_ibfk_1")
  worker             worker @relation(fields: [workerFk], references: [id], map: "claimEnd_ibfk_3")
  claim              claim  @relation(fields: [claimFk], references: [id], onDelete: Cascade, map: "claimEnd_ibfk_4")

  @@index([saleFk], map: "Id_Movimiento")
  @@index([workerFk], map: "Id_Trabajador")
  @@index([claimFk], map: "cl_main_id")
  @@index([claimDestinationFk], map: "cl_sol_id")
}

model claimLog {
  id                Int       @id @default(autoincrement())
  originFk          Int       @db.UnsignedInt
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  claim             claim     @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "claimOriginFk")

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model claimObservation {
  id       Int      @id @default(autoincrement()) @db.UnsignedMediumInt
  claimFk  Int      @db.UnsignedInt
  workerFk Int?     @db.UnsignedInt
  text     String   @db.Text
  created  DateTime @default(now()) @db.Timestamp(0)
  claim    claim    @relation(fields: [claimFk], references: [id], onDelete: Cascade, map: "claimObservation_ibfk_1")
  worker   worker?  @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "claimObservation_ibfk_2")

  @@index([created], map: "claimObservation_created_IDX")
  @@index([claimFk], map: "claim_key")
  @@index([workerFk], map: "worker_key")
}

model claimRatio {
  clientFk        Int      @id @default(0)
  yearSale        Decimal? @db.Decimal(10, 2)
  claimAmount     Decimal? @db.Decimal(10, 2)
  claimingRate    Decimal? @db.Decimal(5, 2)
  priceIncreasing Decimal? @db.Decimal(5, 2)
  packingRate     Decimal  @default(1.00) @db.Decimal(5, 2)
  client          client   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "claimRatio_ibfk_1")
}

model claimReason {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  description      String             @db.VarChar(45)
  isTired          Boolean            @default(false)
  claimDevelopment claimDevelopment[]
}

model claimRedelivery {
  id               Int                @id @default(autoincrement()) @db.UnsignedTinyInt
  description      String             @db.VarChar(45)
  claimDevelopment claimDevelopment[]
}

model claimResponsible {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  description      String             @db.VarChar(45)
  responsability   Int                @default(0) @db.TinyInt
  claimDevelopment claimDevelopment[]
}

model claimResult {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  description      String             @db.VarChar(45)
  claimDevelopment claimDevelopment[]
}

model claimRma {
  id       Int      @id @default(autoincrement()) @db.UnsignedInt
  code     String   @db.VarChar(100)
  created  DateTime @default(now()) @db.Timestamp(0)
  workerFk Int      @db.UnsignedInt
}

model claimState {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  code        String? @db.VarChar(45)
  description String  @db.VarChar(15)
  roleFk      Int     @default(1) @db.UnsignedInt
  priority    Int     @default(1)
  hasToNotify Int?    @default(0) @db.TinyInt
  claim       claim[]

  @@index([roleFk], map: "roleFgn_idx")
}

model client {
  id                                                       Int                            @id @default(autoincrement())
  name                                                     String                         @db.VarChar(50)
  defaultAddressFk                                         Int?
  street                                                   String?                        @db.LongText
  fi                                                       String?                        @unique(map: "IF") @db.VarChar(14)
  phone                                                    String?                        @db.VarChar(15)
  email                                                    String?                        @db.VarChar(255)
  dueDay                                                   Int                            @default(5) @db.SmallInt
  isTaxDataChecked                                         Boolean                        @default(false)
  mobile                                                   String?                        @db.VarChar(15)
  accountingAccount                                        String                         @db.VarChar(10)
  isEqualizated                                            Boolean                        @default(false)
  city                                                     String?                        @db.VarChar(25)
  provinceFk                                               Int?                           @db.UnsignedSmallInt
  postcode                                                 String?                        @db.VarChar(8)
  socialName                                               String?                        @db.VarChar(60)
  contact                                                  String?                        @db.VarChar(50)
  hasToInvoice                                             Boolean                        @default(true)
  isFreezed                                                Boolean                        @default(false)
  salesPersonFk                                            Int?                           @db.UnsignedInt
  credit                                                   Decimal                        @default(0.00) @db.Decimal(10, 2)
  countryFk                                                Int                            @default(1) @db.UnsignedMediumInt
  isActive                                                 Boolean                        @default(true)
  gestdocFk                                                Int?
  quality                                                  Int?                           @default(11)
  payMethodFk                                              Int                            @default(5) @db.UnsignedTinyInt
  created                                                  DateTime?                      @default(now()) @db.Timestamp(0)
  isToBeMailed                                             Boolean                        @default(true)
  contactChannelFk                                         Int?                           @db.SmallInt
  isVies                                                   Int                            @default(0) @db.TinyInt
  hasSepaVnl                                               Boolean?                       @default(false)
  hasCoreVnl                                               Boolean?                       @default(false)
  riskCalculated                                           DateTime                       @db.Date
  hasCoreVnh                                               Boolean?                       @default(false)
  isRelevant                                               Boolean                        @default(true)
  clientTypeFk                                             Int                            @default(1)
  mailAddress                                              Int?
  creditInsurance                                          Int?
  eypbc                                                    Boolean                        @default(false)
  hasToInvoiceByAddress                                    Boolean?                       @default(false)
  isCreatedAsServed                                        Boolean?                       @default(false)
  hasInvoiceSimplified                                     Boolean                        @default(false)
  hasElectronicInvoice                                     Boolean                        @default(false)
  iban                                                     String?                        @db.VarChar(45)
  hasLcr                                                   Boolean                        @default(false)
  bankEntityFk                                             Int?                           @db.UnsignedInt
  typeFk                                                   String                         @default("normal") @db.VarChar(20)
  taxTypeSageFk                                            Int?                           @db.SmallInt
  transactionTypeSageFk                                    Int?                           @db.TinyInt
  transferorFk                                             Int?
  lastSalesPersonFk                                        Int?                           @db.UnsignedInt
  businessTypeFk                                           String?                        @db.VarChar(20)
  hasIncoterms                                             Boolean                        @default(false)
  activityTaxDismissed                                     activityTaxDismissed?
  address_address_clientFkToclient                         address[]                      @relation("address_clientFkToclient")
  claim                                                    claim[]
  claimRatio                                               claimRatio?
  contactChannel                                           contactChannel?                @relation(fields: [contactChannelFk], references: [id], onDelete: Restrict, map: "canal_nuevo_cliente")
  businessType                                             businessType?                  @relation(fields: [businessTypeFk], references: [code], onDelete: Cascade, map: "client_FK")
  bankEntity                                               bankEntity?                    @relation(fields: [bankEntityFk], references: [id], onDelete: Restrict, map: "client_FK_1")
  worker_client_lastSalesPersonFkToworker                  worker?                        @relation("client_lastSalesPersonFkToworker", fields: [lastSalesPersonFk], references: [id], onDelete: Restrict, map: "client_FK_2")
  client                                                   client?                        @relation("clientToclient", fields: [transferorFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "client_FK_3")
  other_client                                             client[]                       @relation("clientToclient")
  country                                                  country                        @relation(fields: [countryFk], references: [id], map: "client_ibfk_1")
  payMethod                                                payMethod                      @relation(fields: [payMethodFk], references: [id], map: "client_ibfk_2")
  worker_client_salesPersonFkToworker                      worker?                        @relation("client_salesPersonFkToworker", fields: [salesPersonFk], references: [id], map: "client_ibfk_3")
  address_client_defaultAddressFkToaddress                 address?                       @relation("client_defaultAddressFkToaddress", fields: [defaultAddressFk], references: [id], map: "client_ibfk_4")
  province                                                 province?                      @relation(fields: [provinceFk], references: [id], onDelete: Restrict, map: "client_ibfk_5")
  clientType_client_clientTypeFkToclientType               clientType                     @relation("client_clientTypeFkToclientType", fields: [clientTypeFk], references: [id], map: "tipos_de_cliente")
  clientType_client_typeFkToclientType                     clientType                     @relation("client_typeFkToclientType", fields: [typeFk], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "typeFk")
  clientChain                                              clientChain[]
  clientCredit                                             clientCredit[]
  clientDms                                                clientDms[]
  clientItemCategory                                       clientItemCategory[]
  clientItemType                                           clientItemType[]
  clientLog                                                clientLog[]
  clientManaCache                                          clientManaCache[]
  clientObservation                                        clientObservation[]
  clientPackagingGifts                                     clientPackagingGifts[]
  clientProtected                                          clientProtected?
  clientRisk                                               clientRisk[]
  clientUnpaid                                             clientUnpaid?
  clientYoke_clientYoke_leftOxToclient                     clientYoke[]                   @relation("clientYoke_leftOxToclient")
  clientYoke_clientYoke_rightOxToclient                    clientYoke[]                   @relation("clientYoke_rightOxToclient")
  company                                                  company[]
  creditClassification_creditClassification_clientToclient creditClassification[]         @relation("creditClassification_clientToclient")
  department                                               department[]
  invoiceOut                                               invoiceOut[]
  mandate                                                  mandate[]
  receipt                                                  receipt[]
  recovery                                                 recovery[]
  sharingClient                                            sharingClient[]
  sinister                                                 sinister[]
  specialPrice                                             specialPrice[]
  splitFilter                                              splitFilter?
  ticket                                                   ticket[]
  ticketPackagingStartingStock                             ticketPackagingStartingStock[]

  @@index([accountingAccount], map: "Cuenta")
  @@index([countryFk], map: "Id_Pais")
  @@index([salesPersonFk], map: "Id_Trabajador")
  @@index([phone], map: "Telefono")
  @@index([contactChannelFk], map: "canal_nuevo_cliente")
  @@index([businessTypeFk], map: "client_FK")
  @@index([transferorFk], map: "client_FK_3")
  @@index([lastSalesPersonFk], map: "client_lastSalesPersonFk_IDX")
  @@index([taxTypeSageFk])
  @@index([transactionTypeSageFk])
  @@index([postcode], map: "codpos")
  @@index([defaultAddressFk], map: "default_address")
  @@index([bankEntityFk], map: "fk_Clientes_entity_idx")
  @@index([mobile], map: "movil")
  @@index([payMethodFk], map: "pay_met_id")
  @@index([provinceFk], map: "province_id")
  @@index([clientTypeFk], map: "tipos_de_cliente_idx")
  @@index([typeFk], map: "typeFk")
}

model clientChain {
  id       Int    @id @default(autoincrement())
  clientFk Int
  chainFk  Int
  client   client @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "clientChain_fk1")
  chain    chain  @relation(fields: [chainFk], references: [id], onDelete: Cascade, map: "clientChain_fk2")

  @@index([clientFk], map: "clientChain_fk1_idx")
  @@index([chainFk], map: "clientChain_fk2_idx")
}

model clientConfig {
  id                      Int     @id @default(autoincrement())
  riskTolerance           Int?
  maxCreditRows           Int?
  maxPriceIncreasingRatio Decimal @default(0.25) @db.Decimal(2, 2)
  riskScope               Int     @default(2)
}

model clientConsumptionQueue {
  id      Int       @id @default(autoincrement())
  params  String    @db.LongText
  queued  DateTime  @default(now()) @db.DateTime(0)
  printed DateTime? @db.DateTime(0)
  status  String?   @default("") @db.VarChar(50)
}

model clientContact {
  id       Int     @id @default(autoincrement())
  clientFk Int
  name     String? @db.VarChar(45)
  phone    String? @db.VarChar(15)
}

model clientCredit {
  id       Int      @id @default(autoincrement()) @db.UnsignedInt
  clientFk Int
  amount   Float
  created  DateTime @default(now()) @db.Timestamp(0)
  workerFk Int?     @db.UnsignedInt
  client   client   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "credit_ClienteFk")
  worker   worker?  @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "workers_fk")

  @@index([clientFk], map: "credit_ClienteFk")
  @@index([workerFk], map: "workers_fk_idx")
}

model clientCreditLimit {
  id        Int @id
  maxAmount Int @db.UnsignedInt
  roleFk    Int @db.UnsignedInt

  @@index([roleFk], map: "clientCreditLimit_FK_idx")
}

model clientDms {
  clientFk Int
  dmsFk    Int    @id
  dms      dms    @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "clientDms_ibfk_2")
  client   client @relation(fields: [clientFk], references: [id], map: "fk_clientes_gestdoc_3")

  @@index([clientFk], map: "fk_clientes_gestdoc_1_idx")
  @@index([dmsFk], map: "gest_doc_id")
}

model clientItemCategory {
  id             Int          @id @default(autoincrement())
  clientFk       Int
  itemCategoryFk Int          @db.UnsignedInt
  client         client       @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "clientItemCategory_FK")
  itemCategory   itemCategory @relation(fields: [itemCategoryFk], references: [id], onDelete: Cascade, map: "clientItemCategory_FK_1")

  @@index([clientFk], map: "clientItemCategory_FK")
  @@index([itemCategoryFk], map: "clientItemCategory_FK_1")
}

model clientItemType {
  id         Int      @id @default(autoincrement())
  created    DateTime @default(now()) @db.Timestamp(0)
  clientFk   Int
  itemTypeFk String   @db.VarChar(3)
  isAllowed  Boolean? @default(false)
  client     client   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "clientItemType_FK")
  itemType   itemType @relation(fields: [itemTypeFk], references: [code], onDelete: Cascade, map: "clientItemType_FK_1")

  @@index([clientFk], map: "clientItemType_FK")
  @@index([itemTypeFk], map: "clientItemType_FK_1")
}

model clientLog {
  id                Int       @id @default(autoincrement())
  originFk          Int
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  client            client    @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "clientLog_ibfk_1")

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model clientManaCache {
  clientFk Int
  mana     Decimal  @default(0) @db.Decimal(10, 0)
  dated    DateTime @db.Date
  client   client   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "cliente_fk")

  @@id([clientFk, dated])
  @@index([dated], map: "manaCustomerIdx1")
}

model clientObservation {
  id       Int      @id @default(autoincrement()) @db.UnsignedMediumInt
  clientFk Int
  workerFk Int?     @db.UnsignedInt
  text     String   @db.Text
  created  DateTime @default(now()) @db.Timestamp(0)
  client   client   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "clientObservation_ibfk_1")
  worker   worker?  @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "clientObservation_ibfk_2")

  @@index([clientFk], map: "Id_Cliente")
  @@index([workerFk], map: "Id_Trabajador")
  @@index([created], map: "clientObservation_created_IDX")
}

model clientPackagingGifts {
  clientFk       Int
  giftFk         Int
  added          DateTime       @default(now()) @db.Timestamp(0)
  client         client         @relation(fields: [clientFk], references: [id], onUpdate: Restrict, map: "clientPackagingGifts_FK")
  packagingGifts packagingGifts @relation(fields: [giftFk], references: [id], onUpdate: Restrict, map: "clientPackagingGifts_FK_1")

  @@id([clientFk, giftFk])
  @@index([giftFk], map: "clientPackagingGifts_FK_1")
}

model clientProtected {
  clientFk Int    @id
  workerFk Int    @db.UnsignedInt
  client   client @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "clientProtected_fk1")
  worker   worker @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "clientProtected_fk2")

  @@index([workerFk], map: "clientProtected_fk2_idx")
}

model clientRisk {
  clientFk  Int      @default(0)
  companyFk Int      @default(0) @db.UnsignedSmallInt
  amount    Decimal? @db.Decimal(10, 2)
  client    client   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "clientRisk_ibfk_1")
  company   company  @relation(fields: [companyFk], references: [id], onDelete: Cascade, map: "clientRisk_ibfk_2")

  @@id([clientFk, companyFk])
  @@index([companyFk], map: "company_id")
}

model clientSample {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  clientFk  Int      @db.UnsignedInt
  typeFk    Int      @db.UnsignedInt
  created   DateTime @default(now()) @db.DateTime(0)
  workerFk  Int      @db.UnsignedInt
  balance   Float    @db.Float
  companyFk Int?     @db.UnsignedSmallInt
  userFk    Int?
  company   company? @relation(fields: [companyFk], references: [id], onDelete: Restrict, map: "clientSample_ibfk_1")

  @@index([companyFk], map: "empresa_id")
}

model clientType {
  id                                     Int      @id @default(autoincrement())
  code                                   String   @unique(map: "code_UNIQUE") @db.VarChar(20)
  type                                   String   @db.VarChar(45)
  isCreatedAsServed                      Boolean? @default(false)
  client_client_clientTypeFkToclientType client[] @relation("client_clientTypeFkToclientType")
  client_client_typeFkToclientType       client[] @relation("client_typeFkToclientType")
}

model clientUnpaid {
  clientFk Int      @id
  dated    DateTime @db.Date
  amount   Float?   @default(0)
  client   client   @relation(fields: [clientFk], references: [id], map: "clientUnpaid_clientFk")
}

model clientYoke {
  leftOx                            Int
  rightOx                           Int
  client_clientYoke_leftOxToclient  client @relation("clientYoke_leftOxToclient", fields: [leftOx], references: [id], onDelete: Cascade, map: "clientYoke_fk1")
  client_clientYoke_rightOxToclient client @relation("clientYoke_rightOxToclient", fields: [rightOx], references: [id], onDelete: Cascade, map: "clientYoke_fk2")

  @@id([leftOx, rightOx])
  @@index([rightOx], map: "clientYoke_fk2_idx")
}

model cmr {
  id                                 Int         @id @default(autoincrement())
  ticketFk                           Int?
  truckPlate                         String?     @db.VarChar(30)
  observations                       String?     @db.VarChar(255)
  senderInstruccions                 String?     @default("Flowers 4º C. Plants 14º C") @db.VarChar(255)
  paymentInstruccions                String?     @default("Carriage paid") @db.VarChar(255)
  specialAgreements                  String?     @db.VarChar(255)
  created                            DateTime?   @default(now()) @db.Timestamp(0)
  companyFk                          Int?        @db.UnsignedSmallInt
  addressToFk                        Int?
  addressFromFk                      Int?
  supplierFk                         Int?
  packagesList                       String?     @db.VarChar(255)
  merchandiseDetail                  String?     @db.VarChar(255)
  state                              String?     @db.VarChar(100)
  landed                             DateTime?   @db.DateTime(0)
  ead                                DateTime?   @db.DateTime(0)
  supplier                           supplier?   @relation(fields: [supplierFk], references: [id], onDelete: Restrict, map: "cm_fk4")
  address_cmr_addressFromFkToaddress address?    @relation("cmr_addressFromFkToaddress", fields: [addressFromFk], references: [id], onDelete: Restrict, map: "cmr_FK")
  ticket                             ticket?     @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "cmr_fk1")
  company                            company?    @relation(fields: [companyFk], references: [id], map: "cmr_fk2")
  address_cmr_addressToFkToaddress   address?    @relation("cmr_addressToFkToaddress", fields: [addressToFk], references: [id], map: "cmr_fk3")
  cmrPallet                          cmrPallet[]

  @@index([supplierFk], map: "cm_fk4_idx")
  @@index([addressFromFk], map: "cmr_FK")
  @@index([ticketFk], map: "cmr_fk1_idx")
  @@index([companyFk], map: "cmr_fk2_idx")
  @@index([addressToFk], map: "cmr_fk3_idx")
}

model cmrConfig {
  id          Int  @id @default(autoincrement())
  dayOfMonth  Int?
  landingDays Int  @default(1) @db.TinyInt
}

model cmrPallet {
  id                 Int              @id @default(autoincrement())
  cmrFk              Int
  expeditionPalletFk Int
  scanned            DateTime         @default(now()) @db.Timestamp(0)
  cmr                cmr              @relation(fields: [cmrFk], references: [id], onDelete: Cascade, map: "cmr_expeditionPallet_fk1")
  expeditionPallet   expeditionPallet @relation(fields: [expeditionPalletFk], references: [id], onDelete: Cascade, map: "cmr_expeditionPallet_fk2")

  @@index([cmrFk], map: "cmr_expeditionPallet_fk1_idx")
  @@index([expeditionPalletFk], map: "cmr_expeditionPallet_fk2_idx")
}

model collection {
  id                Int                @id @default(autoincrement())
  created           DateTime           @default(now()) @db.Timestamp(0)
  workerFk          Int?               @db.UnsignedInt
  stateFk           Int?               @db.UnsignedTinyInt
  itemPackingTypeFk String?            @db.VarChar(1)
  saleTotalCount    Int                @default(0)
  salePickedCount   Int                @default(0)
  trainFk           Int                @default(1)
  sectorFk          Int?
  wagons            Int?
  warehouseFk       Int                @default(60) @db.UnsignedSmallInt
  sector            sector?            @relation(fields: [sectorFk], references: [id], map: "collectionSector_FK")
  train             train              @relation(fields: [trainFk], references: [id], map: "collectionTrain_Fk")
  warehouse         warehouse          @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, map: "collection_FK2")
  state             state?             @relation(fields: [stateFk], references: [id], map: "collection_id2")
  worker            worker?            @relation(fields: [workerFk], references: [id], map: "ticketCollection")
  packingSite       packingSite[]
  ticketCollection  ticketCollection[]
  ticketDown        ticketDown[]
  workerShelving    workerShelving[]

  @@index([sectorFk], map: "collectionSector_FK")
  @@index([trainFk], map: "collectionTrain_Fk")
  @@index([itemPackingTypeFk], map: "collection_FK")
  @@index([warehouseFk], map: "collection_FK2")
  @@index([stateFk], map: "collection_id2_idx")
  @@index([workerFk], map: "ticketCollection_idx")
}

model collectionColors {
  id      Int     @id @default(autoincrement())
  code    String  @db.VarChar(20)
  shelve  Int     @default(1)
  wagon   Int     @default(1)
  trainFk Int     @default(1)
  rgb     String? @db.Char(7)
  train   train   @relation(fields: [trainFk], references: [id], map: "collectionColors_FK")

  @@unique([shelve, wagon, trainFk], map: "collectionColors_UN")
  @@index([trainFk], map: "collectionColors_FK")
}

model collectionHotbed {
  id      Int       @id @default(autoincrement())
  userFk  Int
  created DateTime? @default(now()) @db.Timestamp(0)
}

model collectionVolumetry {
  id                Int             @id @default(autoincrement())
  level             Int             @default(0) @db.UnsignedInt
  lines             Int             @default(1) @db.UnsignedInt
  liters            Int             @default(0) @db.UnsignedInt
  height            Int             @default(20) @db.UnsignedInt
  itemPackingTypeFk String          @default("H") @db.VarChar(1)
  trainFk           Int             @default(1)
  itemPackingType   itemPackingType @relation(fields: [itemPackingTypeFk], references: [code], map: "collectionVolumetry_FK")
  train             train           @relation(fields: [trainFk], references: [id], map: "collectionVolumetry_FK_1")

  @@index([itemPackingTypeFk], map: "collectionVolumetry_FK")
  @@index([trainFk], map: "collectionVolumetry_FK_1")
}

model commissionConfig {
  rate                         Decimal @id @default(0.0000) @db.Decimal(5, 4)
  plusTeamAmount               Int?
  plusNewBornAmount            Int?
  plusSalesAmount              Int?
  minimumSalesByQuarter        Int?
  plusTeamRange                Int?
  plusNewBornRange             Int?
  rankingSalesRange            Int?
  minScoreForPlusTeam          Int?
  minScoreForPlusBoss          Int?
  plusTeam                     Int?
  plusBoss                     Int?
  executionDay                 Int?    @db.SmallInt
  salesPersonWithPlusNewClient Int?
  maxPlusNewClient             Int?
  plusDifference               Int?
  maxScoreNewClient            Int?
  scoreDifference              Int?
}

model company {
  id                Int               @id @db.UnsignedSmallInt
  code              String?           @unique(map: "companyCode_UNIQUE") @db.Char(3)
  register          String            @db.VarChar(120)
  workerManagerFk   Int               @db.UnsignedInt
  registered        DateTime          @db.Date
  expired           DateTime?         @db.Date
  logo              Bytes?
  isOfficial        Boolean           @default(true)
  hasCyc            Boolean           @default(false)
  rgb               String            @db.VarChar(6)
  email             String            @db.VarChar(30)
  stamp             Bytes?            @db.Blob
  created           DateTime          @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  clientFk          Int?
  sage200Company    Int?
  supplierAccountFk Int?              @db.UnsignedMediumInt
  isDefaulter       Int               @default(0) @db.TinyInt
  companyGroupFk    Int               @default(1)
  companyCode       Int?
  companyCodeTest   Int?
  footnotes         String?           @db.LongText
  phytosanitary     String?           @db.LongText
  fhAdminNumber     Int?
  XDiario           XDiario[]
  business          business[]
  clientRisk        clientRisk[]
  clientSample      clientSample[]
  cmr               cmr[]
  worker            worker            @relation(fields: [workerManagerFk], references: [id], map: "company_ibfk_1")
  client            client?           @relation(fields: [clientFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "empresa_cliente")
  supplierAccount   supplierAccount?  @relation(fields: [supplierAccountFk], references: [id], map: "empresa_fk4")
  companyGroup      companyGroup      @relation(fields: [companyGroupFk], references: [id], map: "fk_empresa_grupo")
  dms               dms[]
  dua               dua[]
  entry             entry[]
  host              host[]
  invoiceIn         invoiceIn[]
  invoiceOut        invoiceOut[]
  mandate           mandate[]
  payment           payment[]
  ppe               ppe[]
  project           project[]
  property          property[]
  receipt           receipt[]
  routeConfig       routeConfig[]
  sinister          sinister[]
  supplierExpense   supplierExpense[]
  ticket            ticket[]
  vehicle           vehicle[]

  @@index([supplierAccountFk], map: "Id_Proveedores_account")
  @@index([fhAdminNumber], map: "company_fhAdminNumber_IDX")
  @@index([clientFk], map: "empresa_cliente_idx")
  @@index([companyGroupFk], map: "empresa_grupo_fk_idx")
  @@index([workerManagerFk], map: "gerente_id")
}

model companyGroup {
  id      Int       @id @default(autoincrement())
  code    String    @db.VarChar(45)
  company company[]
}

model comparativeFilterType {
  comparativeFilterFk Int
  itemTypeFk          Int

  @@id([comparativeFilterFk, itemTypeFk])
}

model component {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(45)
  typeFk        Int
  classRate     Int?            @db.SmallInt
  tax           Float?
  isRenewable   Int             @default(1) @db.TinyInt
  code          String?         @db.VarChar(45)
  isRequired    Boolean         @default(false)
  chain         chain[]
  componentType componentType   @relation(fields: [typeFk], references: [id], map: "serie_componente")
  saleComponent saleComponent[]

  @@index([classRate], map: "comp")
  @@index([typeFk], map: "series_componentes_idx")
}

model componentType {
  id        Int         @id @default(autoincrement())
  type      String      @unique(map: "Serie_UNIQUE") @db.VarChar(45)
  isBase    Int         @default(0) @db.TinyInt
  isMargin  Int         @default(0) @db.TinyInt
  code      String?     @db.VarChar(20)
  component component[]
}

model confectionType {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  description String     @db.VarChar(45)
  itemType    itemType[]
}

model config {
  id                  Int       @id @default(autoincrement())
  ochoa               Int       @db.UnsignedInt
  invoiceOutFk        Int?      @default(0)
  inventoried         DateTime? @db.DateTime(0)
  itemLog             Int?      @default(0)
  weekGoal            Int?
  photosPath          String?   @db.VarChar(255)
  cashBoxNumber       Int?      @default(0)
  redCode             String?   @db.VarChar(50)
  TabletTime          DateTime? @db.DateTime(0)
  t0                  Int       @default(0)
  t1                  Int       @default(0)
  t2                  Int       @default(0)
  t3                  Int       @default(0)
  cc                  Float     @default(0)
  palet               Float     @default(0)
  campaign            DateTime  @db.DateTime(0)
  campaignLife        Int       @db.UnsignedTinyInt
  truckDays           Int       @db.UnsignedTinyInt
  transportCharges    Float
  escanerPath         String    @db.VarChar(50)
  printedTurn         Int?
  truckLength         Int?      @default(24)
  fuelConsumption     Int?
  petrol              Decimal?  @db.Decimal(10, 1)
  maintenance         Decimal?  @db.Decimal(10, 1)
  hourPrice           Decimal?  @db.Decimal(10, 1)
  meterPrice          Decimal?  @db.Decimal(10, 1)
  kmPrice             Decimal?  @db.Decimal(10, 1)
  routeOption         Int?      @default(1)
  dbproduccion        Boolean   @default(true)
  mdbServer           String    @db.VarChar(255)
  fakeEmail           String?   @db.VarChar(255)
  defaultersMaxAmount Int?      @default(200)
  ASIEN               BigInt?
  dayStartingHour     Int       @default(3)

  @@index([inventoried], map: "fechainv_idx")
}

model contactChannel {
  id     Int      @id @default(autoincrement()) @db.SmallInt
  name   String   @db.VarChar(45)
  client client[]
}

model continent {
  id      Int       @id @default(autoincrement()) @db.TinyInt
  name    String    @unique(map: "continent_name_uindex") @db.VarChar(50)
  code    String    @db.VarChar(2)
  country country[]
}

model contratos_subvencion_270619 {
  id            Int     @id @default(autoincrement())
  workerFk      Int     @db.UnsignedInt
  cod_centroFk  Int
  CodContratoFk Int
  journey       Decimal @default(8.00) @db.Decimal(5, 2)
  name          String  @db.VarChar(50)
  nif           String  @db.VarChar(12)
  worker        worker  @relation(fields: [workerFk], references: [id], map: "contratos_subvencion_270619_fk1")

  @@index([workerFk], map: "contratos_subvencion_270619_fk1_idx")
  @@index([cod_centroFk], map: "contratos_subvencion_270619_fk2_idx")
}

model conveyor {
  id                      Int                  @id @default(autoincrement())
  typeFk                  Int
  stratum                 Int                  @default(0)
  length                  Int?
  width                   Int?
  height                  Int?
  x                       Int?
  y                       Int?
  freeSpace               Int                  @default(0)
  isBusy                  Boolean              @default(false)
  tandem                  Int?
  conveyorBuildingClassFk Int
  conveyorType            conveyorType         @relation(fields: [typeFk], references: [id], map: "conveyor_fk1")
  conveyorExpedition      conveyorExpedition[]

  @@index([typeFk], map: "conveyor_fk1_idx")
}

model conveyorBuildingClass {
  id                 Int                  @id @default(autoincrement())
  description        String?              @db.VarChar(255)
  priority           Int                  @default(0)
  weightThreshold    Int
  conveyorExpedition conveyorExpedition[]
  packaging          packaging[]
}

model conveyorConfig {
  id       Int    @id @default(autoincrement())
  itemName String @unique(map: "itemName_UNIQUE") @db.VarChar(45)
  length   Int?
  width    Int?
  height   Int?
}

model conveyorExpedition {
  expeditionFk            Int                   @id
  conveyorFk              Int?
  created                 DateTime              @default(now()) @db.Timestamp(0)
  conveyorBuildingClassFk Int                   @default(1)
  length                  Int                   @default(1)
  width                   Int                   @default(1)
  height                  Int                   @default(1)
  x                       Int                   @default(18100)
  y                       Int                   @default(1)
  routeFk                 Int
  isIn                    Int                   @default(0) @db.TinyInt
  productionMinute        Int?
  isOut                   Int                   @default(0) @db.TinyInt
  truck                   String?               @db.VarChar(20)
  criterion               Int?
  isHeavy                 Boolean               @default(true)
  conveyor                conveyor?             @relation(fields: [conveyorFk], references: [id], onDelete: Restrict, map: "conveyorExpedition_fk1")
  conveyorBuildingClass   conveyorBuildingClass @relation(fields: [conveyorBuildingClassFk], references: [id], map: "conveyorExpedition_fk2")

  @@index([conveyorFk], map: "conveyorExpedition_fk1_idx")
  @@index([conveyorBuildingClassFk], map: "conveyorExpedition_fk2_idx")
}

model conveyorMode {
  code       String @id @db.VarChar(20)
  saturacion Int
  gap        Int
  isActive   Int    @default(0) @db.TinyInt
}

model conveyorType {
  id          Int        @id @default(autoincrement())
  description String?    @db.VarChar(45)
  color       Int
  conveyor    conveyor[]
}

model corridor {
  code        String  @id @db.VarChar(1)
  isAscendent Boolean @default(true)
  prepOrder   Int     @db.UnsignedInt
}

model country {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedMediumInt
  country                    String                       @db.VarChar(25)
  CEE                        Boolean                      @default(true)
  code                       String?                      @db.VarChar(2)
  currencyFk                 Int                          @default(1) @db.UnsignedTinyInt
  politicalCountryFk         Int                          @db.UnsignedMediumInt
  geoFk                      Int?
  hasDailyInvoice            Int                          @default(0) @db.TinyInt
  isUeeMember                Int                          @default(0) @db.TinyInt
  ibanLength                 Int?                         @db.TinyInt
  continentFk                Int?                         @db.TinyInt
  a3Code                     Int?
  addressFilter              addressFilter[]
  autonomy                   autonomy[]
  bankEntity                 bankEntity[]
  bookingPlanner             bookingPlanner[]
  botanicExport              botanicExport[]
  client                     client[]
  continent                  continent?                   @relation(fields: [continentFk], references: [id], onDelete: NoAction, map: "continent_id_fk")
  countryToCountry           country                      @relation("countryTocountry", fields: [politicalCountryFk], references: [id], map: "country_FK")
  other_country              country[]                    @relation("countryTocountry")
  zoneGeo                    zoneGeo?                     @relation(fields: [geoFk], references: [id], onDelete: Restrict, map: "country_FK_1")
  currency                   currency                     @relation(fields: [currencyFk], references: [id], onDelete: NoAction, map: "currency_id_fk")
  invoiceInTaxBookingAccount invoiceInTaxBookingAccount[]
  itemTaxCountry             itemTaxCountry[]
  packagingGifts             packagingGifts[]
  plantpassportAuthority     plantpassportAuthority[]
  province                   province[]
  supplier                   supplier[]
  taxType                    taxType[]
  warehouse                  warehouse[]
  worker                     worker[]

  @@index([politicalCountryFk], map: "Id_Paisreal")
  @@index([continentFk], map: "continent_id_fk_idx")
  @@index([geoFk], map: "country_FK_1")
  @@index([country], map: "country_Ix4")
  @@index([currencyFk], map: "currency_id_fk_idx")
}

model cplusCorrectingType {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(45)
}

model cplusInvoiceType472 {
  id          Int         @id @db.UnsignedInt
  description String      @db.VarChar(255)
  invoiceIn   invoiceIn[]
}

model cplusInvoiceType477 {
  id                Int                 @id @db.UnsignedInt
  description       String              @db.VarChar(255)
  invoiceCorrection invoiceCorrection[]
  invoiceOut        invoiceOut[]
}

model cplusRectificationType {
  id                Int                 @id @db.UnsignedInt
  description       String              @db.VarChar(255)
  invoiceCorrection invoiceCorrection[]
  invoiceIn         invoiceIn[]
}

model cplusSubjectOp {
  id          Int          @id @db.UnsignedInt
  description String       @db.VarChar(255)
  invoiceIn   invoiceIn[]
  invoiceOut  invoiceOut[]
}

model cplusTaxBreak {
  id          Int          @id @db.UnsignedInt
  description String       @db.VarChar(255)
  invoiceIn   invoiceIn[]
  invoiceOut  invoiceOut[]
  pgc         pgc[]
}

model cplusTerIdNif {
  id              Int               @id
  description     String            @db.VarChar(255)
  invoiceInSerial invoiceInSerial[]
}

model cplusTrascendency472 {
  id          Int         @id @db.UnsignedInt
  description String      @db.VarChar(255)
  invoiceIn   invoiceIn[]
}

model cplusTrascendency477 {
  id          Int    @id @db.UnsignedInt
  description String @db.VarChar(255)
  pgc         pgc[]
}

model creditClassification {
  id                                                                           Int               @id @default(autoincrement())
  client                                                                       Int
  dateStart                                                                    DateTime          @db.Date
  dateEnd                                                                      DateTime?         @db.Date
  client_creditClassification_clientToclient                                   client            @relation("creditClassification_clientToclient", fields: [client], references: [id], onDelete: Cascade, map: "creditClassifClientFk")
  creditInsurance_creditInsurance_creditClassificationTocreditClassification   creditInsurance[] @relation("creditInsurance_creditClassificationTocreditClassification")
  creditInsurance_creditInsurance_creditClassificationFkTocreditClassification creditInsurance[] @relation("creditInsurance_creditClassificationFkTocreditClassification")

  @@index([client], map: "creditClassifClientFk_idx")
  @@index([dateEnd], map: "creditClassifdateEnd_idx")
}

model creditInsurance {
  id                                                                                Int                   @id @default(autoincrement())
  creditClassification                                                              Int?
  credit                                                                            Int?
  creationDate                                                                      DateTime              @default(now()) @db.Timestamp(0)
  grade                                                                             Boolean?
  creditClassificationFk                                                            Int?
  creditClassification_creditInsurance_creditClassificationTocreditClassification   creditClassification? @relation("creditInsurance_creditClassificationTocreditClassification", fields: [creditClassification], references: [id], onDelete: Cascade, map: "CreditInsurance_Fk1")
  creditClassification_creditInsurance_creditClassificationFkTocreditClassification creditClassification? @relation("creditInsurance_creditClassificationFkTocreditClassification", fields: [creditClassificationFk], references: [id], onDelete: Cascade, map: "creditInsurance_creditClassificationFk")
  solunionCAP_solunionCAP_creditInsuranceTocreditInsurance                          solunionCAP[]         @relation("solunionCAP_creditInsuranceTocreditInsurance")

  @@index([creditClassification], map: "CreditInsurance_Fk1_idx")
  @@index([creditClassificationFk], map: "creditInsurance_creditClassificationFk")
}

model currency {
  id               Int                @id @db.UnsignedTinyInt
  code             String             @unique(map: "Moneda_UNIQUE") @db.VarChar(3)
  name             String?            @db.VarChar(45)
  ratio            Float              @default(1)
  accounting       accounting[]
  country          country[]
  payment          payment[]
  referenceCurrent referenceCurrent[]
  supplierExpense  supplierExpense[]
}

model customsAgent {
  id         Int       @id @default(autoincrement())
  fiscalName String    @db.VarChar(50)
  street     String?   @db.VarChar(50)
  nif        String    @unique(map: "nif_UNIQUE") @db.VarChar(50)
  phone      String?   @db.VarChar(16)
  email      String?   @db.VarChar(150)
  address    address[]
}

model dayMinute {
  id Int @id @db.UnsignedInt
  hh Int @db.UnsignedInt
  mm Int @db.UnsignedInt

  @@index([hh], map: "dayMinute_ix1")
  @@index([mm], map: "dayMinute_ix2")
}

model delivery {
  id        Int       @id @default(autoincrement())
  created   DateTime  @default(now()) @db.Timestamp(0)
  longitude Decimal?  @db.Decimal(11, 7)
  latitude  Decimal?  @db.Decimal(11, 7)
  dated     DateTime? @db.DateTime(0)
  addressFk Int
  address   address   @relation(fields: [addressFk], references: [id], onDelete: Cascade, map: "delivery_FK")

  @@index([addressFk], map: "delivery_FK")
}

model deliveryMethod {
  id          Int          @id @default(autoincrement())
  description String?      @db.VarChar(45)
  code        String       @unique(map: "code") @db.VarChar(45)
  agencyMode  agencyMode[]
}

model deliveryPoint {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(45)
  ubication String?   @db.VarChar(255)
  vehicle   vehicle[]
}

model delivery_zip {
  postal_code    String  @db.VarChar(2)
  country_code   String? @db.VarChar(5)
  place_name     String  @db.VarChar(150)
  admin_name1    String  @db.VarChar(150)
  code_name1     String? @db.VarChar(150)
  admin_name2    String? @db.VarChar(150)
  code_name2     String? @db.VarChar(2)
  admin_name3    String  @db.VarChar(150)
  code_name3     String  @db.VarChar(5)
  latitude       String  @db.VarChar(10)
  longitude      String  @db.VarChar(10)
  accuracy       String  @db.VarChar(1)
  delivery_zipPK Int     @id @default(autoincrement())

  @@index([admin_name2], map: "admin_name2_idx")
  @@index([admin_name3], map: "admin_name3_idx")
  @@index([country_code], map: "country_code_idx")
  @@index([place_name], map: "place_name_idx")
  @@index([postal_code], map: "postal_code_idx")
}

model department {
  id                Int                @id @default(autoincrement())
  code              String?            @db.VarChar(45)
  name              String             @unique(map: "name_UNIQUE") @db.VarChar(45)
  lft               Int?
  rgt               Int?
  workerFk          Int?               @db.UnsignedInt
  companyFk         Int
  isProduction      Int                @default(0) @db.TinyInt
  isSelected        Boolean            @default(false)
  depth             Int                @default(0)
  sons              Decimal            @default(0) @db.Decimal(10, 0)
  parentFk          Int?               @default(1)
  path              String?            @db.VarChar(255)
  chatName          String?            @db.VarChar(45)
  isTeleworking     Boolean?           @default(false)
  notificationEmail String?            @db.VarChar(150)
  hasToRefill       Boolean?           @default(false)
  hasToSendMail     Boolean?           @default(false)
  hasToCheckLogin   Boolean            @default(false)
  hasToMistake      Boolean            @default(false)
  clientFk          Int?
  budget            budget[]
  business          business[]
  client            client?            @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "department_FK")
  department        department?        @relation("departmentTodepartment", fields: [parentFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "department_FK_1")
  other_department  department[]       @relation("departmentTodepartment")
  worker            worker?            @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "fk_department_Trabajadores1")
  deviceProduction  deviceProduction[]
  itemCategory      itemCategory[]
  project           project[]
  tabletDepartment  tabletDepartment[]

  @@index([companyFk], map: "dep_org_ibfk_3_idx")
  @@index([clientFk], map: "department_FK")
  @@index([parentFk], map: "department_FK_1")
  @@index([workerFk], map: "fk_department_Trabajadores1_idx")
  @@index([lft, rgt, depth], map: "lft_rgt_depth_idx")
}

model department_recalc {
  id        Int @id @default(autoincrement()) @db.UnsignedInt
  isChanged Int @db.TinyInt
}

model device {
  id     Int     @id @default(autoincrement())
  sn     String? @db.VarChar(50)
  model  String? @db.VarChar(50)
  userFk Int     @db.UnsignedInt

  @@index([userFk], map: "device_fk1_idx")
}

model deviceLog {
  id         Int      @id @default(autoincrement())
  android_id String   @db.VarChar(100)
  userFk     Int?     @db.UnsignedInt
  created    DateTime @default(now()) @db.Timestamp(0)
  nameApp    String?  @db.VarChar(45)
  versionApp String?  @db.VarChar(45)
  worker     worker?  @relation(fields: [userFk], references: [id], onDelete: Restrict, map: "deviceLog_FK")

  @@index([userFk], map: "deviceLog_FK")
}

model deviceProduction {
  id                     Int                    @id @unique(map: "device_id_UNIQUE") @default(autoincrement())
  imei                   String?                @unique(map: "sn_UNIQUE") @db.VarChar(50)
  modelFk                String                 @db.VarChar(50)
  macWifi                String?                @db.VarChar(45)
  serialNumber           String?                @unique(map: "serial_number_UN") @db.VarChar(45)
  departmentFk           Int?
  isOutOfService         Boolean                @default(false)
  android_id             String?                @db.VarChar(50)
  purchased              DateTime               @default(dbgenerated("('1900-01-01')")) @db.Date
  department             department?            @relation(fields: [departmentFk], references: [id], map: "departmentFgn")
  deviceProductionModels deviceProductionModels @relation(fields: [modelFk], references: [code], map: "deviceProductionModelsFgn")
  deviceProductionUser   deviceProductionUser?

  @@index([departmentFk], map: "departmentFgn")
  @@index([modelFk], map: "deviceProductionModelsFgn")
}

model deviceProductionConfig {
  id                   Int     @id @default(autoincrement())
  isAllUsersallowed    Boolean @default(false)
  isTractorHuntingMode Boolean @default(false)
}

model deviceProductionModels {
  code             String             @id @db.VarChar(50)
  deviceProduction deviceProduction[]
}

model deviceProductionUser {
  deviceProductionFk Int              @id
  userFk             Int              @unique(map: "deviceProductionUser_UN") @db.UnsignedInt
  created            DateTime?        @default(now()) @db.Timestamp(0)
  deviceProduction   deviceProduction @relation(fields: [deviceProductionFk], references: [id], onDelete: Cascade, map: "deviceProductionUser_FK")

  @@index([userFk], map: "userFgn_idx")
}

model disabilityGrade {
  id              Int               @id @default(autoincrement())
  description     String            @db.VarChar(45)
  workerIrpf      workerIrpf[]
  workerRelatives workerRelatives[]
}

model dms {
  id                Int                 @id @default(autoincrement())
  dmsTypeFk         Int                 @default(1)
  reference         String?             @db.VarChar(50)
  description       String?             @db.VarChar(200)
  companyFk         Int                 @default(442) @db.UnsignedSmallInt
  hardCopyNumber    Int?                @db.UnsignedMediumInt
  contentType       String?             @db.VarChar(150)
  file              String?             @db.VarChar(30)
  hasFile           Int                 @default(0) @db.TinyInt
  workerFk          Int?                @db.UnsignedInt
  created           DateTime?           @default(now()) @db.Timestamp(0)
  warehouseFk       Int?                @default(60) @db.UnsignedSmallInt
  awb               awb[]
  budgetDms         budgetDms[]
  claimDms          claimDms[]
  clientDms         clientDms?
  company           company             @relation(fields: [companyFk], references: [id], map: "dms_companyFk")
  dmsType           dmsType             @relation(fields: [dmsTypeFk], references: [id], map: "dms_dmsTypeFk")
  warehouse         warehouse?          @relation(fields: [warehouseFk], references: [id], onDelete: Restrict, map: "dms_warehouseFk")
  worker            worker?             @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "dms_workerFk")
  dua               dua[]
  machineDetail     machineDetail[]
  machineDms        machineDms[]
  ppeDMS            ppeDMS[]
  propertyDms       propertyDms[]
  route             route[]
  supplierExpense   supplierExpense[]
  ticketDms         ticketDms[]
  travelThermograph travelThermograph[]
  vehicleDms        vehicleDms[]
  workerDocument    workerDocument[]

  @@unique([hardCopyNumber, warehouseFk], map: "dms_hardCopyNumber_IDX")
  @@unique([companyFk, hardCopyNumber, warehouseFk], map: "emp_id")
  @@index([dmsTypeFk])
  @@index([workerFk], map: "trabajador_id")
  @@index([warehouseFk], map: "warehouse_id")
}

model dmsRecover {
  id       Int       @id @default(autoincrement())
  ticketFk Int?
  sign     String?   @db.Text
  created  DateTime? @default(now()) @db.Timestamp(0)
  ticket   ticket?   @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "ticketFk")

  @@index([ticketFk], map: "ticketFk_idx")
}

model dmsType {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(45)
  path          String @db.VarChar(255)
  writeRoleFk   Int?   @db.UnsignedInt
  readRoleFk    Int?   @db.UnsignedInt
  code          String @db.VarChar(45)
  monthToDelete Int?   @db.UnsignedInt
  dms           dms[]

  @@index([readRoleFk], map: "readRoleFk")
  @@index([writeRoleFk], map: "writeRoleFk")
}

model dock {
  code          String          @id @default("") @db.VarChar(10)
  description   String?         @db.VarChar(50)
  routesMonitor routesMonitor[]
}

model docuware {
  id              Int     @id @default(autoincrement())
  code            String  @db.VarChar(50)
  fileCabinetName String  @db.VarChar(50)
  action          String  @db.VarChar(255)
  dialogName      String  @db.VarChar(100)
  findById        String? @db.VarChar(50)
}

model docuwareConfig {
  id     Int     @id @default(autoincrement())
  url    String? @db.VarChar(75)
  cookie String? @db.VarChar(1000)
}

model dua {
  id           Int            @id @default(autoincrement())
  code         String?        @unique(map: "code_UNIQUE") @db.VarChar(45)
  awbFk        Int            @db.UnsignedSmallInt
  issued       DateTime?      @db.Date
  operated     DateTime?      @db.Date
  booked       DateTime?      @db.Date
  bookEntried  DateTime?      @db.Date
  gestdocFk    Int?
  customsValue Decimal?       @db.Decimal(10, 2)
  companyFk    Int            @default(442) @db.UnsignedSmallInt
  ASIEN        Float?
  dms          dms?           @relation(fields: [gestdocFk], references: [id], map: "dua_fk1")
  awb          awb            @relation(fields: [awbFk], references: [id], onDelete: Cascade, map: "dua_fk2")
  company      company        @relation(fields: [companyFk], references: [id], map: "dua_fk4")
  duaEntry     duaEntry[]
  duaIntrastat duaIntrastat[]
  duaInvoiceIn duaInvoiceIn[]
  duaTax       duaTax[]

  @@index([companyFk], map: "dua_fk4_idx")
  @@index([awbFk], map: "fk_awb_dua_awb_idx")
  @@index([gestdocFk], map: "fk_dua_gestdoc1_idx")
}

model duaEntry {
  duaFk        Int
  entryFk      Int
  value        Decimal? @db.Decimal(10, 2)
  customsValue Decimal? @db.Decimal(10, 2)
  euroValue    Decimal? @db.Decimal(10, 2)
  entry        entry    @relation(fields: [entryFk], references: [id], onDelete: Cascade, map: "fk_duaEntry_Entradas1")
  dua          dua      @relation(fields: [duaFk], references: [id], onDelete: Cascade, map: "fk_duaEntry_dua1")

  @@id([duaFk, entryFk])
  @@index([entryFk], map: "fk_duaEntry_Entradas1_idx")
  @@index([duaFk], map: "fk_duaEntry_dua1_idx")
}

model duaIntrastat {
  id          Int       @id @default(autoincrement())
  duaFk       Int
  intrastatFk Int       @db.UnsignedInt
  amount      Decimal   @default(0.00) @db.Decimal(10, 2)
  intrastat   intrastat @relation(fields: [intrastatFk], references: [id], map: "duaIntrastat_fk1")
  dua         dua       @relation(fields: [duaFk], references: [id], onDelete: Cascade, map: "duaIntrastat_fk2")

  @@index([intrastatFk], map: "duaIntrastat_fk1_idx")
  @@index([duaFk], map: "duaIntrastat_fk2_idx")
}

model duaInvoiceIn {
  id          Int        @id @default(autoincrement())
  duaFk       Int
  invoiceInFk Int?       @db.UnsignedMediumInt
  dua         dua        @relation(fields: [duaFk], references: [id], onDelete: Cascade, map: "duaInvoiceIn_fk1")
  invoiceIn   invoiceIn? @relation(fields: [invoiceInFk], references: [id], onDelete: Cascade, map: "duaInvoiceIn_fk2")

  @@unique([duaFk, invoiceInFk], map: "duaFk_UNIQUE")
  @@index([duaFk], map: "duaInvoiceIn_fk1_idx")
  @@index([invoiceInFk], map: "duaInvoiceIn_fk2_idx")
}

model duaTax {
  id         Int      @id @default(autoincrement())
  duaFk      Int
  supplierFk Int
  taxClassFk Int      @db.UnsignedTinyInt
  base       Decimal  @db.Decimal(10, 2)
  rate       Decimal  @db.Decimal(5, 2)
  tax        Decimal  @db.Decimal(10, 2)
  dua        dua      @relation(fields: [duaFk], references: [id], onDelete: Cascade, map: "duaTax_fk1")
  supplier   supplier @relation(fields: [supplierFk], references: [id], map: "duaTax_fk2")
  taxClass   taxClass @relation(fields: [taxClassFk], references: [id], map: "duaTax_fk3")

  @@index([supplierFk], map: "duaTax_fk2_idx")
  @@index([taxClassFk], map: "duaTax_fk3_idx")
  @@index([duaFk], map: "fk_dua_tax_awb_dua1_idx")
}

model educationLevel {
  id     Int      @id @db.SmallInt
  name   String?  @db.VarChar(200)
  worker worker[]
}

model ektEntryAssign {
  id             Int      @id @default(autoincrement())
  kop            Int?
  sub            Int?     @db.UnsignedMediumInt
  pro            Int?     @db.UnsignedMediumInt
  auction        Int?
  warehouseOutFk Int?
  warehouseInFk  Int?
  agencyModeFk   Int?
  supplierFk     Int?
  entryFk        Int?
  ref            String?  @db.VarChar(45)
  addressFk      Int?
  companyFk      Int      @default(442) @db.UnsignedSmallInt
  address        address? @relation(fields: [addressFk], references: [id], map: "ektEntryAssign_FK")

  @@unique([kop, sub, pro], map: "ektEntryAssign_ix1")
  @@index([addressFk], map: "ektEntryAssign_FK")
}

model emergencyMedia {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(45)
  value String? @db.VarChar(45)
}

model energyInput {
  input       Int    @id
  description String @db.VarChar(255)
  consumption Int
}

model energyMeter {
  input       Int
  period      DateTime @db.DateTime(0)
  activeTime  Int
  consumption Decimal  @db.Decimal(10, 2)

  @@id([input, period])
}

model entry {
  id                      Int                @id @default(autoincrement())
  supplierFk              Int                @default(644)
  dated                   DateTime           @db.DateTime(0)
  invoiceNumber           String?            @db.VarChar(50)
  isBooked                Boolean            @default(false)
  isExcludedFromAvailable Boolean            @default(false)
  notes                   String?            @db.LongText
  isConfirmed             Boolean            @default(false)
  isOrdered               Boolean            @default(false)
  isRaid                  Boolean            @default(false)
  commission              Float?             @default(0) @db.Float
  created                 DateTime           @default(now()) @db.Timestamp(0)
  evaNotes                String?            @db.VarChar(45)
  travelFk                Int?               @db.UnsignedInt
  currencyFk              Int?               @default(1) @db.UnsignedTinyInt
  companyFk               Int                @default(442) @db.UnsignedSmallInt
  gestDocFk               Int?
  invoiceInFk             Int?               @db.UnsignedMediumInt
  isBlocked               Int                @default(0) @db.TinyInt
  loadPriority            Int?
  kop                     Int?
  sub                     Int?               @db.UnsignedMediumInt
  pro                     Int?               @db.UnsignedMediumInt
  auction                 Int?
  invoiceAmount           Decimal?           @db.Decimal(10, 2)
  buyerFk                 Int?               @db.UnsignedInt
  typeFk                  String?            @db.VarChar(100)
  reference               String?            @db.VarChar(50)
  buy                     buy[]
  duaEntry                duaEntry[]
  invoiceIn               invoiceIn?         @relation(fields: [invoiceInFk], references: [id], map: "Entradas_fk8")
  worker                  worker?            @relation(fields: [buyerFk], references: [id], onDelete: Restrict, map: "entry_FK")
  entryType               entryType?         @relation(fields: [typeFk], references: [code], onDelete: Restrict, map: "entry_FK_1")
  supplier                supplier           @relation(fields: [supplierFk], references: [id], map: "entry_ibfk_1")
  travel                  travel?            @relation(fields: [travelFk], references: [id], onDelete: Restrict, map: "entry_ibfk_6")
  company                 company            @relation(fields: [companyFk], references: [id], map: "entry_ibfk_7")
  entryLog                entryLog[]
  entryObservation        entryObservation[]
  entryVirtual            entryVirtual?

  @@index([dated], map: "Fecha")
  @@index([supplierFk], map: "Id_Proveedor")
  @@index([companyFk], map: "empresa_id")
  @@index([buyerFk], map: "entry_FK")
  @@index([typeFk], map: "entry_FK_1")
  @@index([gestDocFk], map: "gestdoc_id")
  @@index([invoiceInFk], map: "recibida_id")
  @@index([travelFk], map: "travel_id")
}

model entryConfig {
  defaultEntry        Int     @id
  mailToNotify        String? @db.VarChar(255)
  inventorySupplierFk Int?    @default(4)
}

model entryLog {
  id                Int       @id @default(autoincrement())
  originFk          Int
  userFk            Int       @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  entry             entry     @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "entryLog_ibfk_1")

  @@index([userFk], map: "entryLog_ibfk_2")
  @@index([originFk], map: "logEntry_ibfk_1")
}

model entryObservation {
  id                Int              @id @default(autoincrement())
  entryFk           Int
  observationTypeFk Int?             @db.UnsignedTinyInt
  description       String?          @db.Text
  entry             entry            @relation(fields: [entryFk], references: [id], onUpdate: Restrict, map: "entry_id_entryFk")
  observationType   observationType? @relation(fields: [observationTypeFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "observationType_id_observationTypeFk")

  @@unique([entryFk, observationTypeFk], map: "entryFk_observationTypeFk_UNIQUE")
  @@index([observationTypeFk], map: "observationType_id_observationTypeFk")
}

model entryType {
  code        String  @id @db.VarChar(100)
  description String  @db.VarChar(100)
  entry       entry[]
}

model entryVirtual {
  entryFk Int   @id
  entry   entry @relation(fields: [entryFk], references: [id], onDelete: Cascade, map: "entryVirtual_ibfk_1")
}

model envialiaAgency {
  id         String  @id @unique(map: "id_UNIQUE") @db.VarChar(6)
  route      String? @db.VarChar(3)
  agencyName String? @db.VarChar(45)
}

model envialiaCity {
  id         Int    @id @default(autoincrement())
  city       String @db.VarChar(255)
  postalCode String @db.VarChar(255)
  agencyFk   String @db.VarChar(45)

  @@index([agencyFk], map: "agencyFk")
  @@index([postalCode], map: "postalCode")
}

model envialiaConfig {
  serviceType          String  @id @default("024") @db.VarChar(3)
  numBox               String? @default("001") @db.VarChar(3)
  startRange           BigInt?
  endRange             BigInt?
  cargoAgency          String? @default("004666") @db.VarChar(25)
  actualNumber         BigInt?
  isAlreadyNotified    Int     @default(0)
  notificationThrehold Int?
}

model errorLogApp {
  id       Int       @id @default(autoincrement())
  error    String?   @db.VarChar(55)
  date     DateTime? @db.DateTime(0)
  workerFk Int?
}

model errorProduction {
  id           Int       @id @default(autoincrement())
  userFk       Int?
  firstname    String?   @db.VarChar(100)
  lastname     String?   @db.VarChar(100)
  rol          String?   @db.VarChar(100)
  ticketNumber Int?
  lineNumber   Int?
  error        Int?
  volume       Float?
  hourStart    String?   @db.VarChar(100)
  hourEnd      String?   @db.VarChar(100)
  hourWorked   String?   @db.VarChar(100)
  dated        DateTime? @db.Date
}

model erte {
  id        Int       @id @default(autoincrement())
  workerFk  Int
  started   DateTime? @db.Date
  ended     DateTime? @db.Date
  reduction Int       @default(1)
  monday    Boolean?
  tuesday   Boolean?
  wednesday Boolean?
  thursday  Boolean?
  friday    Boolean?
  saturday  Boolean?
  sunday    Boolean?
}

model excuse {
  id   Int      @id @default(autoincrement())
  txt  String   @db.VarChar(255)
  date DateTime @default(now()) @db.DateTime(0)
}

model expedition {
  id                  Int                  @id @default(autoincrement())
  agencyModeFk        Int
  ticketFk            Int
  freightItemFk       Int?                 @default(1)
  created             DateTime?            @default(now()) @db.Timestamp(0)
  itemFk__            Int?
  counter             Int                  @db.UnsignedSmallInt
  workerFk            Int?                 @db.UnsignedInt
  externalId          String?              @db.VarChar(20)
  packagingFk         String?              @db.VarChar(10)
  itemPackingTypeFk   String?              @db.VarChar(1)
  hostFk              String               @db.VarChar(6)
  stateTypeFk         Int?
  hasNewRoute         Boolean              @default(dbgenerated("(b'0')")) @db.Bit(1)
  isBox               Int?
  expeditionStateType expeditionStateType? @relation(fields: [stateTypeFk], references: [id], onDelete: Cascade, map: "expedition_FK")
  agencyMode          agencyMode           @relation(fields: [agencyModeFk], references: [id], map: "expedition_fk1")
  ticket              ticket               @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "expedition_fk2")
  packaging           packaging?           @relation(fields: [packagingFk], references: [id], onDelete: Restrict, map: "expedition_fk3")
  worker              worker?              @relation(fields: [workerFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "expedition_ibfk_1")
  itemPackingType     itemPackingType?     @relation(fields: [itemPackingTypeFk], references: [code], onDelete: Restrict, map: "expedition_itemPackingTypeFk")
  expeditionMistake   expeditionMistake?
  expeditionScan      expeditionScan?
  expeditionState     expeditionState[]

  @@index([stateTypeFk], map: "expedition_FK")
  @@index([packagingFk], map: "expedition_fk3_idx")
  @@index([itemPackingTypeFk], map: "expedition_itemPackingTypeFk")
  @@index([agencyModeFk], map: "index1")
  @@index([freightItemFk], map: "index2")
  @@index([created], map: "index3")
  @@index([ticketFk], map: "index4")
  @@index([workerFk], map: "workerFk")
}

model expeditionBoxVol {
  boxFk Int   @id
  m3    Float
  ratio Float
  item  item  @relation(fields: [boxFk], references: [id], map: "expeditionBoxVol_FK")
}

model expeditionMistake {
  expeditionFk          Int                   @id
  workerFk              Int                   @db.UnsignedInt
  typeFk                String                @db.VarChar(15)
  created               DateTime              @default(now()) @db.Timestamp(0)
  expedition            expedition            @relation(fields: [expeditionFk], references: [id], map: "expeditionMistake_FK")
  worker                worker                @relation(fields: [workerFk], references: [id], map: "expeditionMistake_FK_1")
  expeditionMistakeType expeditionMistakeType @relation(fields: [typeFk], references: [code], map: "expeditionMistake_FK_2")

  @@index([workerFk], map: "expeditionMistake_FK_1")
  @@index([typeFk], map: "expeditionMistake_FK_2")
}

model expeditionMistakeType {
  code              String              @id @db.VarChar(15)
  description       String              @db.VarChar(45)
  expeditionMistake expeditionMistake[]
}

model expeditionPallet {
  id              Int              @id @default(autoincrement())
  truckFk         Int
  built           DateTime         @default(now()) @db.DateTime(0)
  position        Int?
  isPrint         Int              @default(2) @db.TinyInt
  cmrPallet       cmrPallet[]
  expeditionTruck expeditionTruck  @relation(fields: [truckFk], references: [id], onDelete: Cascade, map: "expeditionPallet_fk1")
  expeditionScan  expeditionScan[]

  @@index([truckFk], map: "expeditionPallet_fk1_idx")
}

model expeditionScan {
  id               Int              @id @default(autoincrement())
  expeditionFk     Int              @unique(map: "expeditionFk_UNIQUE")
  scanned          DateTime         @default(now()) @db.DateTime(0)
  palletFk         Int
  workerFk         Int?             @db.UnsignedInt
  expedition       expedition       @relation(fields: [expeditionFk], references: [id], onDelete: Cascade, map: "expeditionScan_fk1")
  expeditionPallet expeditionPallet @relation(fields: [palletFk], references: [id], onDelete: Cascade, map: "expeditionScan_fk2")
  worker           worker?          @relation(fields: [workerFk], references: [id], map: "expeditionScan_fk3")

  @@index([expeditionFk], map: "expeditionScan_fk1_idx")
  @@index([palletFk], map: "expeditionScan_fk2_idx")
  @@index([workerFk], map: "expeditionScan_fk3_idx")
}

model expeditionState {
  id                  Int                 @id @default(autoincrement())
  created             DateTime            @default(now()) @db.Timestamp(0)
  expeditionFk        Int
  typeFk              Int
  userFk              Int?
  expedition          expedition          @relation(fields: [expeditionFk], references: [id], onDelete: Cascade, map: "expeditionState_FK")
  expeditionStateType expeditionStateType @relation(fields: [typeFk], references: [id], onDelete: Cascade, map: "expeditionState_FK_1")

  @@index([expeditionFk], map: "expeditionState_FK")
  @@index([typeFk], map: "expeditionState_FK_1")
}

model expeditionStateType {
  id              Int               @id @default(autoincrement())
  description     String            @db.VarChar(100)
  code            String            @db.VarChar(100)
  expedition      expedition[]
  expeditionState expeditionState[]
}

model expeditionTruck {
  id               Int                @id @default(autoincrement())
  ETD              DateTime?          @db.DateTime(0)
  description      String             @db.VarChar(45)
  bufferFk         Int?
  expeditionPallet expeditionPallet[]

  @@index([bufferFk], map: "expeditionTruck_FK")
  @@index([ETD], map: "expeditionTruck_idx1")
}

model expence {
  id                String              @id @db.VarChar(10)
  name              String?             @db.VarChar(50)
  isWithheld        Int                 @default(0) @db.TinyInt
  invoiceIn         invoiceIn[]
  invoiceInSage     invoiceInSage[]
  invoiceInTax      invoiceInTax[]
  invoiceOutExpence invoiceOutExpence[]
  item              item[]
  ticketServiceType ticketServiceType[]
}

model floramondoConfig {
  id                    Int        @id @default(autoincrement())
  nextLanded            DateTime?  @db.DateTime(0)
  warehouseInFk         Int?       @db.UnsignedSmallInt
  MaxLatestDeliveryHour Int?
  MaxLatestOrderHour    Int?       @default(12)
  LastUpdated           DateTime?  @db.DateTime(0)
  itemMaxSize           Int?
  warehouse             warehouse? @relation(fields: [warehouseInFk], references: [id], map: "floramondoConfigWarehouseInFk")

  @@index([warehouseInFk], map: "floramondoConfigWarehouseIn_idx")
}

model fuelType {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(45)
  code    String    @unique(map: "code_UNIQUE") @db.VarChar(45)
  vehicle vehicle[]
}

model gateArea {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "name_UNIQUE") @db.VarChar(45)
}

model genericAllocation {
  id         Int       @id @default(autoincrement())
  itemFk     Int
  typeFk     Int       @db.UnsignedSmallInt
  origin     String?   @db.VarChar(50)
  color      String?   @db.VarChar(50)
  quality    String?   @db.VarChar(10)
  numFlores  String?   @db.VarChar(10)
  category   String?   @db.VarChar(50)
  productor  String?   @db.VarChar(50)
  longName   String?   @db.VarChar(100)
  size       Int?
  startDated DateTime? @db.Date
  endDated   DateTime? @db.Date
  item       item      @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "genericAllocation_FK")

  @@index([itemFk], map: "genericAllocation_FK")
  @@index([typeFk], map: "genericAllocation_FK_1")
  @@index([category], map: "genericAllocation_category_IDX")
  @@index([color], map: "genericAllocation_color_IDX")
  @@index([longName], map: "genericAllocation_longName_IDX")
  @@index([numFlores], map: "genericAllocation_numFlores_IDX")
  @@index([origin], map: "genericAllocation_origin_IDX")
  @@index([productor], map: "genericAllocation_productor_IDX")
  @@index([quality], map: "genericAllocation_quality_IDX")
  @@index([size], map: "genericAllocation_size_IDX")
}

model genus {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "genus_PK2") @db.VarChar(100)
  itemBotanical     itemBotanical[]
  specieGeoInvasive specieGeoInvasive[]
}

model glsConfig {
  id         Int     @id @default(autoincrement())
  service    Int?
  schedule   Int?
  token      String? @db.VarChar(45)
  labelType  String? @db.VarChar(3)
  supplierFk Int?
  package    Int?
  refund     Int?
  weight     Int?
}

model greuge {
  Id           Int         @id @default(autoincrement()) @db.UnsignedInt
  clientFk     Int         @db.UnsignedInt
  description  String      @db.VarChar(45)
  amount       Decimal     @db.Decimal(10, 2)
  shipped      DateTime    @default(now()) @db.DateTime(0)
  created      DateTime    @default(now()) @db.Timestamp(0)
  greugeTypeFk Int?
  ticketFk     Int?
  userFk       Int?        @db.UnsignedInt
  ticket       ticket?     @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "Id_Ticket_Greuge_Ticket")
  greugeType   greugeType? @relation(fields: [greugeTypeFk], references: [id], map: "greuges_type_fk")

  @@index([clientFk], map: "Greuges_cliente_idx")
  @@index([ticketFk], map: "Id_Ticket_Greuge_Ticket_idx")
  @@index([userFk], map: "greuge_FK")
  @@index([shipped], map: "greuge_shipped_IDX")
  @@index([greugeTypeFk], map: "greuges_type_fk_idx")
}

model greugeConfig {
  id                 Int     @id @default(autoincrement())
  freightPickUpPrice Decimal @db.Decimal(10, 2)
  yearsToDelete      Int?
}

model greugeType {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(45)
  code   String   @db.VarChar(45)
  greuge greuge[]
}

model host {
  id              Int           @id @default(autoincrement())
  code            String        @unique(map: "host_UN") @db.VarChar(30)
  description     String?       @db.VarChar(50)
  workerFk        Int?          @db.UnsignedInt
  windowsSerial   String?       @db.VarChar(40)
  printerFk       Int?          @db.UnsignedTinyInt
  warehouseFk     Int?          @default(60) @db.UnsignedSmallInt
  companyFk       Int?          @default(442) @db.UnsignedSmallInt
  bankFk          Int?          @default(13)
  routeDaysBefore Int?          @default(2) @db.SmallInt
  routeDaysAfter  Int?          @default(1) @db.SmallInt
  updated         DateTime?     @default(now()) @db.Timestamp(0)
  printer         printer?      @relation(fields: [printerFk], references: [id], onDelete: Restrict, map: "configHost_FK")
  warehouse       warehouse?    @relation(fields: [warehouseFk], references: [id], onDelete: Restrict, map: "configHost_FK_2")
  company         company?      @relation(fields: [companyFk], references: [id], onDelete: Restrict, map: "configHost_FK_3")
  accounting      accounting?   @relation(fields: [bankFk], references: [id], onDelete: Restrict, map: "configHost_FK_4")
  worker          worker?       @relation(fields: [workerFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "configHost_FK_5")
  packingSite     packingSite[]

  @@index([printerFk], map: "configHost_FK")
  @@index([warehouseFk], map: "configHost_FK_2")
  @@index([companyFk], map: "configHost_FK_3")
  @@index([bankFk], map: "configHost_FK_4")
  @@index([workerFk], map: "configHost_FK_5")
}

model improvedGeneralLog {
  user   String  @default("") @db.Char(128)
  db     String  @default("") @db.Char(64)
  tables String  @default("") @db.Char(64)
  type   String?

  @@id([user, db, tables])
}

model improvedGeneralLogProcedures {
  user    String                            @default("") @db.Char(128)
  db      String                            @default("") @db.VarChar(250)
  routine String                            @default("") @db.Char(64)
  type    improvedGeneralLogProcedures_type

  @@id([user, db, routine, type])
}

model incoterms {
  code    String    @id @default("") @db.VarChar(3)
  name    String?   @db.VarChar(45)
  address address[]
}

model ink {
  id          String    @id @db.Char(3)
  name        String?   @db.VarChar(50)
  picture     Bytes     @db.Blob
  showOrder   Int
  ball        Bytes?    @db.Blob
  isCargex    Int       @default(0) @db.TinyInt
  dutchCode   String?   @unique(map: "dutchCode_UNIQUE") @db.VarChar(3)
  hex         String?   @db.VarChar(6)
  isRealColor Boolean   @default(true)
  inkI18n     inkI18n[]
  recipe      recipe[]
}

model inkI18n {
  inkFk String @db.Char(3)
  lang  String @db.Char(2)
  name  String @db.VarChar(255)
  ink   ink    @relation(fields: [inkFk], references: [id], map: "inkI18n_FK")

  @@id([inkFk, lang])
}

model intrastat {
  id                 Int                  @id
  description        String?              @db.VarChar(50)
  taxClassFk         Int                  @default(2) @db.UnsignedTinyInt
  taxCodeFk          Int                  @default(64) @db.UnsignedTinyInt
  duaIntrastat       duaIntrastat[]
  taxClass           taxClass             @relation(fields: [taxClassFk], references: [id], map: "intrastat_ibfk_1")
  invoiceInIntrastat invoiceInIntrastat[]
  item               item[]

  @@index([taxClassFk], map: "iva_group_id")
}

model inventoryFailure {
  id                                        Int                    @id @default(autoincrement())
  dated                                     DateTime               @db.Date
  itemFk                                    Int
  quantity                                  Int
  value                                     Decimal                @db.Decimal(10, 2)
  warehouseFk                               Int                    @db.UnsignedSmallInt
  throwerFk                                 Int?                   @db.UnsignedInt
  guiltyFk                                  Int?                   @db.UnsignedInt
  causeFk                                   Int?
  explanation                               String?                @db.VarChar(250)
  item                                      item                   @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "inventoryFailure_fk1")
  worker_inventoryFailure_throwerFkToworker worker?                @relation("inventoryFailure_throwerFkToworker", fields: [throwerFk], references: [id], onDelete: Cascade, map: "inventoryFailure_fk2")
  worker_inventoryFailure_guiltyFkToworker  worker?                @relation("inventoryFailure_guiltyFkToworker", fields: [guiltyFk], references: [id], onDelete: Cascade, map: "inventoryFailure_fk3")
  warehouse                                 warehouse              @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, map: "inventoryFailure_fk4")
  inventoryFailureCause                     inventoryFailureCause? @relation(fields: [causeFk], references: [id], onDelete: Restrict, map: "inventoryFailure_fk5")

  @@index([itemFk], map: "inventoryFailure_fk1_idx")
  @@index([throwerFk], map: "inventoryFailure_fk2_idx")
  @@index([warehouseFk], map: "inventoryFailure_fk4_idx")
  @@index([causeFk], map: "inventoryFailure_fk5_idx")
  @@index([guiltyFk], map: "inventoryFailure_fk_idx")
}

model inventoryFailureCause {
  id               Int                @id @default(autoincrement())
  description      String             @db.VarChar(100)
  inventoryFailure inventoryFailure[]
}

model invoiceCorrection {
  correctingFk                                          Int                    @id @db.UnsignedInt
  correctedFk                                           Int                    @db.UnsignedInt
  cplusRectificationTypeFk                              Int                    @db.UnsignedInt
  cplusInvoiceType477Fk                                 Int                    @db.UnsignedInt
  invoiceCorrectionTypeFk                               Int                    @default(3)
  invoiceOut_invoiceCorrection_correctedFkToinvoiceOut  invoiceOut             @relation("invoiceCorrection_correctedFkToinvoiceOut", fields: [correctedFk], references: [id], onDelete: Cascade, map: "corrected_fk")
  invoiceOut_invoiceCorrection_correctingFkToinvoiceOut invoiceOut             @relation("invoiceCorrection_correctingFkToinvoiceOut", fields: [correctingFk], references: [id], onDelete: Cascade, map: "correcting_fk")
  cplusInvoiceType477                                   cplusInvoiceType477    @relation(fields: [cplusInvoiceType477Fk], references: [id], map: "cplusInvoiceTyoeFk")
  invoiceCorrectionType                                 invoiceCorrectionType  @relation(fields: [invoiceCorrectionTypeFk], references: [id], map: "invoiceCorrectionType_Fk33")
  cplusRectificationType                                cplusRectificationType @relation(fields: [cplusRectificationTypeFk], references: [id], map: "invoiceCorrection_ibfk_1")

  @@index([correctedFk], map: "correctedFk_idx")
  @@index([cplusInvoiceType477Fk], map: "cplusInvoiceTyoeFk_idx")
  @@index([invoiceCorrectionTypeFk], map: "invoiceCorrectionTypeFk_idx")
  @@index([cplusRectificationTypeFk], map: "invoiceCorrection_ibfk_1_idx")
}

model invoiceCorrectionType {
  id                Int                 @id @default(autoincrement())
  description       String              @unique(map: "description_UNIQUE") @db.VarChar(100)
  invoiceCorrection invoiceCorrection[]
}

model invoiceIn {
  id                                      Int                     @id @default(autoincrement()) @db.UnsignedMediumInt
  serialNumber                            Int?                    @db.UnsignedMediumInt
  serial                                  String                  @default("R") @db.Char(1)
  supplierFk                              Int
  issued                                  DateTime?               @db.Date
  supplierRef                             String?                 @db.VarChar(50)
  isBooked                                Boolean                 @default(false)
  currencyFk                              Int                     @default(1) @db.UnsignedTinyInt
  created                                 DateTime                @default(now()) @db.Timestamp(0)
  companyFk                               Int                     @default(442) @db.UnsignedSmallInt
  docFk                                   Int?
  booked                                  DateTime?               @db.Date
  operated                                DateTime?               @db.Date
  cplusInvoiceType472Fk                   Int?                    @default(1) @db.UnsignedInt
  cplusRectificationTypeFk                Int?                    @default(1) @db.UnsignedInt
  cplusSubjectOpFk                        Int?                    @default(1) @db.UnsignedInt
  cplusTaxBreakFk                         Int?                    @default(1) @db.UnsignedInt
  cplusTrascendency472Fk                  Int?                    @default(1) @db.UnsignedInt
  bookEntried                             DateTime?               @db.Date
  isVatDeductible                         Boolean                 @default(true)
  withholdingSageFk                       Int?                    @db.SmallInt
  expenceFkDeductible                     String?                 @db.VarChar(10)
  awb_awb_invoiceInFkToinvoiceIn          awb[]                   @relation("awb_invoiceInFkToinvoiceIn")
  awb_awb_invoiceInPaletizedFkToinvoiceIn awb[]                   @relation("awb_invoiceInPaletizedFkToinvoiceIn")
  budgetInvoiceIn                         budgetInvoiceIn[]
  duaInvoiceIn                            duaInvoiceIn[]
  entry                                   entry[]
  expence                                 expence?                @relation(fields: [expenceFkDeductible], references: [id], onDelete: Restrict, map: "invoiceIn_expenceFkDeductible")
  supplier                                supplier                @relation(fields: [supplierFk], references: [id], map: "invoiceIn_ibfk_1")
  company                                 company                 @relation(fields: [companyFk], references: [id], map: "invoiceIn_ibfk_2")
  cplusSubjectOp                          cplusSubjectOp?         @relation(fields: [cplusSubjectOpFk], references: [id], onDelete: Restrict, map: "invoiceIn_ibfk_3")
  cplusTaxBreak                           cplusTaxBreak?          @relation(fields: [cplusTaxBreakFk], references: [id], onDelete: Restrict, map: "invoiceIn_ibfk_4")
  cplusInvoiceType472                     cplusInvoiceType472?    @relation(fields: [cplusInvoiceType472Fk], references: [id], onDelete: Restrict, map: "invoiceIn_ibfk_5")
  cplusRectificationType                  cplusRectificationType? @relation(fields: [cplusRectificationTypeFk], references: [id], onDelete: Restrict, map: "invoiceIn_ibfk_6")
  cplusTrascendency472                    cplusTrascendency472?   @relation(fields: [cplusTrascendency472Fk], references: [id], onDelete: Restrict, map: "invoiceIn_ibfk_7")
  invoiceInDueDay                         invoiceInDueDay[]
  invoiceInIntrastat                      invoiceInIntrastat[]
  invoiceInLog                            invoiceInLog[]
  invoiceInTax                            invoiceInTax[]
  ppeComponent                            ppeComponent[]
  route                                   route[]
  vehicleInvoiceIn                        vehicleInvoiceIn[]

  @@index([companyFk], map: "empresa_id")
  @@index([issued], map: "fecha")
  @@index([docFk], map: "gestdoc_id")
  @@index([expenceFkDeductible])
  @@index([withholdingSageFk], map: "invoiceIn_withholdingFk_idx")
  @@index([serialNumber], map: "num_recibida_2")
  @@index([supplierFk], map: "proveedor_id")
  @@index([cplusSubjectOpFk], map: "recibida_ibfk_3_idx")
  @@index([cplusTaxBreakFk], map: "recibida_ibfk_4_idx")
  @@index([cplusInvoiceType472Fk], map: "recibida_ibfk_5_idx")
  @@index([cplusRectificationTypeFk], map: "recibida_ibfk_6")
  @@index([cplusTrascendency472Fk], map: "recibida_ibfk_7")
  @@index([serial], map: "serie")
}

model invoiceInConfig {
  id                Int    @id @default(autoincrement())
  retentionRate     Int
  retentionName     String @db.VarChar(25)
  sageWithholdingFk Int    @db.SmallInt

  @@index([sageWithholdingFk], map: "invoiceInConfig_sageWithholdingFk")
}

model invoiceInDueDay {
  id           Int        @id @default(autoincrement())
  invoiceInFk  Int        @db.UnsignedMediumInt
  dueDated     DateTime   @db.Date
  bankFk       Int        @default(3117)
  amount       Decimal    @default(0.00) @db.Decimal(10, 2)
  foreignValue Decimal?   @db.Decimal(10, 2)
  created      DateTime   @default(now()) @db.Timestamp(0)
  accounting   accounting @relation(fields: [bankFk], references: [id], map: "invoiceInDueDay_ibfk_6")
  invoiceIn    invoiceIn  @relation(fields: [invoiceInFk], references: [id], onDelete: Cascade, map: "invoiceInDueDay_ibfk_7")

  @@index([bankFk], map: "banco_id")
  @@index([invoiceInFk], map: "recibida_id")
}

model invoiceInIntrastat {
  id               Int       @id @default(autoincrement()) @db.UnsignedMediumInt
  invoiceInFk      Int       @db.UnsignedMediumInt
  net              Decimal?  @db.Decimal(10, 2)
  intrastatFk      Int       @default(6049190)
  amount           Float
  stems            Int
  countryFk        Int?      @db.UnsignedMediumInt
  dated            DateTime  @default(now()) @db.Timestamp(0)
  statisticalValue Float     @default(0)
  invoiceIn        invoiceIn @relation(fields: [invoiceInFk], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "invoiceInIntrastat_FK")
  intrastat        intrastat @relation(fields: [intrastatFk], references: [id], map: "invoiceInIntrastat_ibfk_1")

  @@index([intrastatFk], map: "intrastat_id")
  @@index([invoiceInFk], map: "invoiceInIntrastat_FK")
}

model invoiceInLog {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  originFk          Int       @db.UnsignedMediumInt
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  invoiceIn         invoiceIn @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "invoiceInLog_ibfk_1")

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model invoiceInSage {
  id                    Int             @id @default(autoincrement())
  taxClassFk            String          @db.VarChar(1)
  invoiceInSerialFk     String          @db.VarChar(2)
  taxTypeSageFk         Int             @db.SmallInt
  transactionTypeSageFk Int             @db.TinyInt
  isService             Boolean         @default(false)
  expenceFk             String          @db.VarChar(10)
  withholdingSageFk     Int?            @db.SmallInt
  expence               expence         @relation(fields: [expenceFk], references: [id], map: "invoiceInSage_expenceFk")
  invoiceInSerial       invoiceInSerial @relation(fields: [invoiceInSerialFk], references: [code], map: "invoiceInSage_invoiceInSerialFk")
  taxClass              taxClass        @relation(fields: [taxClassFk], references: [code], map: "invoiceInSage_taxClassFk")

  @@unique([taxClassFk, invoiceInSerialFk, isService, withholdingSageFk], map: "invoiceInSafe_unique")
  @@index([expenceFk], map: "invoiceInSage_idx")
  @@index([invoiceInSerialFk], map: "invoiceInSage_invoiceInSerialFk")
  @@index([taxClassFk], map: "invoiceInSage_taxClassFk")
  @@index([taxTypeSageFk], map: "invoiceInSage_taxTypeSageFk")
  @@index([transactionTypeSageFk], map: "invoiceInSage_transactionTypeSageFk")
  @@index([withholdingSageFk], map: "invoiceInSage_withholdingSageFk")
}

model invoiceInSerial {
  code            String          @id @db.VarChar(2)
  description     String?         @db.VarChar(45)
  cplusTerIdNifFk Int             @default(1)
  taxAreaFk       String?         @db.VarChar(15)
  invoiceInSage   invoiceInSage[]
  taxArea         taxArea?        @relation(fields: [taxAreaFk], references: [code], onDelete: Restrict, map: "InvoiceInSerialTaxArea")
  cplusTerIdNif   cplusTerIdNif   @relation(fields: [cplusTerIdNifFk], references: [id], onUpdate: Restrict, map: "InvoiceInSerial_Fk1")

  @@index([taxAreaFk], map: "InvoiceInSerialTaxArea_idx")
  @@index([cplusTerIdNifFk], map: "InvoiceInSerial_Fk1_idx")
}

model invoiceInTax {
  id                    Int       @id @default(autoincrement()) @db.UnsignedInt
  invoiceInFk           Int       @db.UnsignedMediumInt
  taxCodeFk             Int?
  taxableBase           Decimal   @db.Decimal(10, 2)
  expenceFk             String    @db.VarChar(10)
  foreignValue          Decimal?  @db.Decimal(10, 2)
  taxTypeSageFk         Int?      @db.SmallInt
  transactionTypeSageFk Int?      @db.TinyInt
  created               DateTime  @default(now()) @db.Timestamp(0)
  expence               expence   @relation(fields: [expenceFk], references: [id], map: "invoiceInTax_expenceFk")
  invoiceIn             invoiceIn @relation(fields: [invoiceInFk], references: [id], onDelete: Cascade, map: "invoiceInTax_ibfk_5")

  @@index([expenceFk], map: "invoiceInTax_idx")
  @@index([transactionTypeSageFk])
  @@index([invoiceInFk], map: "recibida_id")
  @@index([taxCodeFk], map: "recibida_iva_ibfk_2")
  @@index([taxTypeSageFk], map: "recibida_iva_taxTypeSageFk")
}

model invoiceInTaxBookingAccount {
  id         Int      @id @default(autoincrement())
  effectived DateTime @default(now()) @db.Timestamp(0)
  account    String   @db.VarChar(10)
  taxAreaFk  String   @db.VarChar(15)
  priority   Int?     @db.UnsignedInt
  taxClassFk Int      @default(1) @db.UnsignedTinyInt
  countryFk  Int      @default(1) @db.UnsignedMediumInt
  rate       Decimal  @default(0.00) @db.Decimal(5, 2)
  taxArea    taxArea  @relation(fields: [taxAreaFk], references: [code], onDelete: Cascade, map: "invoiceInTaxBookingAccount_fk1")
  taxClass   taxClass @relation(fields: [taxClassFk], references: [id], map: "invoiceInTaxBookingAccount_fk2")
  country    country  @relation(fields: [countryFk], references: [id], map: "invoiceInTaxBookingAccount_fk3")

  @@index([taxAreaFk], map: "invoiceInTaxBookingAccount_fk1_idx")
  @@index([taxClassFk], map: "invoiceInTaxBookingAccount_fk2_idx")
  @@index([countryFk], map: "invoiceInTaxBookingAccount_fk3_idx")
}

model invoiceOut {
  id                                                           Int                 @unique@default(autoincrement()) @db.UnsignedInt
  ref                                                          String              @unique(map: "Id_Factura") @db.VarChar(20)
  serial                                                       String?             @db.VarChar(2)
  issued                                                       DateTime?           @db.Date
  amount                                                       Decimal?            @default(0.00) @db.Decimal(12, 2)
  dued                                                         DateTime?           @db.DateTime(0)
  bankFk                                                       Int?
  clientFk                                                     Int?                @default(0)
  created                                                      DateTime            @default(now()) @db.Timestamp(0)
  companyFk                                                    Int                 @default(442) @db.UnsignedSmallInt
  hasPdf                                                       Int                 @default(0) @db.UnsignedTinyInt
  booked                                                       DateTime?           @db.Date
  cplusInvoiceType477Fk                                        Int                 @default(1) @db.UnsignedInt
  cplusTaxBreakFk                                              Int                 @default(1) @db.UnsignedInt
  cplusSubjectOpFk                                             Int                 @default(1) @db.UnsignedInt
  cplusTrascendency477Fk                                       Int                 @default(1) @db.UnsignedInt
  invoiceCorrection_invoiceCorrection_correctedFkToinvoiceOut  invoiceCorrection[] @relation("invoiceCorrection_correctedFkToinvoiceOut")
  invoiceCorrection_invoiceCorrection_correctingFkToinvoiceOut invoiceCorrection?  @relation("invoiceCorrection_correctingFkToinvoiceOut")
  company                                                      company             @relation(fields: [companyFk], references: [id], map: "invoiceOut_ibfk_1")
  cplusInvoiceType477                                          cplusInvoiceType477 @relation(fields: [cplusInvoiceType477Fk], references: [id], map: "invoiceOut_ibfk_2")
  cplusSubjectOp                                               cplusSubjectOp      @relation(fields: [cplusSubjectOpFk], references: [id], map: "invoiceOut_ibfk_3")
  cplusTaxBreak                                                cplusTaxBreak       @relation(fields: [cplusTaxBreakFk], references: [id], map: "invoiceOut_ibfk_4")
  invoiceOutSerial                                             invoiceOutSerial?   @relation(fields: [serial], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "invoiceOut_serial")
  accounting                                                   accounting?         @relation(fields: [bankFk], references: [id], onDelete: Restrict, map: "invoice_bank_id")
  client                                                       client?             @relation(fields: [clientFk], references: [id], onDelete: Restrict, map: "invoice_customer_id")
  invoiceOutExpence                                            invoiceOutExpence[]
  invoiceOutTax                                                invoiceOutTax[]
  ticket                                                       ticket[]

  @@id([id, ref])
  @@index([cplusInvoiceType477Fk], map: "Facturas_ibfk_2_idx")
  @@index([cplusSubjectOpFk], map: "Facturas_ibfk_3_idx")
  @@index([cplusTaxBreakFk], map: "Facturas_ibfk_4_idx")
  @@index([cplusTrascendency477Fk], map: "Facturas_ibfk_5_idx")
  @@index([dued], map: "Facturas_idx_Vencimiento")
  @@index([issued], map: "Fecha")
  @@index([bankFk], map: "Id_Banco")
  @@index([clientFk], map: "Id_Cliente")
  @@index([companyFk], map: "empresa_id")
  @@index([serial], map: "invoiceOut_serial")
}

model invoiceOutExpence {
  id           Int        @id @default(autoincrement())
  invoiceOutFk Int        @db.UnsignedInt
  amount       Decimal    @default(0.00) @db.Decimal(10, 2)
  expenceFk    String     @db.VarChar(10)
  created      DateTime?  @default(now()) @db.Timestamp(0)
  invoiceOut   invoiceOut @relation(fields: [invoiceOutFk], references: [id], onDelete: Cascade, map: "invoiceOutExpence_FK_1")
  expence      expence    @relation(fields: [expenceFk], references: [id], map: "invoiceOutExpence_expenceFk")

  @@index([invoiceOutFk], map: "invoiceOutExpence_FK_1_idx")
  @@index([expenceFk])
}

model invoiceOutSerial {
  code                  String       @id @db.VarChar(2)
  description           String?      @db.VarChar(45)
  isTaxed               Boolean      @default(true)
  taxAreaFk             String       @default("NATIONAL") @db.VarChar(15)
  isCEE                 Boolean      @default(false)
  cplusInvoiceType477Fk Int?         @default(1) @db.UnsignedInt
  footNotes             String?      @db.LongText
  isRefEditable         Int          @default(0) @db.TinyInt
  invoiceOut            invoiceOut[]
  taxArea               taxArea      @relation(fields: [taxAreaFk], references: [code], map: "invoiceOutSeriaTaxArea")

  @@index([taxAreaFk], map: "taxAreaFk_idx")
}

model invoiceOutTax {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  invoiceOutFk Int        @db.UnsignedInt
  taxableBase  Decimal    @db.Decimal(10, 2)
  created      DateTime   @default(now()) @db.Timestamp(0)
  vat          Decimal    @default(0.00) @db.Decimal(10, 2)
  pgcFk        String     @default("0000000000") @db.VarChar(10)
  invoiceOut   invoiceOut @relation(fields: [invoiceOutFk], references: [id], onDelete: Cascade, map: "invoiceOutFk")
  pgc          pgc        @relation(fields: [pgcFk], references: [code], map: "invoiceOutTax_ibfk_1")

  @@unique([invoiceOutFk, pgcFk], map: "invoiceOutTax_Resctriccion")
  @@index([invoiceOutFk], map: "invoiceOutFk_idx")
  @@index([pgcFk], map: "pgcFk")
}

model invoiceOutTaxConfig {
  id                    Int       @id @default(autoincrement())
  taxClassCodeFk        String?   @db.VarChar(1)
  taxTypeSageFk         Int?      @db.SmallInt
  transactionTypeSageFk Int?      @db.TinyInt
  isService             Boolean?  @default(false)
  expenceFk             String?   @db.VarChar(10)
  taxClass              taxClass? @relation(fields: [taxClassCodeFk], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "invoiceOutTaxConfig_FK")

  @@index([taxClassCodeFk], map: "invoiceOutTaxConfig_FK")
  @@index([taxTypeSageFk], map: "invoiceOutTaxConfig_FK_1")
  @@index([transactionTypeSageFk], map: "invoiceOutTaxConfig_FK_2")
}

model item {
  id                                          Int                            @id @default(autoincrement())
  equivalent                                  Int?                           @db.UnsignedInt
  name                                        String?                        @db.VarChar(50)
  size                                        Int?                           @db.UnsignedInt
  stems                                       Int?                           @default(1)
  minPrice                                    Float?                         @default(0)
  isToPrint                                   Boolean                        @default(false)
  family                                      String                         @default("VT") @db.VarChar(3)
  box                                         Boolean                        @default(false)
  category                                    String?                        @db.VarChar(3)
  originFk                                    Int                            @db.UnsignedTinyInt
  doPhoto                                     Int                            @default(0) @db.TinyInt
  image                                       String?                        @db.VarChar(255)
  inkFk                                       String?                        @db.VarChar(3)
  intrastatFk                                 Int                            @default(6039010)
  hasMinPrice                                 Boolean                        @default(false)
  created                                     DateTime                       @default(now()) @db.Timestamp(0)
  comment                                     String?                        @db.VarChar(150)
  typeFk                                      Int                            @db.UnsignedSmallInt
  generic                                     Boolean                        @default(false)
  producerFk                                  Int?                           @db.UnsignedMediumInt
  description                                 String?                        @db.VarChar(1000)
  density                                     Int                            @default(167)
  relevancy                                   Boolean                        @default(false)
  expenceFk                                   String                         @default("7001000000") @db.VarChar(10)
  isActive                                    Boolean                        @default(true)
  longName                                    String?                        @db.VarChar(50)
  subName                                     String?                        @db.VarChar(50)
  tag5                                        String?                        @db.VarChar(20)
  value5                                      String?                        @db.VarChar(50)
  tag6                                        String?                        @db.VarChar(20)
  value6                                      String?                        @db.VarChar(50)
  tag7                                        String?                        @db.VarChar(20)
  value7                                      String?                        @db.VarChar(50)
  tag8                                        String?                        @db.VarChar(20)
  value8                                      String?                        @db.VarChar(50)
  tag9                                        String?                        @db.VarChar(20)
  value9                                      String?                        @db.VarChar(50)
  tag10                                       String?                        @db.VarChar(20)
  value10                                     String?                        @db.VarChar(50)
  minimum                                     Decimal                        @default(3) @db.Decimal(10, 0)
  upToDown                                    Decimal                        @default(0) @db.Decimal(10, 0)
  supplyResponseFk                            Int?                           @unique(map: "item_supplyResponseFk_idx")
  hasKgPrice                                  Boolean                        @default(false)
  isFloramondo                                Boolean                        @default(false)
  isFragile                                   Boolean                        @default(false)
  numberOfItemsPerCask                        Int?
  embalageCode                                Int?
  quality                                     String?                        @db.VarChar(255)
  stars                                       Int?
  stemMultiplier                              Float                          @default(1)
  itemPackingTypeFk                           String?                        @db.VarChar(1)
  packingOut                                  Decimal?                       @db.Decimal(10, 2)
  genericFk                                   Int?
  packingShelve                               Int?
  isLaid                                      Boolean                        @default(false)
  lastUsed                                    DateTime?                      @default(now()) @db.DateTime(0)
  weightByPiece                               Int?                           @db.UnsignedInt
  buy_buy_itemOriginalFkToitem                buy[]                          @relation("buy_itemOriginalFkToitem")
  buy_buy_itemFkToitem                        buy[]                          @relation("buy_itemFkToitem")
  expeditionBoxVol                            expeditionBoxVol?
  genericAllocation                           genericAllocation[]
  inventoryFailure                            inventoryFailure[]
  item                                        item?                          @relation("itemToitem", fields: [genericFk], references: [id], map: "item_FK")
  other_item                                  item[]                         @relation("itemToitem")
  expence                                     expence                        @relation(fields: [expenceFk], references: [id], map: "item_expenceFk")
  itemFamily                                  itemFamily                     @relation(fields: [family], references: [code], map: "item_family")
  origin                                      origin                         @relation(fields: [originFk], references: [id], map: "item_ibfk_1")
  intrastat                                   intrastat                      @relation(fields: [intrastatFk], references: [id], map: "item_ibfk_2")
  itemType                                    itemType                       @relation(fields: [typeFk], references: [id], map: "item_ibfk_5")
  producer                                    producer?                      @relation(fields: [producerFk], references: [id], onDelete: Restrict, map: "producer_id")
  itemBarcode                                 itemBarcode[]
  itemBotanical                               itemBotanical?
  itemCost                                    itemCost[]
  itemImageQueue                              itemImageQueue?
  itemLog                                     itemLog[]
  itemMatchProperties                         itemMatchProperties[]
  itemPlacementSupply                         itemPlacementSupply[]
  itemProposal_itemProposal_itemFkToitem      itemProposal[]                 @relation("itemProposal_itemFkToitem")
  itemProposal_itemProposal_mateFkToitem      itemProposal[]                 @relation("itemProposal_mateFkToitem")
  itemShelving                                itemShelving[]
  itemTag                                     itemTag[]
  itemTaxCountry                              itemTaxCountry[]
  packaging_packaging_itemFkToitem            packaging[]                    @relation("packaging_itemFkToitem")
  packaging_packaging_freightItemFkToitem     packaging[]                    @relation("packaging_freightItemFkToitem")
  priceFixed                                  priceFixed[]
  recipe_log_recipe_log_recipe_ItemFkToitem   recipe_log[]                   @relation("recipe_log_recipe_ItemFkToitem")
  recipe_log_recipe_log_selected_ItemFkToitem recipe_log[]                   @relation("recipe_log_selected_ItemFkToitem")
  sale                                        sale[]
  specialPrice                                specialPrice[]
  ticketPackagingStartingStock                ticketPackagingStartingStock[]

  @@index([name, subName, value5, value6, value7, value8, value9, value10], map: "Article")
  @@index([isActive], map: "ArticlesIsActive_idx")
  @@index([intrastatFk], map: "Codintrastat")
  @@index([inkFk], map: "Color")
  @@index([originFk], map: "id_origen")
  @@index([genericFk], map: "item_FK")
  @@index([expenceFk])
  @@index([family], map: "item_family")
  @@index([embalageCode], map: "item_id10")
  @@index([numberOfItemsPerCask], map: "item_id11")
  @@index([quality], map: "item_id12")
  @@index([lastUsed], map: "item_lastUsed_IDX")
  @@index([size], map: "item_size_IDX")
  @@index([longName], map: "item_size_IDX2")
  @@index([producerFk], map: "producer_id")
  @@index([typeFk], map: "tipo_id")
}

model itemBarcode {
  id     Int    @id @default(autoincrement()) @db.UnsignedInt
  itemFk Int
  code   String @unique(map: "code") @db.VarChar(22)
  item   item   @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemBarcode_ibfk_1")

  @@unique([itemFk, code], map: "Id_Article_2")
  @@index([itemFk], map: "Id_Article")
}

model itemBotanical {
  itemFk   Int     @id
  genusFk  Int
  specieFk Int?
  item     item    @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemBotanicalItemFkFk")
  specie   specie? @relation(fields: [specieFk], references: [id], map: "itemBotanical_FK")
  genus    genus   @relation(fields: [genusFk], references: [id], onDelete: Cascade, map: "itemBotanical_FK_1")

  @@index([genusFk], map: "genusFgn_idx")
  @@index([specieFk], map: "specieFgn_idx")
}

model itemCategory {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  name               String               @unique(map: "reino_UNIQUE") @db.VarChar(45)
  order              Int?                 @db.UnsignedInt
  display            Int                  @default(1) @db.TinyInt
  color              String?              @db.Char(6)
  shortLife          Int                  @default(0)
  merchandise        Boolean              @default(true)
  icon               String?              @db.VarChar(45)
  code               String?              @db.VarChar(45)
  isReclining        Int                  @default(1) @db.TinyInt
  departmentFk       Int?
  clientItemCategory clientItemCategory[]
  department         department?          @relation(fields: [departmentFk], references: [id], onDelete: Cascade, map: "itemCategory_FK")
  itemType           itemType[]

  @@index([display], map: "itemCategoryDisplayIdx")
  @@index([departmentFk], map: "itemCategory_FK")
  @@index([merchandise], map: "itemCategory_idx3")
}

model itemCategoryI18n {
  categoryFk Int    @db.UnsignedInt
  lang       String @db.Char(2)
  name       String @db.VarChar(255)

  @@id([categoryFk, lang])
}

model itemCleanConfig {
  id       Int      @id
  quantity Int
  isStop   Boolean?
}

model itemCleanLog {
  id          Int       @id @default(autoincrement())
  itemFrom    Int?
  itemDeleted Int?
  created     DateTime? @default(now()) @db.Timestamp(0)
}

model itemConfig {
  id                       Int     @id
  isItemTagTriggerDisabled Boolean @default(true)
  monthToDeactivate        Int     @default(24)
  wasteRecipients          String  @db.VarChar(50)
}

model itemCost {
  itemFk      Int
  warehouseFk Int       @db.UnsignedSmallInt
  quantity    Int       @default(0)
  rotation    Decimal   @default(0.0000) @db.Decimal(10, 4)
  cm3         Int       @default(0)
  storage     Decimal   @default(0.0000) @db.Decimal(10, 4)
  handling    Decimal   @default(0.0000) @db.Decimal(10, 4)
  extraCharge Decimal   @default(0.0000) @db.Decimal(10, 4)
  wasted      Decimal   @default(0.0000) @db.Decimal(10, 4)
  cm3delivery Int       @default(0)
  grams       Int       @default(0)
  item        item      @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "id_article_rotaci")
  warehouse   warehouse @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, map: "warehouse_id_rotaci")

  @@id([itemFk, warehouseFk])
  @@index([warehouseFk], map: "warehouse_id_rotacion_idx")
}

model itemFamily {
  code        String @id @db.VarChar(3)
  description String @db.VarChar(45)
  item        item[]
}

model itemImageQueue {
  itemFk   Int       @id
  url      String?   @db.VarChar(255)
  error    String?   @db.Text
  attempts Int?      @default(0)
  created  DateTime? @default(now()) @db.Timestamp(0)
  updated  DateTime? @default(now()) @db.Timestamp(0)
  priority Int?      @default(99)
  item     item      @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemImageQueueItemIdx")
}

model itemLabel {
  id       Int      @id @default(autoincrement())
  itemFk   Int?
  itemName String?  @db.VarChar(20)
  price    Decimal? @db.Decimal(10, 2)
  labels   Int?
}

model itemLog {
  id                Int       @id @default(autoincrement())
  originFk          Int
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  item              item      @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "itemLogItemFk")

  @@index([originFk], map: "itemLogItemFk_idx")
  @@index([userFk], map: "itemLogUserFk_idx")
}

model itemMatchProperties {
  itemFk   Int
  name     String @db.VarChar(80)
  producer String @db.VarChar(80)
  size     Int
  item     item   @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemFk___fk")

  @@id([itemFk, name, producer, size])
}

model itemPackingType {
  code                String                @id @db.VarChar(1)
  description         String                @db.VarChar(100)
  collectionVolumetry collectionVolumetry[]
  expedition          expedition[]
  operator            operator[]
}

model itemPlacementSupply {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  itemFk                      Int
  quantity                    Decimal                       @default(0) @db.Decimal(10, 0)
  priority                    Int                           @default(0) @db.UnsignedInt
  created                     DateTime                      @default(now()) @db.Timestamp(0)
  userFk                      Int                           @db.UnsignedInt
  repoUserFk                  Int?                          @db.UnsignedInt
  sectorFk                    Int?
  item                        item                          @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemPlacementSupply_fk1")
  sector                      sector?                       @relation(fields: [sectorFk], references: [id], onDelete: Cascade, map: "itemPlacementSupply_fk4")
  itemShelvingPlacementSupply itemShelvingPlacementSupply[]

  @@index([itemFk], map: "itemPlacementSupply_fk1_idx")
  @@index([userFk], map: "itemPlacementSupply_fk2_idx")
  @@index([repoUserFk], map: "itemPlacementSupply_fk2_idx1")
  @@index([sectorFk], map: "itemPlacementSupply_fk4_idx")
}

model itemProposal {
  itemFk                         Int
  mateFk                         Int
  counter                        Int  @default(0)
  item_itemProposal_itemFkToitem item @relation("itemProposal_itemFkToitem", fields: [itemFk], references: [id], onDelete: Cascade, map: "itemProposal_fk1")
  item_itemProposal_mateFkToitem item @relation("itemProposal_mateFkToitem", fields: [mateFk], references: [id], onDelete: Cascade, map: "itemProposal_fk2")

  @@id([itemFk, mateFk])
  @@index([mateFk], map: "itemProposal_fk2_idx")
}

model itemShelving {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  itemFk                      Int
  shelvingFk                  String                        @db.VarChar(10)
  visible                     Int                           @default(0)
  created                     DateTime                      @default(now()) @db.Timestamp(0)
  grouping                    Int?                          @db.UnsignedSmallInt
  packing                     Int?                          @db.UnsignedInt
  packagingFk                 String?                       @db.VarChar(10)
  userFk                      Int?                          @db.UnsignedInt
  item                        item                          @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemShelving_fk1")
  shelving                    shelving                      @relation(fields: [shelvingFk], references: [code], onDelete: Cascade, map: "itemShelving_fk2")
  packaging                   packaging?                    @relation(fields: [packagingFk], references: [id], onDelete: Restrict, map: "itemShelving_fk3")
  itemShelvingPlacementSupply itemShelvingPlacementSupply[]
  itemShelvingSale            itemShelvingSale[]

  @@index([itemFk], map: "itemShelving_fk1_idx")
  @@index([shelvingFk], map: "itemShelving_fk2_idx")
  @@index([packagingFk], map: "itemShelving_fk3_idx")
  @@index([userFk], map: "itemShelving_fk3_idx1")
}

model itemShelvingLog {
  id             Int      @id @default(autoincrement())
  itemShelvingFk Int?     @db.UnsignedInt
  workerFk       Int?
  created        DateTime @default(now()) @db.Timestamp(0)
  accion         String?  @db.VarChar(20)
  itemFk         Int?
  shelvingFk     String?  @db.VarChar(10)
  quantity       Int?
  visible        Int?
  available      Int?
  grouping       Int?
  packing        Int?
  stars          Int?

  @@index([itemShelvingFk], map: "itemShelving_Log_FK")
}

model itemShelvingPlacementSupply {
  id                    Int                 @id @default(autoincrement()) @db.UnsignedInt
  itemShelvingFk        Int                 @db.UnsignedInt
  itemPlacementSupplyFk Int                 @db.UnsignedInt
  quantity              Decimal             @default(0) @db.Decimal(10, 0)
  created               DateTime            @default(now()) @db.Timestamp(0)
  userFk                Int                 @db.UnsignedInt
  isPicked              Int                 @default(0) @db.TinyInt
  itemShelving          itemShelving        @relation(fields: [itemShelvingFk], references: [id], onDelete: Cascade, map: "itemShelvingPlacementSupply_fk1")
  itemPlacementSupply   itemPlacementSupply @relation(fields: [itemPlacementSupplyFk], references: [id], onDelete: Cascade, map: "itemShelvingPlacementSupply_fk2")

  @@index([itemShelvingFk], map: "itemShelvingPlacementSupply_fk1_idx")
  @@index([itemPlacementSupplyFk], map: "itemShelvingPlacementSupply_fk2_idx")
  @@index([userFk], map: "itemShelvingPlacementSupply_fk3_idx")
}

model itemShelvingSale {
  id             Int          @id @default(autoincrement())
  itemShelvingFk Int          @db.UnsignedInt
  saleFk         Int
  quantity       Decimal      @default(0) @db.Decimal(10, 0)
  created        DateTime     @default(now()) @db.Timestamp(0)
  userFk         Int          @db.UnsignedInt
  itemShelving   itemShelving @relation(fields: [itemShelvingFk], references: [id], onDelete: Cascade, map: "itemShelvingSale_fk1")
  sale           sale         @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "itemShelvingSale_fk2")

  @@index([itemShelvingFk], map: "itemShelvingSale_fk1_idx")
  @@index([saleFk], map: "itemShelvingSale_fk2_idx")
  @@index([userFk], map: "itemShelvingSale_fk3_idx")
}

model itemTag {
  id       Int    @id @default(autoincrement())
  itemFk   Int
  tagFk    Int
  value    String @db.VarChar(50)
  intValue Int?
  priority Int    @default(0)
  item     item   @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemTagItemFk")
  tag      tag    @relation(fields: [tagFk], references: [id], map: "itemTagTagFk")

  @@unique([itemFk, priority], map: "itemTagItemPriority")
  @@unique([itemFk, tagFk], map: "itemTagItemUq")
  @@index([itemFk, tagFk, intValue], map: "itemFk_2")
  @@index([priority, itemFk], map: "priorityItem")
  @@index([tagFk, value], map: "tagFk")
  @@index([value], map: "value")
}

model itemTaxCountry {
  id         Int      @id @default(autoincrement())
  itemFk     Int?
  countryFk  Int?     @db.UnsignedMediumInt
  taxClassFk Int      @default(1) @db.UnsignedTinyInt
  effectived DateTime @default(now()) @db.Timestamp(0)
  country    country? @relation(fields: [countryFk], references: [id], onDelete: Restrict, map: "countryFK_paises")
  item       item?    @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "itemFK_Article")
  taxClass   taxClass @relation(fields: [taxClassFk], references: [id], map: "taxClassFK_Iva_Group")

  @@unique([itemFk, countryFk], map: "itemFk_UNIQUE")
  @@index([countryFk], map: "countryFK_paises_idx")
  @@index([taxClassFk], map: "taxClassFK_idx")
}

model itemType {
  id                   Int                   @unique(map: "tipo_id_UNIQUE") @default(autoincrement()) @db.UnsignedSmallInt
  code                 String                @id @db.VarChar(3)
  name                 String                @db.VarChar(30)
  gramsMax             Int?
  order                Int?                  @default(0)
  categoryFk           Int                   @db.UnsignedInt
  workerFk             Int                   @db.UnsignedInt
  isInventory          Int                   @default(1) @db.TinyInt
  created              DateTime?             @default(now()) @db.Timestamp(0)
  transaction          Int                   @default(0) @db.TinyInt
  making               Int?                  @db.UnsignedInt
  location             String?               @db.VarChar(10)
  life                 Int?                  @db.UnsignedSmallInt
  maneuver             Float                 @default(0.21)
  target               Float                 @default(0.15)
  topMargin            Float                 @default(0.3)
  profit               Float                 @default(0.02)
  density              Float                 @default(167)
  promo                Float                 @default(0)
  isPackaging          Boolean               @default(false)
  hasComponents        Boolean               @default(true)
  warehouseFk          Int                   @default(60) @db.UnsignedSmallInt
  compression          Decimal?              @default(1.00) @db.Decimal(5, 2)
  itemPackingTypeFk    String?               @db.VarChar(1)
  temperatureFk        String?               @db.VarChar(10)
  isUnconventionalSize Boolean               @default(false)
  isLaid               Boolean               @default(false)
  maxRefs              Int?                  @db.UnsignedInt
  isMergeable          Boolean               @default(true)
  clientItemType       clientItemType[]
  item                 item[]
  confectionType       confectionType?       @relation(fields: [making], references: [id], map: "Tipos_fk3")
  worker               worker                @relation(fields: [workerFk], references: [id], map: "Trabajador")
  itemCategory         itemCategory          @relation(fields: [categoryFk], references: [id], map: "itemType_ibfk_1")
  temperature          temperature?          @relation(fields: [temperatureFk], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "temperatureFk")
  warehouse            warehouse             @relation(fields: [warehouseFk], references: [id], map: "warehouseFk5")
  itemTypeRestriction  itemTypeRestriction[]
  itemTypeTag          itemTypeTag[]
  zoneFilter           zoneFilter[]

  @@unique([name, categoryFk], map: "Tipo_UNIQUE")
  @@index([making], map: "Tipos_fk3_idx")
  @@index([workerFk], map: "Trabajador")
  @@index([categoryFk], map: "reino_id")
  @@index([temperatureFk], map: "temperatureFk")
  @@index([warehouseFk], map: "warehouseFk5_idx")
}

model itemTypeI18n {
  typeFk Int    @db.UnsignedSmallInt
  lang   String @db.Char(2)
  name   String @db.VarChar(255)

  @@id([typeFk, lang])
}

model itemTypeRestriction {
  id         Int      @id @default(autoincrement())
  itemTypeFk Int      @db.UnsignedSmallInt
  dated      DateTime @db.Date
  minAmount  Decimal  @db.Decimal(10, 2)
  itemType   itemType @relation(fields: [itemTypeFk], references: [id], map: "itemTypeRestriction_itemType_id_fk")

  @@unique([itemTypeFk, dated], map: "itemTypeRestriction_UN")
  @@index([dated, itemTypeFk], map: "itemTypeRestriction_dated_IDX")
}

model itemTypeTag {
  id         Int      @id @default(autoincrement())
  itemTypeFk Int      @db.UnsignedSmallInt
  tagFk      Int
  priority   Int      @default(0) @db.UnsignedInt
  tag        tag      @relation(fields: [tagFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "itemTypeTagTag")
  itemType   itemType @relation(fields: [itemTypeFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "itemTypeTagTipos")

  @@unique([itemTypeFk, tagFk], map: "itemTypeFk_UNIQUE")
  @@index([tagFk], map: "itemTypeTagTag_idx")
  @@index([itemTypeFk], map: "itemTypeTagTipo_idx")
}

model labourTree {
  id    Int      @id @default(0)
  name  String   @db.VarChar(45)
  lft   Int
  rgt   Int
  depth BigInt   @default(0)
  sons  Decimal? @db.Decimal(10, 0)
}

model ledgerConfig {
  lastBookEntry Int     @id
  maxTolerance  Decimal @db.Decimal(10, 2)
}

model lungSize {
  hora DateTime @db.Time(0)
  size Decimal  @db.Decimal(5, 0)
  dia  DateTime @db.Date

  @@id([hora, size, dia])
}

model machine {
  id             Int             @id @default(autoincrement())
  plate          String?         @unique(map: "plate") @db.VarChar(20)
  serialNumber   String?         @unique(map: "serialNumber") @db.VarChar(30)
  maker          String?         @db.VarChar(50)
  model          String?         @db.VarChar(20)
  purchased      DateTime?       @db.Date
  warehouseFk    Int?
  departmentFk   Int?
  type           String?         @db.VarChar(100)
  use            String?         @db.VarChar(100)
  productionYear Int?
  photo          Bytes?          @db.Blob
  workerFk       Int?            @db.UnsignedInt
  companyFk      Int             @default(442) @db.UnsignedSmallInt
  ppeFk          Int?
  supplierFk     Int?
  ppe            ppe?            @relation(fields: [ppeFk], references: [id], map: "machine_FK")
  worker         worker?         @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "machine_FK_1")
  supplier       supplier?       @relation(fields: [supplierFk], references: [id], map: "machine_FK_2")
  machineDetail  machineDetail[]
  machineDms     machineDms[]
  machineWorker  machineWorker[]

  @@index([ppeFk], map: "machine_FK")
  @@index([workerFk], map: "machine_FK_1")
  @@index([supplierFk], map: "machine_FK_2")
}

model machineDetail {
  id        Int      @id @default(autoincrement())
  machineFk Int
  dated     DateTime @db.Date
  action    String   @db.VarChar(100)
  value     Decimal? @db.Decimal(10, 2)
  workerFk  Int      @db.UnsignedInt
  dmsFk     Int?
  machine   machine  @relation(fields: [machineFk], references: [id], onDelete: Cascade, map: "machineDetail_FK")
  worker    worker   @relation(fields: [workerFk], references: [id], map: "machineDetail_FK_1")
  dms       dms?     @relation(fields: [dmsFk], references: [id], map: "machineDetail_FK_2")

  @@index([machineFk], map: "machineDetail_FK")
  @@index([workerFk], map: "machineDetail_FK_1")
  @@index([dmsFk], map: "machineDetail_FK_2")
}

model machineDms {
  id        Int     @id @default(autoincrement())
  machineFk Int
  dmsFk     Int
  dms       dms     @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "machineDms_FK")
  machine   machine @relation(fields: [machineFk], references: [id], onDelete: Cascade, map: "machineDms_FK_1")

  @@unique([machineFk, dmsFk], map: "machineDms_UN")
  @@index([dmsFk], map: "machineDms_FK")
}

model machineWorker {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  workerFk  Int       @db.UnsignedInt
  machineFk Int
  inTimed   DateTime  @default(now()) @db.DateTime(0)
  outTimed  DateTime? @db.DateTime(0)
  worker    worker    @relation(fields: [workerFk], references: [id], map: "machineWorker_FK")
  machine   machine   @relation(fields: [machineFk], references: [id], map: "machineWorker_FK_1")

  @@index([workerFk], map: "machineWorker_FK")
  @@index([machineFk], map: "machineWorker_FK_1")
}

model machineWorkerConfig {
  id       Int @id @default(autoincrement()) @db.UnsignedInt
  maxHours Int @db.UnsignedSmallInt
}

model mail {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  receiver      String?  @db.VarChar(255)
  sender        String?  @db.VarChar(255)
  replyTo       String?  @db.VarChar(50)
  subject       String   @db.VarChar(100)
  body          String   @db.Text
  sent          Int      @default(0) @db.TinyInt
  creationDate  DateTime @default(now()) @db.Timestamp(0)
  attachment    String?  @db.VarChar(100)
  status        String   @default("OK") @db.VarChar(255)
  senderFk      Int?     @db.UnsignedInt
  recipientFk   Int?     @db.UnsignedInt
  plainTextBody String?  @db.Text

  @@index([creationDate], map: "creation_idx")
  @@index([senderFk], map: "mail_FK")
  @@index([recipientFk], map: "mail_FK_1")
  @@index([sent], map: "sent_idx")
}

model mailTemplates {
  id             Int    @id @default(autoincrement())
  name           String @db.VarChar(50)
  attachmentPath String @db.Text
}

model mandate {
  id            Int         @id @default(autoincrement())
  clientFk      Int
  companyFk     Int         @db.UnsignedSmallInt
  code          String?     @db.VarChar(32)
  created       DateTime?   @default(now()) @db.Timestamp(0)
  finished      DateTime?   @db.Timestamp(0)
  mandateTypeFk Int         @db.SmallInt
  client        client      @relation(fields: [clientFk], references: [id], onDelete: NoAction, map: "mandato_fgkey1")
  company       company     @relation(fields: [companyFk], references: [id], onDelete: NoAction, map: "mandato_fgkey2")
  mandateType   mandateType @relation(fields: [mandateTypeFk], references: [id], onDelete: NoAction, map: "mandato_fgkey3")

  @@index([clientFk], map: "mandato_fgkey1_idx")
  @@index([companyFk], map: "mandato_fgkey2_idx")
  @@index([mandateTypeFk], map: "mandato_fgkey3_idx")
}

model mandateType {
  id      Int       @id @default(autoincrement()) @db.SmallInt
  name    String    @db.VarChar(45)
  mandate mandate[]
}

model manuscript {
  id          Int     @id @default(autoincrement())
  code        String  @unique(map: "code_UNIQUE") @db.VarChar(45)
  description String? @db.Text
  enabled     Boolean @default(true)
}

model mdbApp {
  app              String    @db.VarChar(100)
  baselineBranchFk String    @db.VarChar(255)
  userFk           Int?      @db.UnsignedInt
  locked           DateTime? @db.DateTime(0)
  mdbBranch        mdbBranch @relation(fields: [baselineBranchFk], references: [name], map: "mdbApp_FK_1")

  @@id([app, baselineBranchFk])
  @@index([userFk], map: "mdbApp_FK")
  @@index([baselineBranchFk], map: "mdbApp_FK_1")
}

model mdbBranch {
  name       String       @id @default("") @db.VarChar(255)
  mdbApp     mdbApp[]
  mdbVersion mdbVersion[]
}

model mdbVersion {
  app       String    @db.VarChar(255)
  branchFk  String    @db.VarChar(255)
  version   Int?
  mdbBranch mdbBranch @relation(fields: [branchFk], references: [name], onDelete: Cascade, map: "mdbVersion_branchFk")

  @@id([app, branchFk])
  @@index([branchFk], map: "mdbVersion_branchFk")
}

model medicalCenter {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(45)
  medicalReview medicalReview[]
}

model medicalReview {
  id            Int           @id @default(autoincrement())
  workerFk      Int           @db.UnsignedInt
  centerFk      Int
  date          DateTime?     @db.Date
  time          String?       @db.VarChar(5)
  isFit         Boolean?
  amount        Float?
  invoice       String?       @db.VarChar(10)
  remark        String?       @db.LongText
  medicalCenter medicalCenter @relation(fields: [centerFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "frgcenter")
  worker        worker        @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "frgnkWorker")

  @@index([centerFk], map: "frgcenter_idx")
  @@index([workerFk], map: "frgnkWorker_idx")
}

model message {
  id        Int       @id @default(autoincrement())
  uuid      String    @db.VarChar(50)
  sender    String    @db.VarChar(50)
  recipient String    @db.VarChar(50)
  message   String?   @db.LongText
  sendDate  DateTime? @default(now()) @db.Timestamp(0)

  @@index([recipient], map: "recipient")
  @@index([sender], map: "sender")
  @@index([uuid(length: 8)], map: "uuid")
}

model messageInbox {
  id             Int       @id @default(autoincrement())
  uuid           String    @db.VarChar(50)
  sender         String    @db.VarChar(50)
  recipient      String    @db.VarChar(45)
  finalRecipient String    @db.VarChar(50)
  message        String?   @db.LongText
  sendDate       DateTime? @default(now()) @db.Timestamp(0)
  read           String    @default("0") @db.VarChar(45)

  @@index([finalRecipient], map: "finalRecipient")
  @@index([uuid(length: 8)], map: "uuid")
}

model mistakeType {
  id          Int           @id @default(autoincrement())
  description String        @db.VarChar(45)
  saleMistake saleMistake[]
}

model mobileAppVersionControl {
  id                    Int      @id @default(autoincrement())
  appName               String?  @db.VarChar(45)
  version               String   @default("0") @db.VarChar(45)
  isVersionCritical     Boolean? @default(false)
  urlProduction         String?  @db.VarChar(100)
  urlBeta               String?  @db.VarChar(100)
  versionBeta           String?  @db.VarChar(45)
  isVersionBetaCritical Boolean? @default(false)
}

model mrw {
  id       Int       @id @default(autoincrement())
  ticketFk Int
  counter  Int?      @db.UnsignedSmallInt
  shipped  DateTime? @db.Date
  price    Decimal?  @db.Decimal(10, 2)
}

model mrwService {
  agencyModeCodeFk String     @id @db.VarChar(45)
  clientType       Int        @db.UnsignedInt
  serviceType      Int?       @db.UnsignedInt
  agencyMode       agencyMode @relation(fields: [agencyModeCodeFk], references: [code], onDelete: Cascade, map: "mrwService_agencyModeCodeFk")
}

model mrwServiceWeekday {
  agencyModeCodeFk String     @id @db.VarChar(45)
  weekdays         String
  serviceType      Int        @db.UnsignedInt
  params           String?    @db.VarChar(255)
  agencyMode       agencyMode @relation(fields: [agencyModeCodeFk], references: [code], onDelete: Cascade, map: "mrwServiceWeekday_agencyModeCodeFk")
}

model noticeCategory {
  id                 Int                  @id @default(autoincrement())
  keyName            String?              @unique(map: "keyName_UNIQUE") @db.VarChar(50)
  name               String               @db.VarChar(50)
  subject            String?              @db.VarChar(50)
  description        String?              @db.Text
  isEnabled          Boolean              @default(true)
  requiredRole       Int                  @default(1)
  noticeSubscription noticeSubscription[]
}

model noticeSubscription {
  noticeCategoryFk Int            @default(0)
  userFk           Int            @default(0) @db.UnsignedInt
  noticeCategory   noticeCategory @relation(fields: [noticeCategoryFk], references: [id], onDelete: Cascade, map: "noticeSubscription_ibfk_1")

  @@id([noticeCategoryFk, userFk])
  @@index([userFk], map: "noticeSubscription_ibfk_2")
}

model observationType {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedTinyInt
  description        String               @db.VarChar(15)
  code               String               @db.VarChar(45)
  hasNewBornMessage  Boolean              @default(false)
  addressObservation addressObservation[]
  entryObservation   entryObservation[]
  ticketObservation  ticketObservation[]
}

model occupationCode {
  code     String     @id @db.VarChar(1)
  name     String?    @db.VarChar(100)
  business business[]
}

model operator {
  workerFk          Int             @id @db.UnsignedInt
  numberOfWagons    Int?            @default(1)
  trainFk           Int             @default(1)
  itemPackingTypeFk String          @default("H") @db.VarChar(1)
  warehouseFk       Int             @default(60) @db.UnsignedSmallInt
  worker            worker          @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "operator_FK")
  train             train           @relation(fields: [trainFk], references: [id], map: "operator_FK_1")
  itemPackingType   itemPackingType @relation(fields: [itemPackingTypeFk], references: [code], onDelete: Cascade, map: "operator_FK_2")
  warehouse         warehouse       @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, map: "operator_FK_3")

  @@index([workerFk], map: "operator_FK")
  @@index([trainFk], map: "operator_FK_1")
  @@index([itemPackingTypeFk], map: "operator_FK_2")
  @@index([warehouseFk], map: "operator_FK_3")
}

model orderTicket {
  orderFk  Int    @db.UnsignedInt
  ticketFk Int    @default(0)
  ticket   ticket @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "idTicketFk")

  @@id([ticketFk, orderFk])
  @@index([orderFk], map: "order_id")
}

model origin {
  id          Int        @id @default(autoincrement()) @db.UnsignedTinyInt
  code        String     @unique(map: "Abreviatura") @db.VarChar(3)
  name        String     @db.VarChar(20)
  warehouseFk Int?       @default(4) @db.UnsignedSmallInt
  countryFk   Int        @default(1) @db.UnsignedMediumInt
  item        item[]
  warehouse   warehouse? @relation(fields: [warehouseFk], references: [id], map: "origin_ibfk_1")

  @@index([countryFk], map: "Id_Paises")
  @@index([warehouseFk], map: "warehouse_id")
}

model originI18n {
  originFk Int    @db.UnsignedTinyInt
  lang     String @db.Char(2)
  name     String @db.VarChar(255)

  @@id([originFk, lang])
}

model osTicketConfig {
  id           Int     @id
  host         String? @db.VarChar(100)
  user         String? @db.VarChar(100)
  password     String? @db.VarChar(100)
  oldStatus    String? @db.VarChar(100)
  newStatusId  Int?
  day          Int?
  comment      String? @db.VarChar(100)
  hostDb       String? @db.VarChar(100)
  userDb       String? @db.VarChar(100)
  passwordDb   String? @db.VarChar(100)
  portDb       Int?
  responseType String? @db.VarChar(100)
  fromEmailId  Int?
  replyTo      String? @db.VarChar(100)
}

model outgoingInvoiceVat {
  outgoingInvoice Int      @id @db.MediumInt
  taxBase         Decimal? @db.Decimal(12, 2)
  equalizationTax Decimal? @db.Decimal(12, 2)
  Vat             Decimal? @db.Decimal(12, 2)
}

model packageChecked {
  id     Int @id @default(autoincrement())
  itemFk Int @unique(map: "entryFk_UNIQUE")

  @@index([itemFk], map: "fkItem_idx")
}

model packageEquivalent {
  packagingFk                                         String    @db.VarChar(10)
  equivalentFk                                        String    @db.VarChar(10)
  packaging_packageEquivalent_packagingFkTopackaging  packaging @relation("packageEquivalent_packagingFkTopackaging", fields: [packagingFk], references: [id], onDelete: Cascade, map: "packageEquivalent_fk1")
  packaging_packageEquivalent_equivalentFkTopackaging packaging @relation("packageEquivalent_equivalentFkTopackaging", fields: [equivalentFk], references: [id], onDelete: Cascade, map: "packageEquivalent_fk2")

  @@id([packagingFk, equivalentFk])
  @@index([equivalentFk], map: "packageEquivalent_fk2_idx")
}

model packaging {
  id                                                          String                         @id @db.VarChar(10)
  volume                                                      Decimal?                       @default(0.00) @db.Decimal(10, 2)
  width                                                       Decimal?                       @default(0.00) @db.Decimal(10, 2)
  depth                                                       Decimal?                       @default(0.00) @db.Decimal(10, 2)
  height                                                      Decimal?                       @default(0.00) @db.Decimal(10, 2)
  value                                                       Decimal?                       @default(0.00) @db.Decimal(10, 2)
  isPackageReturnable                                         Boolean                        @default(false)
  created                                                     DateTime                       @default(now()) @db.Timestamp(0)
  packagingReturnFk                                           Int?
  lower                                                       Int?
  upload                                                      Int?
  base                                                        Decimal                        @default(0.00) @db.Decimal(10, 2)
  itemFk                                                      Int?
  price                                                       Decimal                        @default(0.00) @db.Decimal(10, 2)
  isBox                                                       Boolean                        @default(false)
  cubicPackage                                                Decimal?                       @db.Decimal(10, 2)
  returnCost                                                  Decimal                        @default(0.00) @db.Decimal(10, 2)
  cmrName                                                     String?                        @db.VarChar(45)
  freightItemFk                                               Int?
  hasCompressionVariations                                    Boolean?                       @default(false)
  conveyorBuildingClassFk                                     Int?
  isTrolley                                                   Boolean                        @default(false)
  isPallet                                                    Boolean                        @default(false)
  buy                                                         buy[]
  expedition                                                  expedition[]
  itemShelving                                                itemShelving[]
  packageEquivalent_packageEquivalent_packagingFkTopackaging  packageEquivalent[]            @relation("packageEquivalent_packagingFkTopackaging")
  packageEquivalent_packageEquivalent_equivalentFkTopackaging packageEquivalent[]            @relation("packageEquivalent_equivalentFkTopackaging")
  conveyorBuildingClass                                       conveyorBuildingClass?         @relation(fields: [conveyorBuildingClassFk], references: [id], map: "packaging_FK")
  returnBuckets                                               returnBuckets?                 @relation(fields: [packagingReturnFk], references: [id], onDelete: Restrict, map: "packaging_FK_1")
  item_packaging_itemFkToitem                                 item?                          @relation("packaging_itemFkToitem", fields: [itemFk], references: [id], onDelete: Restrict, map: "packaging_fk1")
  item_packaging_freightItemFkToitem                          item?                          @relation("packaging_freightItemFkToitem", fields: [freightItemFk], references: [id], map: "packaging_fk2")
  packagingWithFreight                                        packagingWithFreight?
  packagingWithoutFreight                                     packagingWithoutFreight?
  ticketPackaging                                             ticketPackaging[]
  ticketPackagingStartingStock                                ticketPackagingStartingStock[]

  @@index([conveyorBuildingClassFk], map: "packaging_FK")
  @@index([packagingReturnFk], map: "packaging_FK_1")
  @@index([itemFk], map: "packaging_fk1")
  @@index([freightItemFk], map: "packaging_fk2_idx")
}

model packagingConfig {
  id                             Int     @id @default(autoincrement())
  upperGap                       Int
  previousPreparationMinimumSize Int
  defaultConveyorBuildingClass   Int
  palletPackaging                String? @default("pallet USA") @db.VarChar(10)
  carryPackaging                 String? @default("cc") @db.VarChar(10)
  freightItemPackaging           Int?    @default(71)
}

model packagingGifts {
  id                   Int                    @id @default(autoincrement())
  description          String                 @db.VarChar(255)
  photo                Bytes?                 @db.Blob
  started              DateTime               @db.Date
  ended                DateTime               @db.Date
  warehouseFk          Int?                   @db.UnsignedSmallInt
  provinceFk           Int?                   @db.UnsignedSmallInt
  countryFk            Int?                   @db.UnsignedMediumInt
  clientPackagingGifts clientPackagingGifts[]
  province             province?              @relation(fields: [provinceFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "PackagingGifts_FK")
  warehouse            warehouse?             @relation(fields: [warehouseFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "PackagingGifts_FK_1")
  country              country?               @relation(fields: [countryFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "PackagingGifts_FK_2")

  @@index([provinceFk], map: "PackagingGifts_FK")
  @@index([warehouseFk], map: "PackagingGifts_FK_1")
  @@index([countryFk], map: "PackagingGifts_FK_2")
}

model packagingWithFreight {
  packagingFk String    @id @db.VarChar(10)
  priority    Int       @unique(map: "packagingWithFreight_UN")
  packaging   packaging @relation(fields: [packagingFk], references: [id], onDelete: Cascade, map: "packagingWithFreight_FK")
}

model packagingWithoutFreight {
  packagingFk String    @id @db.VarChar(10)
  priority    Int       @unique(map: "packagingWithoutFreight_UN")
  packaging   packaging @relation(fields: [packagingFk], references: [id], onDelete: Cascade, map: "packagingWithoutFreight_FK")
}

model packingSite {
  id             Int              @id @default(autoincrement())
  code           String?          @unique(map: "packingSite_UN") @db.VarChar(10)
  hostFk         Int
  printerFk      Int?             @db.UnsignedTinyInt
  collectionFk   Int?
  monitorId      String?          @db.VarChar(255)
  host           host             @relation(fields: [hostFk], references: [id], onUpdate: Restrict, map: "packingSite_FK")
  printer        printer?         @relation(fields: [printerFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "packingSite_FK_1")
  collection     collection?      @relation(fields: [collectionFk], references: [id], map: "packingSite_FK_2")
  packingSiteLog packingSiteLog[]

  @@index([hostFk], map: "packingSite_FK")
  @@index([printerFk], map: "packingSite_FK_1")
  @@index([collectionFk], map: "packingSite_FK_2")
}

model packingSiteConfig {
  id              Int    @id @default(autoincrement())
  shinobiUrl      String @db.VarChar(255)
  shinobiToken    String @db.VarChar(255)
  shinobiGroupKey String @db.VarChar(255)
  avgBoxingTime   Int?
}

model packingSiteLog {
  id                   Int                   @id @unique(map: "packingSiteLog_UN") @default(autoincrement())
  packingSiteFk        String?               @db.VarChar(10)
  hostFk               String                @db.VarChar(15)
  workerFk             Int                   @db.UnsignedInt
  printerModelFk       String?               @db.VarChar(50)
  typeErrorFk          String?               @db.VarChar(30)
  creationDate         DateTime?             @default(now()) @db.Timestamp(0)
  description          String?               @db.Text
  worker               worker                @relation(fields: [workerFk], references: [id], onUpdate: Restrict, map: "packingSiteLog_FK")
  printerModel         printerModel?         @relation(fields: [printerModelFk], references: [code], onDelete: Restrict, map: "packingSiteLog_FK_1")
  packingSite          packingSite?          @relation(fields: [packingSiteFk], references: [code], onDelete: Restrict, map: "packingSiteLog_FK_2")
  packingSiteTypeError packingSiteTypeError? @relation(fields: [typeErrorFk], references: [code], onDelete: Restrict, map: "packingSiteLog_FK_4")

  @@index([workerFk], map: "packingSiteLog_FK")
  @@index([printerModelFk], map: "packingSiteLog_FK_1")
  @@index([packingSiteFk], map: "packingSiteLog_FK_2")
  @@index([typeErrorFk], map: "packingSiteLog_FK_4")
}

model packingSiteTypeError {
  code           String           @id @db.VarChar(30)
  description    String?          @db.VarChar(100)
  packingSiteLog packingSiteLog[]
}

model paperSize {
  code    String    @id @db.VarChar(100)
  color   String    @db.VarChar(100)
  alias   String    @db.VarChar(100)
  printer printer[]
  report  report[]
}

model parking {
  id            Int             @id @default(autoincrement())
  column        String?         @default("--") @db.VarChar(5)
  row           String?         @default("--") @db.VarChar(5)
  sectorFk      Int             @default(2)
  code          String?         @unique(map: "code_UNIQUE") @db.VarChar(8)
  pickingOrder  Int?
  sector        sector          @relation(fields: [sectorFk], references: [id], onDelete: Cascade, map: "parking_fk1")
  shelving      shelving[]
  ticketParking ticketParking[]

  @@index([sectorFk], map: "parking_fk1_idx")
}

model payDem {
  id       Int        @id @default(autoincrement()) @db.UnsignedTinyInt
  payDem   String     @db.VarChar(15)
  supplier supplier[]
}

model payDemDetail {
  id     Int @db.UnsignedTinyInt
  detail Int @db.UnsignedTinyInt

  @@id([id, detail])
}

model payMethod {
  id                         Int        @id @default(autoincrement()) @db.UnsignedTinyInt
  code                       String?    @db.VarChar(50)
  name                       String     @db.VarChar(20)
  solution                   String?    @db.VarChar(1)
  outstandingDebt            Int        @default(0) @db.TinyInt
  graceDays                  Int        @default(0) @db.UnsignedInt
  isIbanRequiredForClients   Int?       @default(0) @db.TinyInt
  isIbanRequiredForSuppliers Int?       @default(0) @db.TinyInt
  isNotified                 Int        @default(1) @db.TinyInt
  hasVerified                Boolean?   @default(false)
  graceMonthsDisableChecked  Int        @default(0) @db.UnsignedInt
  client                     client[]
  payment                    payment[]
  supplier                   supplier[]
}

model payment {
  id            Int        @id @default(autoincrement()) @db.UnsignedInt
  received      DateTime   @db.Date
  supplierFk    Int
  amount        Decimal    @default(0.00) @db.Decimal(10, 2)
  currencyFk    Int        @default(1) @db.UnsignedTinyInt
  divisa        Decimal?   @db.Decimal(10, 2)
  bankFk        Int        @default(0)
  payMethodFk   Int        @db.UnsignedTinyInt
  bankingFees   Float      @default(0.00)
  concept       String?    @db.VarChar(30)
  companyFk     Int        @default(442) @db.UnsignedSmallInt
  created       DateTime   @default(now()) @db.Timestamp(0)
  isConciliated Boolean    @default(false)
  dueDated      DateTime?  @db.Date
  workerFk      Int?       @db.UnsignedInt
  supplier      supplier   @relation(fields: [supplierFk], references: [id], map: "pago_ibfk_3")
  currency      currency   @relation(fields: [currencyFk], references: [id], map: "pago_moneda_1")
  payMethod     payMethod  @relation(fields: [payMethodFk], references: [id], map: "pago_pay_met")
  worker        worker?    @relation(fields: [workerFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "payment_FK")
  company       company    @relation(fields: [companyFk], references: [id], map: "payment_ibfk_1")
  accounting    accounting @relation(fields: [bankFk], references: [id], map: "payment_ibfk_2")

  @@index([companyFk], map: "empresa_id")
  @@index([bankFk], map: "id_banco")
  @@index([currencyFk], map: "id_moneda")
  @@index([dueDated], map: "pagoDueDatedIdx")
  @@index([supplierFk], map: "pago_ibfk_3")
  @@index([payMethodFk], map: "pay_met")
  @@index([workerFk], map: "payment_FK")
}

model pcs {
  created DateTime? @default(now()) @db.Timestamp(0)
  routeFk Int?      @db.UnsignedInt
  id      Int       @id @default(autoincrement())
  pallet  Int?
  box     Int?
}

model pcs_graf {
  id      Int       @id @default(0)
  dia     DateTime? @db.Date
  created DateTime? @db.DateTime(0)
  box     Decimal?  @db.Decimal(4, 0)
  pallet  Decimal?  @db.Decimal(2, 0)
  routeFk Int?      @db.UnsignedInt
  hh      Int?
  mm      Int?

  @@index([hh], map: "pcs_graf_index1")
  @@index([mm], map: "pcs_graf_index2")
}

model pedidosInternos {
  id        Int  @id @default(autoincrement())
  idArticle Int?
  quantity  Int?
}

model periodicityType {
  code        String  @id @db.VarChar(45)
  description String? @db.VarChar(45)
}

model personalProtectionEquipment {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model pgc {
  code                     String                @id @db.VarChar(10)
  rate                     Decimal               @db.Decimal(10, 2)
  name                     String?               @db.VarChar(45)
  cplusTaxBreakFk          Int?                  @default(1) @db.UnsignedInt
  mod340                   Boolean               @default(false)
  mod347                   Boolean               @default(false)
  cplusTrascendency477Fk   Int?                  @default(1) @db.UnsignedInt
  isEqualizated            Boolean?              @default(false)
  bookingPlanner           bookingPlanner[]
  invoiceOutTax            invoiceOutTax[]
  cplusTaxBreak            cplusTaxBreak?        @relation(fields: [cplusTaxBreakFk], references: [id], onDelete: Restrict, map: "pgc_fk1")
  cplusTrascendency477     cplusTrascendency477? @relation(fields: [cplusTrascendency477Fk], references: [id], onDelete: Restrict, map: "pgc_fk2")
  pgcEqu_pgcEqu_vatFkTopgc pgcEqu[]              @relation("pgcEqu_vatFkTopgc")
  pgcEqu_pgcEqu_equFkTopgc pgcEqu[]              @relation("pgcEqu_equFkTopgc")

  @@index([cplusTaxBreakFk], map: "pgc_fk1_idx")
  @@index([cplusTrascendency477Fk], map: "pgc_fk2_idx")
}

model pgcEqu {
  vatFk                 String @db.VarChar(10)
  equFk                 String @db.VarChar(10)
  pgc_pgcEqu_vatFkTopgc pgc    @relation("pgcEqu_vatFkTopgc", fields: [vatFk], references: [code], onDelete: Cascade, map: "pgcEqu_fk1")
  pgc_pgcEqu_equFkTopgc pgc    @relation("pgcEqu_equFkTopgc", fields: [equFk], references: [code], onDelete: Cascade, map: "pgcEqu_fk2")

  @@id([vatFk, equFk])
  @@index([equFk], map: "pgcEqu_fk2_idx")
}

model pgcMaster {
  code                              String  @id @db.VarChar(10)
  description                       String? @db.VarChar(100)
  ppe_ppe_accountTopgcMaster        ppe[]   @relation("ppe_accountTopgcMaster")
  ppe_ppe_endowmentTopgcMaster      ppe[]   @relation("ppe_endowmentTopgcMaster")
  ppe_ppe_elementAccountTopgcMaster ppe[]   @relation("ppe_elementAccountTopgcMaster")
}

model plantpassport {
  producerFk               Int                    @db.UnsignedMediumInt
  plantpassportAuthorityFk Int                    @db.UnsignedMediumInt
  number                   String?                @db.VarChar(25)
  isRequested              Int                    @default(0) @db.TinyInt
  plantpassportAuthority   plantpassportAuthority @relation(fields: [plantpassportAuthorityFk], references: [id], onDelete: Cascade, map: "plantpassport_authority")
  producer                 producer               @relation(fields: [producerFk], references: [id], map: "producer")

  @@id([producerFk, plantpassportAuthorityFk])
  @@index([plantpassportAuthorityFk], map: "plantpassport_authority_idx")
  @@index([producerFk], map: "producer_id_idx")
}

model plantpassportAuthority {
  id            Int             @id @db.UnsignedMediumInt
  denomination  String?         @unique(map: "denomination_UNIQUE") @db.VarChar(45)
  countryFk     Int?            @db.UnsignedMediumInt
  plantpassport plantpassport[]
  country       country?        @relation(fields: [countryFk], references: [id], onDelete: Cascade, map: "Pais_id")

  @@index([countryFk], map: "Pais_id_idx")
}

model postCode {
  code   String @db.VarChar(30)
  townFk Int
  geoFk  Int?
  town   town   @relation(fields: [townFk], references: [id], onDelete: NoAction, map: "postCodeTownFk")

  @@id([code, townFk])
  @@index([townFk], map: "postCodeTownFk_idx")
}

model ppe {
  id                                      Int            @id @default(autoincrement())
  amortization                            Decimal        @default(0.00) @db.Decimal(10, 2)
  firstAmortizated                        DateTime?      @db.Date
  lastAmortizated                         DateTime?      @db.Date
  finished                                DateTime?      @db.Date
  value                                   Decimal        @default(0.00) @db.Decimal(10, 2)
  planFk                                  Int
  groupFk                                 Int?
  account                                 String?        @db.VarChar(10)
  endowment                               String?        @db.VarChar(10)
  elementAccount                          String?        @db.VarChar(10)
  nature                                  String?        @db.VarChar(30)
  location                                String?        @db.VarChar(10)
  discharged                              DateTime?      @db.Date
  cause                                   String?        @db.VarChar(45)
  photo                                   Bytes?         @db.Blob
  isInvestmentAsset                       Int            @default(0) @db.TinyInt
  workerFk                                Int?           @db.UnsignedInt
  companyFk                               Int            @default(442) @db.UnsignedSmallInt
  description                             String?        @db.VarChar(45)
  machine                                 machine[]
  ppeLocation                             ppeLocation?   @relation(fields: [location], references: [code], onDelete: Restrict, map: "ppe_FK")
  worker                                  worker?        @relation(fields: [workerFk], references: [id], map: "ppe_fk1")
  ppePlan                                 ppePlan        @relation(fields: [planFk], references: [id], map: "ppe_fk2")
  ppeGroup                                ppeGroup?      @relation(fields: [groupFk], references: [id], map: "ppe_fk3")
  company                                 company        @relation(fields: [companyFk], references: [id], map: "ppe_fk4")
  pgcMaster_ppe_accountTopgcMaster        pgcMaster?     @relation("ppe_accountTopgcMaster", fields: [account], references: [code], onDelete: Restrict, map: "ppe_fk5")
  pgcMaster_ppe_endowmentTopgcMaster      pgcMaster?     @relation("ppe_endowmentTopgcMaster", fields: [endowment], references: [code], onDelete: Restrict, map: "ppe_fk6")
  pgcMaster_ppe_elementAccountTopgcMaster pgcMaster?     @relation("ppe_elementAccountTopgcMaster", fields: [elementAccount], references: [code], onDelete: Restrict, map: "ppe_fk7")
  ppeComponent                            ppeComponent[]
  ppeDMS                                  ppeDMS[]
  vehicle                                 vehicle[]

  @@index([location], map: "ppe_FK")
  @@index([workerFk], map: "ppe_fk1_idx")
  @@index([planFk], map: "ppe_fk2_idx")
  @@index([groupFk], map: "ppe_fk3_idx")
  @@index([companyFk], map: "ppe_fk4_idx")
  @@index([account], map: "ppe_fk5_idx")
  @@index([endowment], map: "ppe_fk6")
  @@index([elementAccount], map: "ppe_fk7")
}

model ppeComponent {
  id          Int       @id @default(autoincrement())
  ppeFk       Int
  invoiceInFk Int       @db.UnsignedMediumInt
  amount      Decimal   @default(0.00) @db.Decimal(10, 2)
  ppe         ppe       @relation(fields: [ppeFk], references: [id], onDelete: Cascade, map: "ppeComponent_fk1")
  invoiceIn   invoiceIn @relation(fields: [invoiceInFk], references: [id], onDelete: Cascade, map: "ppeComponent_fk2")

  @@index([ppeFk], map: "ppeComponent_fk1_idx")
  @@index([invoiceInFk], map: "ppeComponent_fk2_idx")
}

model ppeDMS {
  id    Int @id @default(autoincrement())
  dmsFk Int
  ppeFk Int
  dms   dms @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "ppeDMS_fk1")
  ppe   ppe @relation(fields: [ppeFk], references: [id], onDelete: Cascade, map: "ppeDMS_fk2")

  @@index([dmsFk], map: "ppeDMS_fk1_idx")
  @@index([ppeFk], map: "ppeDMS_fk2_idx")
}

model ppeGroup {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(45)
  ppe         ppe[]
}

model ppeLocation {
  code        String  @id @default("") @db.VarChar(10)
  description String? @db.VarChar(100)
  ppe         ppe[]
}

model ppePlan {
  id   Int     @id @default(autoincrement())
  rate Decimal @default(1.00) @db.Decimal(3, 2)
  days Int     @default(365)
  ppe  ppe[]
}

model priceFixed {
  itemFk      Int
  rate0       Float
  rate1       Float
  rate2       Float
  rate3       Float
  started     DateTime  @db.Date
  ended       DateTime  @db.Date
  bonus       Float     @default(0)
  warehouseFk Int       @default(0) @db.UnsignedSmallInt
  created     DateTime  @default(now()) @db.Timestamp(0)
  id          Int       @unique(map: "price_fixed_id_UNIQUE") @default(autoincrement())
  grouping    Int?      @db.SmallInt
  packing     Int?
  box         Int?      @db.TinyInt
  item        item      @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "priceFixed_ibfk_1")
  warehouse   warehouse @relation(fields: [warehouseFk], references: [id], map: "priceFixed_ibfk_2")

  @@id([itemFk, started, ended, warehouseFk])
  @@index([ended], map: "date_end")
  @@index([started], map: "date_start")
  @@index([itemFk], map: "item_id")
  @@index([warehouseFk], map: "warehouse_id")
}

model printQueue {
  id             Int                   @id @default(autoincrement()) @db.UnsignedInt
  printerFk      Int?                  @db.UnsignedTinyInt
  priorityFk     Int                   @default(3) @db.UnsignedTinyInt
  reportFk       Int?                  @db.UnsignedTinyInt
  statusCode     printQueue_statusCode @default(queued)
  started        DateTime?             @db.DateTime(0)
  finished       DateTime?             @db.DateTime(0)
  workerFk       Int?
  error          String?               @db.Text
  errorNumber    Int?
  created        DateTime              @default(now()) @db.Timestamp(0)
  printer        printer?              @relation(fields: [printerFk], references: [id], onDelete: Restrict, map: "printQueue_printerFk")
  queuePriority  queuePriority         @relation(fields: [priorityFk], references: [id], map: "printQueue_priorityFk")
  report         report?               @relation(fields: [reportFk], references: [id], onDelete: Cascade, map: "printQueue_report")
  printQueueArgs printQueueArgs[]

  @@index([reportFk], map: "printQueue_report")
  @@index([printerFk], map: "printerFk")
  @@index([priorityFk], map: "priorityFk")
  @@index([statusCode], map: "statusCode")
  @@index([workerFk], map: "workerFk")
}

model printQueueArgs {
  printQueueFk Int        @db.UnsignedInt
  name         String     @db.VarChar(255)
  value        String     @db.VarChar(255)
  printQueue   printQueue @relation(fields: [printQueueFk], references: [id], onDelete: Cascade, map: "printQueueArgs_printQueueFk")

  @@id([printQueueFk, name])
  @@index([printQueueFk])
}

model printQueueConfig {
  id              Int    @id @default(autoincrement()) @db.UnsignedTinyInt
  networkDrive    String @default("X:\\\\") @db.VarChar(10)
  dmsPath         String @default(" \\\\\\server\\dms") @db.VarChar(45)
  printQueueLimit Int    @default(30)
}

model printer {
  id           Int           @id @default(autoincrement()) @db.UnsignedTinyInt
  name         String?       @unique(map: "printer_UN2") @db.VarChar(50)
  path         String?       @db.VarChar(50)
  modelFk      String?       @db.VarChar(50)
  macWifi      String?       @unique(map: "printer_UN1") @db.VarChar(20)
  ipAddress    String?       @db.VarChar(15)
  reference    String?       @unique(map: "printer_UN") @db.VarChar(50)
  isLabeler    Boolean?      @default(false)
  sectorFk     Int?
  paperSizeFk  String?       @db.VarChar(100)
  host         host[]
  packingSite  packingSite[]
  printQueue   printQueue[]
  printerModel printerModel? @relation(fields: [modelFk], references: [code], onDelete: Restrict, map: "printer_FK")
  paperSize    paperSize?    @relation(fields: [paperSizeFk], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "printer_FK_1")
  sector       sector?       @relation(fields: [sectorFk], references: [id], onDelete: Restrict, map: "printer_sectorFk")
  worker       worker[]

  @@index([modelFk], map: "printer_FK")
  @@index([paperSizeFk], map: "printer_FK_1")
  @@index([sectorFk], map: "printer_sectorFk")
  @@index([id, sectorFk], map: "printer_sectorFk_idx")
}

model printerModel {
  code           String           @id @db.VarChar(50)
  packingSiteLog packingSiteLog[]
  printer        printer[]
}

model printingQueueCheck {
  lastCount         Int @id @default(0) @db.UnsignedInt
  lastCheckSum      Int @default(0) @db.UnsignedInt
  isAlreadyNotified Int @default(0) @db.TinyInt
}

model producer {
  id            Int             @id @default(autoincrement()) @db.UnsignedMediumInt
  name          String?         @unique(map: "name_UNIQUE") @db.VarChar(50)
  isVisible     Boolean         @default(true)
  created       DateTime?       @default(now()) @db.Timestamp(0)
  item          item[]
  plantpassport plantpassport[]
}

model productionConfig {
  isPreviousPreparationRequired     Boolean  @default(false)
  ticketPrintedMax                  Int      @default(8) @db.UnsignedInt
  ticketTrolleyMax                  Int      @default(4) @db.UnsignedInt
  rookieDays                        Int      @default(3)
  notBuyingMonths                   Int      @default(3)
  id                                Int      @id @default(1)
  isZoneClosedByExpeditionActivated Boolean  @default(false)
  maxNotReadyCollections            Int      @default(5)
  minTicketsToCloseZone             Int?     @default(15)
  movingTicketDelRoute              Boolean  @default(true)
  defaultZone                       Int      @default(697)
  defautlAgencyMode                 Int      @default(1328)
  hasUniqueCollectionTime           Boolean  @default(false)
  maxCollectionWithoutUser          Int      @default(1)
  pendingCollectionsOrder           Int?     @default(8) @db.UnsignedTinyInt
  pendingCollectionsAge             Int?     @default(6) @db.UnsignedTinyInt
  maxNotAssignedCollectionLifeTime  DateTime @default(dbgenerated("('00:10:00')")) @db.Time(0)
  maxProductionScopeDays            Int      @default(1)
}

model professionalCategory {
  id                Int      @id @default(autoincrement())
  description       String?  @db.VarChar(45)
  salary            Decimal? @db.Decimal(10, 2)
  salaryorSeniority Decimal? @db.Decimal(10, 2)
  year              Int?
}

model profileType {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(15)
}

model project {
  id           Int            @id @default(autoincrement())
  created      DateTime       @default(now()) @db.Timestamp(0)
  name         String         @db.VarChar(100)
  photo        Bytes?         @db.Blob
  started      DateTime?      @db.Date
  finished     DateTime?      @db.Date
  userFk       Int            @db.UnsignedInt
  departmentFk Int?
  companyFk    Int            @default(442) @db.UnsignedSmallInt
  location     String?        @db.VarChar(100)
  amount       Decimal?       @db.Decimal(15, 2)
  stateFk      String?        @default("open") @db.VarChar(25)
  budget       budget[]
  department   department?    @relation(fields: [departmentFk], references: [id], onDelete: Cascade, map: "project_FK_1")
  company      company        @relation(fields: [companyFk], references: [id], onDelete: Cascade, map: "project_FK_2")
  projectState projectState?  @relation(fields: [stateFk], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "project_FK_3")
  projectNotes projectNotes[]

  @@index([userFk], map: "project_FK")
  @@index([departmentFk], map: "project_FK_1")
  @@index([companyFk], map: "project_FK_2")
  @@index([stateFk], map: "project_FK_3")
}

model projectNotes {
  id        Int      @id @default(autoincrement())
  created   DateTime @default(now()) @db.Timestamp(0)
  txt       String   @db.VarChar(255)
  userFk    Int?     @db.UnsignedInt
  projectFk Int
  project   project  @relation(fields: [projectFk], references: [id], onDelete: Cascade, map: "projectNotes_FK")

  @@index([projectFk], map: "projectNotes_FK")
  @@index([userFk], map: "projectNotes_FK_1")
}

model projectState {
  code        String    @id @db.VarChar(25)
  description String    @db.VarChar(100)
  project     project[]
}

model property {
  id              Int             @id @default(autoincrement())
  name            String          @db.VarChar(250)
  cadaster        String?         @db.VarChar(200)
  smallholding    Int?
  area            String?         @db.VarChar(100)
  townFk          Int
  registry        String?         @db.VarChar(200)
  volume          Int?
  book            Int?
  page            Int?
  farm            Int?
  registration    Int?
  value           Int?
  propertyGroupFk Int
  companyFk       Int             @db.UnsignedSmallInt
  photo           Bytes?          @db.Blob
  allocation      String?         @db.VarChar(200)
  m2              Decimal?        @db.Decimal(10, 2)
  tome            Int?
  url             String?         @db.VarChar(250)
  protocol        String?         @db.VarChar(100)
  propertyGroup   propertyGroup   @relation(fields: [propertyGroupFk], references: [id], map: "property_FK")
  town            town            @relation(fields: [townFk], references: [id], map: "property_FK_1")
  company         company         @relation(fields: [companyFk], references: [id], map: "property_company")
  propertyDms     propertyDms[]
  propertyNotes   propertyNotes[]

  @@index([propertyGroupFk], map: "property_FK")
  @@index([townFk], map: "property_FK_1")
  @@index([companyFk], map: "property_company")
}

model propertyDms {
  id         Int      @id @default(autoincrement())
  dmsFk      Int
  propertyFk Int
  dms        dms      @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "propertyDms_FK")
  property   property @relation(fields: [propertyFk], references: [id], map: "propertyDms_FK_1")

  @@index([dmsFk], map: "propertyDms_FK")
  @@index([propertyFk], map: "propertyDms_FK_1")
}

model propertyGroup {
  id          Int        @id @default(autoincrement())
  description String     @db.VarChar(100)
  property    property[]
}

model propertyNotes {
  id         Int      @id @default(autoincrement())
  propertyFk Int
  created    DateTime @default(now()) @db.Timestamp(0)
  note       String   @db.Text
  userFk     Int?     @db.UnsignedInt
  property   property @relation(fields: [propertyFk], references: [id], onUpdate: Restrict, map: "propertyNotes_FK")

  @@index([propertyFk], map: "propertyNotes_FK")
  @@index([userFk], map: "propertyNotes_FK_1")
}

model province {
  id              Int               @id @default(autoincrement()) @db.UnsignedSmallInt
  name            String            @db.VarChar(30)
  countryFk       Int               @db.UnsignedMediumInt
  warehouseFk     Int?              @db.UnsignedSmallInt
  zoneFk          Int?              @db.TinyInt
  geoFk           Int?
  autonomyFk      Int?
  address         address[]
  addressFilter   addressFilter[]
  client          client[]
  packagingGifts  packagingGifts[]
  autonomy        autonomy?         @relation(fields: [autonomyFk], references: [id], map: "province_FK")
  country         country           @relation(fields: [countryFk], references: [id], map: "province_ibfk_1")
  warehouse       warehouse?        @relation(fields: [warehouseFk], references: [id], map: "warehouse_Id")
  supplier        supplier[]
  supplierAddress supplierAddress[]
  town            town[]
  vehicle         vehicle[]

  @@index([countryFk], map: "Paises_Id")
  @@index([zoneFk], map: "provicne_zone_fk_idx")
  @@index([autonomyFk], map: "province_FK")
  @@index([warehouseFk], map: "warehouse_Id")
}

model punchState {
  workerFk Int       @id
  state    Int?      @default(1) @db.TinyInt
  created  DateTime? @db.DateTime(0)
}

model queuePriority {
  id         Int          @id @default(0) @db.UnsignedTinyInt
  priority   String?      @db.VarChar(50)
  code       String?      @db.VarChar(6)
  printQueue printQueue[]
}

model rankBonus {
  id    Int  @id @default(autoincrement())
  rank  Int?
  bonus Int?
}

model rate {
  id          Int       @id @default(autoincrement())
  dated       DateTime  @db.Date
  warehouseFk Int       @db.UnsignedSmallInt
  rate0       Float
  rate1       Float
  rate2       Float
  rate3       Float
  warehouse   warehouse @relation(fields: [warehouseFk], references: [id], map: "tarifa_warehouse")

  @@index([warehouseFk], map: "tarifa_warehouse")
}

model rateConfig {
  id    Int  @id
  rate0 Int?
  rate1 Int?
  rate2 Int?
  rate3 Int?
}

model receipt {
  Id           Int         @id @default(autoincrement())
  invoiceFk    String?     @db.VarChar(50)
  amountPaid   Decimal     @default(0.00) @db.Decimal(10, 2)
  payed        DateTime?   @db.DateTime(0)
  workerFk     Int?        @db.UnsignedInt
  bankFk       Int?        @default(0)
  clientFk     Int?        @default(0)
  created      DateTime    @default(now()) @db.Timestamp(0)
  companyFk    Int         @default(442) @db.UnsignedSmallInt
  isConciliate Boolean     @default(false)
  worker       worker?     @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "receiptWorkerFk")
  company      company     @relation(fields: [companyFk], references: [id], map: "receipt_ibfk_1")
  accounting   accounting? @relation(fields: [bankFk], references: [id], onDelete: Restrict, map: "receipt_ibfk_2")
  client       client?     @relation(fields: [clientFk], references: [id], onDelete: Restrict, map: "recibo_customer_id")

  @@index([bankFk], map: "Id_Banco")
  @@index([workerFk], map: "Id_Trabajador")
  @@index([clientFk, payed], map: "clientDate")
  @@index([companyFk], map: "empresa_id")
  @@index([invoiceFk], map: "id_factura")
  @@index([payed], map: "payed")
}

model recipe {
  id       Int     @id @default(autoincrement())
  itemFk   Int
  name     String? @db.VarChar(50)
  size     Int?    @db.UnsignedInt
  originFk Int?    @db.UnsignedTinyInt
  typeFk   Int?    @db.UnsignedSmallInt
  longName String? @db.VarChar(50)
  quantity Int     @default(1)
  element  String? @db.VarChar(45)
  inkFk    String? @db.VarChar(3)
  ink      ink?    @relation(fields: [inkFk], references: [id], onDelete: Restrict, map: "recipe_FK")

  @@index([inkFk], map: "recipe_FK")
  @@index([element], map: "recipe_ix_1")
  @@index([itemFk], map: "recipe_ix_2")
}

model recipe_log {
  id                                    Int    @id @default(autoincrement())
  recipe_ItemFk                         Int
  element                               String @db.VarChar(45)
  selected_ItemFk                       Int
  item_recipe_log_recipe_ItemFkToitem   item   @relation("recipe_log_recipe_ItemFkToitem", fields: [recipe_ItemFk], references: [id], map: "recipe_log_FK")
  item_recipe_log_selected_ItemFkToitem item   @relation("recipe_log_selected_ItemFkToitem", fields: [selected_ItemFk], references: [id], map: "recipe_log_FK_1")

  @@index([recipe_ItemFk], map: "recipe_log_ix1")
  @@index([element], map: "recipe_log_ix2")
  @@index([selected_ItemFk], map: "recipe_log_ix3")
}

model recovery {
  id       Int       @id @default(autoincrement())
  clientFk Int       @default(0)
  started  DateTime  @db.Date
  finished DateTime? @db.Date
  amount   Float
  period   Int       @default(7) @db.UnsignedTinyInt
  client   client    @relation(fields: [clientFk], references: [id], map: "cliente333")

  @@index([clientFk], map: "cliente_idx")
}

model referenceCurrent {
  dated      DateTime @db.Date
  value      Decimal  @db.Decimal(10, 4)
  currencyFk Int      @db.UnsignedTinyInt
  currency   currency @relation(fields: [currencyFk], references: [id], map: "referenceCurrent_currencyFk ")

  @@id([dated, currencyFk])
  @@index([currencyFk], map: "referenceCurrent_currencyFk _idx")
}

model referenceRate {
  currencyFk Int      @db.UnsignedTinyInt
  dated      DateTime @db.Date
  value      Float    @db.Float

  @@id([currencyFk, dated])
  @@index([dated], map: "date")
}

model referenceRateConfig {
  simulatedValue Float @id @default(1.2309) @db.Float
}

model report {
  id          Int          @id @default(autoincrement()) @db.UnsignedTinyInt
  name        String?      @db.VarChar(50)
  paperSizeFk String?      @db.VarChar(100)
  method      String?      @db.VarChar(255)
  printQueue  printQueue[]
  paperSize   paperSize?   @relation(fields: [paperSizeFk], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "report_FK")
  sector      sector[]

  @@index([paperSizeFk], map: "report_FK")
}

model returnBuckets {
  id                    Int         @id @default(autoincrement())
  freightContainerType  String      @db.VarChar(15)
  freightPackagingEmpty Float       @default(0)
  freightPackagingFull  Float       @default(0)
  packaging             packaging[]
}

model route {
  id                     Int               @id @default(autoincrement()) @db.UnsignedInt
  workerFk               Int?              @db.UnsignedInt
  created                DateTime          @db.Date
  vehicleFk              Int?              @db.UnsignedInt
  agencyModeFk           Int?
  time                   DateTime?         @db.DateTime(0)
  isOk                   Boolean           @default(false)
  kmStart                Int?              @db.MediumInt
  kmEnd                  Int?              @db.MediumInt
  started                DateTime          @db.DateTime(0)
  finished               DateTime          @db.DateTime(0)
  gestdocFk              Int?
  cost                   Float?
  m3                     Decimal?          @db.Decimal(10, 1)
  description            String?           @db.Text
  zoneFk                 Int?
  priority               Int               @default(0)
  invoiceInFk            Int?              @db.UnsignedMediumInt
  beachFk                Int?
  commissionWorkCenterFk Int?
  zone                   zone?             @relation(fields: [zoneFk], references: [id], map: "fk_route_1")
  workCenter             workCenter?       @relation(fields: [commissionWorkCenterFk], references: [id], onDelete: Restrict, map: "route_WorkCenterFk")
  agencyMode             agencyMode?       @relation(fields: [agencyModeFk], references: [id], map: "route_fk5")
  dms                    dms?              @relation(fields: [gestdocFk], references: [id], map: "route_ibfk_1")
  worker                 worker?           @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "route_ibfk_2")
  invoiceIn              invoiceIn?        @relation(fields: [invoiceInFk], references: [id], map: "route_invoiceInFk")
  routeCommission        routeCommission[]
  routeLoadWorker        routeLoadWorker[]
  routeLog               routeLog[]
  ticket                 ticket[]

  @@index([created], map: "Fecha")
  @@index([agencyModeFk], map: "Id_Agencia")
  @@index([invoiceInFk], map: "asdfasdf_idx")
  @@index([zoneFk], map: "fk_route_1_idx")
  @@index([gestdocFk], map: "gestdoc_id")
  @@index([commissionWorkCenterFk], map: "route_WorkCenterFk_idx")
  @@index([workerFk], map: "route_ibfk_2_idx")
  @@index([isOk], map: "route_idxIsOk")
}

model routeAction {
  id                  Int               @id @default(autoincrement())
  name                String            @db.VarChar(45)
  price               Decimal?          @db.Decimal(10, 2)
  isMainlineDelivered Int               @default(0) @db.TinyInt
  routeComplement     routeComplement[]
}

model routeCommission {
  id                Int         @id @default(autoincrement()) @db.UnsignedInt
  routeFk           Int         @db.UnsignedInt
  workCenterFk      Int?
  km                Decimal?    @db.Decimal(5, 2)
  m3                Decimal?    @db.Decimal(5, 2)
  yearlyKm          Decimal?    @db.Decimal(5, 2)
  yearlyM3          Decimal?    @db.Decimal(5, 2)
  cat4m3            Decimal?    @db.Decimal(5, 2)
  cat5m3            Decimal?    @db.Decimal(5, 2)
  freelanceYearlyM3 Decimal?    @db.Decimal(5, 2)
  route             route       @relation(fields: [routeFk], references: [id], onDelete: Cascade, map: "routeCommission_routeFk")
  workCenter        workCenter? @relation(fields: [workCenterFk], references: [id], onDelete: Restrict, map: "routeCommission_workCenterFk")

  @@index([routeFk])
  @@index([workCenterFk])
}

model routeComplement {
  id            Int         @id @default(autoincrement())
  dated         DateTime    @db.Date
  workerFk      Int         @db.UnsignedInt
  price         Decimal     @db.Decimal(10, 2)
  routeActionFk Int
  routeAction   routeAction @relation(fields: [routeActionFk], references: [id], onDelete: Cascade, map: "fgn_routeActionFk")
  worker        worker      @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "fgn_workerFk")

  @@index([routeActionFk], map: "fgn_routeActionFk_idx")
  @@index([workerFk], map: "fgn_workerFk_idx")
}

model routeConfig {
  id                                    Int       @id @db.UnsignedInt
  kmRate                                Decimal?  @db.Decimal(10, 4)
  kmTruckRate                           Decimal?  @db.Decimal(10, 4)
  m3Distribution                        Decimal?  @db.Decimal(10, 4)
  m3Management                          Decimal?  @db.Decimal(10, 2)
  m3Palletization                       Decimal?  @db.Decimal(10, 2)
  load1m3                               Decimal?  @db.Decimal(10, 4)
  load2m3                               Decimal?  @db.Decimal(10, 4)
  load3m3                               Decimal?  @db.Decimal(10, 4)
  load4m3                               Decimal?  @db.Decimal(10, 4)
  load5m3                               Decimal?  @db.Decimal(10, 4)
  load6m3                               Decimal?  @db.Decimal(10, 4)
  rateHoliday                           Decimal?  @db.Decimal(5, 2)
  plusCategory1                         Decimal?  @db.Decimal(5, 2)
  plusCategory2                         Decimal?  @db.Decimal(5, 2)
  maxSalaryCategory1                    Decimal?  @db.Decimal(6, 2)
  maxSalaryCategory2                    Decimal?  @db.Decimal(6, 2)
  distributionM3Category1               Decimal?  @db.Decimal(5, 2)
  distributionM3Category2               Decimal?  @db.Decimal(5, 2)
  plusCategory1Concept                  String?   @db.VarChar(45)
  plusCategory2Concept                  String?   @db.VarChar(45)
  defaultCompanyFk                      Int?      @default(442) @db.UnsignedSmallInt
  kmHeavy                               Decimal?  @db.Decimal(5, 2)
  kmLight                               Decimal?  @db.Decimal(5, 2)
  kmYearly                              Decimal?  @db.Decimal(5, 2)
  m3Yearly                              Decimal?  @db.Decimal(5, 2)
  deliveryM3Cat4                        Decimal?  @db.Decimal(5, 2)
  deliveryM3Cat5                        Decimal?  @db.Decimal(5, 2)
  plusCat2Fixed                         Decimal?  @db.Decimal(5, 2)
  plusCat2Variable                      Decimal?  @db.Decimal(5, 2)
  plusCat3Fixed                         Decimal?  @db.Decimal(5, 2)
  plusCat3Variable                      Decimal?  @db.Decimal(5, 2)
  distributionCat4M3                    Decimal?  @db.Decimal(5, 2)
  distributionCat5M3                    Decimal?  @db.Decimal(5, 2)
  rateCat4                              Decimal?  @db.Decimal(5, 2)
  rateCat5                              Decimal?  @db.Decimal(5, 2)
  freelanceM3                           Decimal?  @db.Decimal(5, 2)
  freelanceMinM3                        Decimal?  @db.Decimal(5, 2)
  mainlineDelivered                     Decimal?  @db.Decimal(5, 2)
  cutoffDated                           DateTime? @db.Date
  defaultWorkCenterFk                   Int?      @default(9)
  kmMax                                 Int?      @default(4000)
  truckerBusinessProfessionalCategoryFk Int       @default(42)
  company                               company?  @relation(fields: [defaultCompanyFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "routeConfig_FK")

  @@index([defaultCompanyFk], map: "routeConfig_FK")
}

model routeLoadWorker {
  routeFk  Int    @db.UnsignedInt
  workerFk Int    @db.UnsignedInt
  route    route  @relation(fields: [routeFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "frmRutas")
  worker   worker @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "frmWorker")

  @@id([routeFk, workerFk])
  @@index([workerFk], map: "frmWorker_idx")
}

model routeLog {
  id                Int       @id @default(autoincrement())
  originFk          Int       @db.UnsignedInt
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  route             route     @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "routeLog_ibfk_1")

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model routeRecalc {
  routeFk Int @id
}

model routeUserPercentage__ {
  id         Int      @id @default(autoincrement())
  workerFk   Int      @db.UnsignedInt
  percentage Decimal  @db.Decimal(10, 2)
  dated      DateTime @db.Date
  worker     worker   @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "routeUserPercentageFk")

  @@index([workerFk], map: "routeUserPercentageFk_idx")
}

model routesMonitor {
  routeFk           Int       @id @db.UnsignedInt
  name              String?   @db.VarChar(45)
  beachFk           String?   @db.VarChar(45)
  ticketPacked      Int?
  ticketFree        Int?
  ticketProduction  Int?
  packages          Int?
  note              String?   @db.VarChar(255)
  dated             DateTime? @db.Date
  dockFk            String?   @db.VarChar(10)
  m3                Decimal?  @db.Decimal(10, 1)
  priority          Int       @default(0)
  etd               DateTime? @db.Time(0)
  expeditionTruckFk Int?
  m3boxes           Decimal?  @db.Decimal(10, 1)
  bufferFk          Int?
  isPickingAllowed  Boolean   @default(false)
  dock              dock?     @relation(fields: [dockFk], references: [code], onDelete: Restrict, map: "routesMonitor_FK_1")
  beach             beach?    @relation(fields: [beachFk], references: [code], onDelete: Restrict, map: "routesMonitor_FK_2")

  @@index([bufferFk], map: "routesMonitor_FK")
  @@index([dockFk], map: "routesMonitor_FK_1")
  @@index([beachFk], map: "routesMonitor_FK_2")
}

model sale {
  id                                         Int                @id @default(autoincrement())
  itemFk                                     Int
  ticketFk                                   Int
  concept                                    String?            @db.VarChar(50)
  quantity                                   Decimal            @default(0.00) @db.Decimal(10, 2)
  originalQuantity                           Float?
  price                                      Decimal?           @default(0.00) @db.Decimal(10, 2)
  discount                                   Int                @default(0) @db.UnsignedTinyInt
  priceFixed                                 Decimal            @default(0.00) @db.Decimal(10, 2)
  reserved                                   Boolean            @default(false)
  isPicked                                   Boolean            @default(false)
  isPriceFixed                               Boolean            @default(false)
  created                                    DateTime           @default(now()) @db.Timestamp(0)
  isAdded                                    Boolean            @default(false)
  claimBeginning                             claimBeginning[]
  claimEnd                                   claimEnd[]
  itemShelvingSale                           itemShelvingSale[]
  ticket                                     ticket             @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "movement_ticket_id")
  item                                       item               @relation(fields: [itemFk], references: [id], map: "sale_ibfk_1")
  saleBuy                                    saleBuy?
  saleCloned_saleCloned_saleClonedFkTosale   saleCloned?        @relation("saleCloned_saleClonedFkTosale")
  saleCloned_saleCloned_saleOriginalFkTosale saleCloned[]       @relation("saleCloned_saleOriginalFkTosale")
  saleComponent                              saleComponent[]
  saleGroupDetail                            saleGroupDetail[]
  saleMistake                                saleMistake[]
  saleState                                  saleState?
  saleTracking                               saleTracking[]
  ticketRequest                              ticketRequest?

  @@index([ticketFk], map: "Id_Ticket")
  @@index([itemFk, ticketFk], map: "itemFk_ticketFk")
}

model saleBuy {
  saleFk   Int      @id
  buyFk    Int
  created  DateTime @default(now()) @db.Timestamp(0)
  workerFk Int?
  buy      buy      @relation(fields: [buyFk], references: [id], onDelete: Cascade, map: "saleBuy_FK")
  sale     sale     @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "saleBuy_FK_1")

  @@index([buyFk], map: "saleBuy_FK")
}

model saleCloned {
  saleClonedFk                         Int  @id
  saleOriginalFk                       Int
  sale_saleCloned_saleClonedFkTosale   sale @relation("saleCloned_saleClonedFkTosale", fields: [saleClonedFk], references: [id], onDelete: Cascade, map: "saleClonedFk_fk2")
  sale_saleCloned_saleOriginalFkTosale sale @relation("saleCloned_saleOriginalFkTosale", fields: [saleOriginalFk], references: [id], onDelete: Cascade, map: "saleOriginalFk_fk1")

  @@index([saleOriginalFk], map: "saleOriginalFk_idx")
}

model saleComponent {
  saleFk      Int
  componentFk Int
  value       Float
  isGreuge    Int       @default(0) @db.TinyInt
  created     DateTime? @default(now()) @db.Timestamp(0)
  sale        sale      @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "mc_fk1")
  component   component @relation(fields: [componentFk], references: [id], onDelete: Cascade, map: "mc_fk2")

  @@id([saleFk, componentFk])
  @@index([componentFk], map: "fk_mov_comp_idx")
}

model saleGoal {
  id               Int      @id @default(autoincrement())
  month            Int?
  year             Int?
  rank             Int      @db.SmallInt
  walletWeightFrom Int
  walletWeightTo   Int?
  goal             Decimal? @db.Decimal(10, 2)
  goalType         Int?     @db.SmallInt
}

model saleGroup {
  id                        Int                         @id @default(autoincrement())
  created                   DateTime                    @default(now()) @db.Timestamp(0)
  userFk                    Int?
  parkingFk                 Int?
  sectorFk                  Int?
  saleGroupDetail           saleGroupDetail[]
  sectorCollectionSaleGroup sectorCollectionSaleGroup[]
}

model saleGroupDetail {
  id          Int       @id @default(autoincrement())
  created     DateTime  @default(now()) @db.Timestamp(0)
  saleFk      Int
  saleGroupFk Int
  sale        sale      @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "saleGroupDetail_FK")
  saleGroup   saleGroup @relation(fields: [saleGroupFk], references: [id], onDelete: Cascade, map: "saleGroupDetail_FK_1")

  @@unique([saleFk, saleGroupFk], map: "saleGroupDetail_UN")
  @@index([saleGroupFk], map: "saleGroupDetail_FK_1")
}

model saleMistake {
  id          Int         @id @default(autoincrement())
  saleFk      Int
  userFk      Int         @db.UnsignedInt
  typeFk      Int
  created     DateTime    @default(now()) @db.Timestamp(0)
  sale        sale        @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "saleMistake_fk1")
  worker      worker      @relation(fields: [userFk], references: [id], onDelete: Cascade, map: "saleMistake_fk2")
  mistakeType mistakeType @relation(fields: [typeFk], references: [id], onDelete: Cascade, map: "saleMistake_fk3")

  @@index([saleFk], map: "saleMistake_fk1_idx")
  @@index([userFk], map: "saleMistake_fk2_idx")
  @@index([typeFk], map: "saleMistake_fk3_idx")
}

model saleState {
  saleFk  Int   @id
  stateFk Int   @db.UnsignedTinyInt
  sale    sale  @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "saleState_fk1")
  state   state @relation(fields: [stateFk], references: [id], onDelete: Cascade, map: "saleState_fk2")

  @@index([stateFk], map: "saleState_fk2_idx")
}

model saleTracking {
  saleFk              Int
  isChecked           Int                  @default(0) @db.UnsignedTinyInt
  created             DateTime             @default(now()) @db.Timestamp(0)
  originalQuantity    Float?
  workerFk            Int
  actionFk            Int?
  id                  Int                  @id @default(autoincrement())
  stateFk             Int                  @db.UnsignedTinyInt
  state               state                @relation(fields: [stateFk], references: [id], map: "fgnStateFk")
  sale                sale                 @relation(fields: [saleFk], references: [id], onDelete: Cascade, map: "saleTracking_FK")
  ticketTrackingState ticketTrackingState? @relation(fields: [actionFk], references: [id], onDelete: Restrict, map: "saleTracking_FK_1")

  @@unique([saleFk, workerFk, actionFk, stateFk], map: "saleTracking_UN")
  @@index([saleFk], map: "Id_Movimiento")
  @@index([stateFk], map: "fgnStateFk_idx")
  @@index([actionFk], map: "saleTracking_fk2_idx")
  @@index([created], map: "saleTracking_idx5")
}

model salesPersonGoal {
  salesPersonName String @id @default("") @db.VarChar(100)
  month           Int?
  year            Int?
  goal            Int?
}

model sample {
  id                Int     @id @default(autoincrement()) @db.UnsignedInt
  code              String  @db.VarChar(25)
  description       String  @db.VarChar(105)
  isVisible         Boolean @default(true)
  hasCompany        Boolean @default(false)
  hasPreview        Boolean @default(true)
  datepickerEnabled Boolean @default(false)
  model             String? @db.VarChar(25)
}

model sector {
  id                          Int                   @unique@default(autoincrement())
  description                 String                @db.VarChar(45)
  warehouseFk                 Int                   @default(1) @db.UnsignedSmallInt
  isPreviousPreparedByPacking Int                   @default(1) @db.TinyInt
  code                        String?               @unique(map: "code_UNIQUE") @db.VarChar(15)
  isPreviousPrepared          Boolean               @default(false)
  isPackagingArea             Boolean               @default(false)
  reportFk                    Int?                  @db.UnsignedTinyInt
  sonFk                       Int?
  isMain                      Boolean               @default(false)
  itemPackingTypeFk           String?               @db.VarChar(1)
  workerFk                    Int?
  printerFk                   Int?                  @db.UnsignedTinyInt
  isHideForPickers            Boolean               @default(false)
  isReserve                   Boolean               @default(false)
  collection                  collection[]
  itemPlacementSupply         itemPlacementSupply[]
  parking                     parking[]
  printer                     printer[]
  sector                      sector?               @relation("sectorTosector", fields: [sonFk, warehouseFk], references: [id, warehouseFk], map: "sector_FK")
  other_sector                sector[]              @relation("sectorTosector")
  warehouse                   warehouse             @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, map: "sector_fk1")
  report                      report?               @relation(fields: [reportFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sector_report")
  sectorCollection            sectorCollection[]

  @@id([id, warehouseFk])
  @@index([sonFk, warehouseFk], map: "sector_FK")
  @@index([warehouseFk], map: "sector_fk1_idx")
  @@index([reportFk], map: "sector_report")
}

model sectorCollection {
  id                        Int                         @id @default(autoincrement())
  created                   DateTime                    @default(now()) @db.Timestamp(0)
  userFk                    Int                         @db.UnsignedInt
  sectorFk                  Int
  sector                    sector                      @relation(fields: [sectorFk], references: [id], onDelete: Cascade, map: "sectorCollection_FK_1")
  sectorCollectionSaleGroup sectorCollectionSaleGroup[]

  @@index([userFk], map: "sectorCollection_FK")
  @@index([sectorFk], map: "sectorCollection_FK_2")
}

model sectorCollectionSaleGroup {
  id                 Int              @id @default(autoincrement())
  created            DateTime         @default(now()) @db.Timestamp(0)
  sectorCollectionFk Int
  saleGroupFk        Int
  sectorCollection   sectorCollection @relation(fields: [sectorCollectionFk], references: [id], onDelete: Cascade, map: "sectorCollectionSaleGroup_FK")
  saleGroup          saleGroup        @relation(fields: [saleGroupFk], references: [id], onDelete: Cascade, map: "sectorCollectionSaleGroup_FK_1")

  @@unique([sectorCollectionFk, saleGroupFk], map: "sectorCollectionSaleGroup_UN")
  @@index([saleGroupFk], map: "sectorCollectionSaleGroup_FK_1")
}

model sectorProductivity {
  id          Int       @id @default(autoincrement())
  workerFk    Int?
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  sector      String?   @db.VarChar(50)
  ticketCount Int?
  saleCount   Int?
  error       Int?
  volume      Decimal?  @db.Decimal(10, 6)
  hourWorked  Decimal?  @db.Decimal(10, 2)
  dated       DateTime? @db.Date
}

model sharingCart {
  id                                          Int      @id @default(autoincrement())
  workerFk                                    Int      @db.UnsignedInt
  started                                     DateTime @db.Date
  ended                                       DateTime @db.Date
  workerSubstitute                            Int      @db.UnsignedInt
  created                                     DateTime @default(now()) @db.DateTime(0)
  worker_sharingCart_workerSubstituteToworker worker   @relation("sharingCart_workerSubstituteToworker", fields: [workerSubstitute], references: [id], map: "Suplent_key")
  worker_sharingCart_workerFkToworker         worker   @relation("sharingCart_workerFkToworker", fields: [workerFk], references: [id], map: "Trabajador_key")

  @@unique([workerFk, started, ended, workerSubstitute], map: "workerFk_UNIQUE")
  @@index([workerSubstitute], map: "Suplent")
}

model sharingCartDaily {
  id                                           Int      @id @default(autoincrement())
  ownerFk                                      Int      @db.UnsignedInt
  substituteFk                                 Int      @db.UnsignedInt
  dated                                        DateTime @db.Date
  created                                      DateTime @default(now()) @db.DateTime(0)
  worker_sharingCartDaily_substituteFkToworker worker   @relation("sharingCartDaily_substituteFkToworker", fields: [substituteFk], references: [id], onDelete: Cascade, map: "sharingCartDailySubstitute")
  worker_sharingCartDaily_ownerFkToworker      worker   @relation("sharingCartDaily_ownerFkToworker", fields: [ownerFk], references: [id], onDelete: Cascade, map: "sharingCartDailyWorker")

  @@unique([ownerFk, dated], map: "sharingCartDailyWorker_idx")
  @@index([substituteFk], map: "sharingCartDailySubstitute_idx")
}

model sharingClient {
  id       Int      @id @default(autoincrement())
  workerFk Int      @db.UnsignedInt
  started  DateTime @db.Date
  ended    DateTime @db.Date
  clientFk Int
  client   client   @relation(fields: [clientFk], references: [id], map: "Clients_key")
  worker   worker   @relation(fields: [workerFk], references: [id], map: "Trabajadores_key")

  @@index([clientFk], map: "Client")
  @@index([workerFk], map: "Worker")
}

model shelving {
  id             Int              @id @default(autoincrement())
  code           String           @unique(map: "shelving_UN") @db.VarChar(10)
  parkingFk      Int?
  isPrinted      Int              @default(0) @db.TinyInt
  priority       Int              @default(0)
  parked         DateTime         @default(now()) @db.DateTime(0)
  userFk         Int?             @db.UnsignedInt
  isSpam         Boolean          @default(false)
  isRecyclable   Boolean          @default(true)
  itemShelving   itemShelving[]
  parking        parking?         @relation(fields: [parkingFk], references: [id], map: "shelving_fk1")
  worker         worker?          @relation(fields: [userFk], references: [id], map: "shelving_fk2")
  smartTag       smartTag[]
  workerShelving workerShelving[]

  @@index([parkingFk], map: "shelving_fk1_idx")
  @@index([userFk], map: "shelving_fk2_idx")
}

model shelvingLog {
  id                Int       @id @default(autoincrement())
  originFk          Int
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model silexACL {
  id     Int    @id @default(autoincrement())
  module String @db.VarChar(50)
  method String @db.VarChar(50)
  role   String @db.VarChar(20)

  @@unique([module, method], map: "module_UNIQUE")
}

model sinister {
  id             Int              @id
  supplierFk     Int
  clientFk       Int
  amount         Decimal          @db.Decimal(10, 2)
  created        DateTime         @default(now()) @db.Timestamp(0)
  insureRate     Decimal          @default(0.75) @db.Decimal(3, 2)
  isBooked       Int              @default(0) @db.TinyInt
  workerFk       Int              @db.UnsignedInt
  companyFk      Int              @db.UnsignedSmallInt
  supplier       supplier         @relation(fields: [supplierFk], references: [id], map: "sinister_fk1")
  client         client           @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "sinister_fk2")
  worker         worker           @relation(fields: [workerFk], references: [id], map: "sinister_fk3")
  company        company          @relation(fields: [companyFk], references: [id], onDelete: Cascade, map: "sinister_fk4")
  sinisterDetail sinisterDetail[]

  @@index([supplierFk], map: "sinister_fk1_idx")
  @@index([clientFk], map: "sinister_fk2_idx")
  @@index([workerFk], map: "sinister_fk3_idx")
  @@index([companyFk], map: "sinister_fk4_idx")
}

model sinisterDetail {
  id            Int         @id
  sinisterFk    Int
  created       DateTime    @default(now()) @db.Timestamp(0)
  amountIn      Decimal?    @db.Decimal(10, 2)
  amountOut     Decimal?    @db.Decimal(10, 2)
  isConciliated Boolean     @default(false)
  workerFk      Int         @db.UnsignedInt
  bankFk        Int?
  sinister      sinister    @relation(fields: [sinisterFk], references: [id], onDelete: Cascade, map: "sinisterDetail_fk1")
  worker        worker      @relation(fields: [workerFk], references: [id], map: "sinisterDetail_fk2")
  accounting    accounting? @relation(fields: [bankFk], references: [id], onDelete: Restrict, map: "sinisterDetail_fk3")

  @@index([sinisterFk], map: "sinisterDetail_fk1_idx")
  @@index([workerFk], map: "sinisterDetail_fk2_idx")
  @@index([bankFk], map: "sinisterDetail_fk3_idx")
}

model smartTag {
  code             String             @id @db.VarChar(12)
  shelvingFk       String?            @db.VarChar(10)
  level            Int?
  shelving         shelving?          @relation(fields: [shelvingFk], references: [code], onDelete: Restrict, map: "smartTag_FK")
  ticketCollection ticketCollection[]

  @@index([shelvingFk], map: "smartTag_shelving_fk")
}

model sms {
  id          Int        @id @default(autoincrement()) @db.UnsignedMediumInt
  senderFk    Int        @db.UnsignedInt
  sender      String     @default("693474205") @db.VarChar(15)
  destination String     @db.VarChar(15)
  message     String     @db.VarChar(160)
  statusCode  Int?       @default(0) @db.SmallInt
  status      String?    @default("OK") @db.VarChar(255)
  created     DateTime   @default(now()) @db.Timestamp(0)
  ticketSms   ticketSms?

  @@index([senderFk], map: "sms_FK")
}

model smsConfig {
  id     Int     @id @default(autoincrement()) @db.UnsignedInt
  uri    String  @db.VarChar(255)
  title  String  @db.VarChar(50)
  apiKey String? @db.VarChar(50)
}

model solunionCAP {
  creditInsurance                                              Int
  dateStart                                                    DateTime        @db.Date
  dateEnd                                                      DateTime        @db.Date
  dateLeaving                                                  DateTime?       @db.Date
  creditInsurance_solunionCAP_creditInsuranceTocreditInsurance creditInsurance @relation("solunionCAP_creditInsuranceTocreditInsurance", fields: [creditInsurance], references: [id], onDelete: Cascade, map: "solunionCAP")

  @@id([creditInsurance, dateStart])
  @@index([dateLeaving], map: "solunionCAPdateLeavingIdx")
}

model sorter {
  id            Int      @id @default(0)
  created       DateTime @db.DateTime(0)
  routeFk       Int      @db.UnsignedInt
  ticketFk      Int
  isBox         Int?     @default(1)
  itemFk        Int?
  width         Decimal? @default(0.00) @db.Decimal(10, 2)
  depth         Decimal? @default(0.00) @db.Decimal(10, 2)
  height        Decimal? @default(0.00) @db.Decimal(10, 2)
  warehouseFk   Int      @default(1) @db.UnsignedSmallInt
  weight        Decimal  @default(0.00) @db.Decimal(5, 2)
  buildingOrder Int      @default(0)
  ETD           DateTime @default(dbgenerated("('23:59:00')")) @db.Time(0)
  palletOrder   Int?
  lungGrow      Int?     @default(0)
}

model specialLabels {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(100)
  reportName  String  @db.VarChar(100)
  isVisible   Boolean @default(false)
  image       Bytes?  @db.Blob
}

model specialPrice {
  id       Int    @id @default(autoincrement())
  clientFk Int    @default(0)
  itemFk   Int    @default(0)
  value    Float  @default(0)
  item     item   @relation(fields: [itemFk], references: [id], map: "sp_article_id")
  client   client @relation(fields: [clientFk], references: [id], map: "sp_customer_id")

  @@unique([clientFk, itemFk], map: "Id_Cliente_2")
  @@index([itemFk], map: "Id_Article")
  @@index([clientFk], map: "Id_Cliente")
}

model specie {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "specie_UN") @db.VarChar(100)
  itemBotanical     itemBotanical[]
  specieGeoInvasive specieGeoInvasive[]
}

model specieGeoInvasive {
  id          Int     @id @default(autoincrement())
  genusFk     Int
  specieFk    Int
  zoneGeofk   Int
  isForbidden Boolean @default(true)
  genus       genus   @relation(fields: [genusFk], references: [id], map: "specieGeoInvasive_FK")
  specie      specie  @relation(fields: [specieFk], references: [id], map: "specieGeoInvasive_FK_1")
  zoneGeo     zoneGeo @relation(fields: [zoneGeofk], references: [id], map: "specieGeoInvasive_FK_2")

  @@index([genusFk], map: "specieGeoInvasive_FK")
  @@index([specieFk], map: "specieGeoInvasive_FK_1")
  @@index([zoneGeofk], map: "specieGeoInvasive_FK_2")
}

model splitFilter {
  id         Int       @id @default(autoincrement())
  autonomyFk Int?      @unique(map: "splitFilter_UN")
  clientFk   Int?      @unique(map: "splitFilter_UN1")
  nickname   String?   @db.VarChar(100)
  autonomy   autonomy? @relation(fields: [autonomyFk], references: [id], onDelete: Cascade, map: "splitFilter_FK")
  client     client?   @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "splitFilter_FK_1")

  @@index([autonomyFk], map: "splitFilter_FK")
  @@index([clientFk], map: "splitFilter_FK_1")
}

model starredModule {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  workerFk Int    @db.UnsignedInt
  moduleFk String @db.VarChar(45)
  position Int
  worker   worker @relation(fields: [workerFk], references: [id], map: "starred_workerFk")

  @@index([moduleFk], map: "starred_moduleFk")
  @@index([workerFk], map: "starred_workerFk")
}

model state {
  id                                      Int              @id @default(autoincrement()) @db.UnsignedTinyInt
  name                                    String           @db.VarChar(20)
  order                                   Int?             @db.UnsignedTinyInt
  alertLevel                              Int              @default(0)
  code                                    String           @unique(map: "code_UNIQUE") @db.VarChar(45)
  sectorProdPriority                      Int?             @db.TinyInt
  nextStateFk                             Int              @db.UnsignedTinyInt
  isPreviousPreparable                    Boolean          @default(false)
  isPicked                                Boolean          @default(false)
  isPreparable                            Boolean          @default(false)
  semaphore                               Int              @default(0)
  isPrintable                             Int              @default(0) @db.TinyInt
  isOK                                    Int              @default(0) @db.TinyInt
  graphCategory                           Int              @default(0)
  isNotValidated                          Boolean?         @default(false)
  classColor                              String?          @db.VarChar(12)
  collection                              collection[]
  saleState                               saleState[]
  saleTracking                            saleTracking[]
  state                                   state            @relation("stateTostate", fields: [nextStateFk], references: [id], map: "state_FK")
  other_state                             state[]          @relation("stateTostate")
  alertLevel_state_alertLevelToalertLevel alertLevel       @relation("state_alertLevelToalertLevel", fields: [alertLevel], references: [id], onUpdate: Restrict, map: "state_ibfk_1")
  stateI18n                               stateI18n[]
  ticketTracking                          ticketTracking[]

  @@index([alertLevel], map: "alertLevel")
  @@index([nextStateFk], map: "state_FK")
  @@index([semaphore], map: "state_id3")
}

model stateI18n {
  stateFk Int    @db.UnsignedTinyInt
  lang    String @db.Char(2)
  name    String @db.VarChar(255)
  state   state  @relation(fields: [stateFk], references: [id], onUpdate: Restrict, map: "stateI18n_state_id")

  @@id([stateFk, lang])
}

model stockBuyed {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user         Int?      @db.UnsignedInt
  buyed        Decimal?  @db.Decimal(10, 2)
  date         DateTime? @db.Date
  creationDate DateTime? @default(now()) @db.Timestamp(0)
  reserved     Decimal?  @db.Decimal(10, 2)
  requested    Decimal?  @db.Decimal(10, 2)
  description  String?   @db.VarChar(100)

  @@index([user])
}

model stowaway {
  id      Int      @id
  shipFk  Int
  created DateTime @default(now()) @db.Timestamp(0)
}

model supplier {
  id                             Int                  @id @default(autoincrement())
  name                           String?              @db.VarChar(50)
  account                        String?              @unique(map: "cuenta") @db.VarChar(10)
  street                         String?              @db.VarChar(50)
  city                           String?              @db.VarChar(50)
  provinceFk                     Int?                 @db.UnsignedSmallInt
  countryFk                      Int?                 @db.UnsignedMediumInt
  nif                            String?              @unique(map: "NIF") @db.VarChar(50)
  isOfficial                     Boolean              @default(true)
  isFarmer                       Boolean              @default(false)
  retAccount                     String?              @db.VarChar(10)
  phone                          String?              @db.VarChar(16)
  commission                     Float                @default(0) @db.Float
  nickname                       String?              @db.VarChar(45)
  payMethodFk                    Int?                 @db.UnsignedTinyInt
  payDay                         Int?                 @db.UnsignedTinyInt
  payDemFk                       Int                  @default(7) @db.UnsignedTinyInt
  created                        DateTime             @default(now()) @db.Timestamp(0)
  isSerious                      Boolean              @default(true)
  note                           String?              @db.Text
  postcodeFk                     Int?                 @db.UnsignedInt
  postCode                       String?              @db.Char(8)
  isActive                       Int                  @default(1) @db.TinyInt
  taxTypeSageFk                  Int?                 @db.SmallInt
  withholdingSageFk              Int?                 @db.SmallInt
  transactionTypeSageFk          Int?                 @db.TinyInt
  isTrucker                      Boolean              @default(false)
  workerFk                       Int?                 @db.UnsignedInt
  supplierActivityFk             String?              @db.VarChar(45)
  healthRegister                 String?              @db.VarChar(45)
  isPayMethodChecked             Int                  @default(0) @db.TinyInt
  awb_awb_transitoryFkTosupplier awb[]                @relation("awb_transitoryFkTosupplier")
  awb_awb_freightFkTosupplier    awb[]                @relation("awb_freightFkTosupplier")
  budget                         budget[]
  cmr                            cmr[]
  duaTax                         duaTax[]
  entry                          entry[]
  invoiceIn                      invoiceIn[]
  machine                        machine[]
  payment                        payment[]
  sinister                       sinister[]
  country                        country?             @relation(fields: [countryFk], references: [id], onDelete: Restrict, map: "Id_Pais")
  payDem                         payDem               @relation(fields: [payDemFk], references: [id], map: "pay_dem_id")
  payMethod                      payMethod?           @relation(fields: [payMethodFk], references: [id], onDelete: Restrict, map: "pay_met_id")
  province                       province?            @relation(fields: [provinceFk], references: [id], onDelete: Restrict, map: "province_id")
  worker                         worker?              @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "supplier_workerFk")
  supplierActivity               supplierActivity?    @relation(fields: [supplierActivityFk], references: [code], onDelete: Restrict, map: "suppplier_supplierActivityFk")
  supplierAccount                supplierAccount[]
  supplierAgencyTerm             supplierAgencyTerm[]
  supplierContact                supplierContact[]
  supplierExpense                supplierExpense[]
  supplierLog                    supplierLog[]
  travelClonedWeekly             travelClonedWeekly[]

  @@index([postCode], map: "codpos")
  @@index([countryFk], map: "pais_id")
  @@index([payDemFk], map: "pay_dem_id")
  @@index([payMethodFk], map: "pay_met_id")
  @@index([provinceFk], map: "province_id")
  @@index([taxTypeSageFk], map: "supplier_taxTypeFk_idx")
  @@index([transactionTypeSageFk], map: "supplier_transactionFk_idx")
  @@index([withholdingSageFk], map: "supplier_withholdingFk_idx")
  @@index([workerFk], map: "supplier_workerFk")
  @@index([supplierActivityFk], map: "suppplier_supplierActivityFk")
}

model supplierAccount {
  id           Int         @id @default(autoincrement()) @db.UnsignedMediumInt
  supplierFk   Int?
  iban         String?     @db.VarChar(30)
  office       String?     @db.VarChar(4)
  DC           String?     @db.VarChar(2)
  number       String?     @db.VarChar(10)
  description  String?     @db.VarChar(45)
  bankEntityFk Int?        @db.UnsignedInt
  bankFk       Int?
  beneficiary  String?     @db.VarChar(50)
  company      company[]
  supplier     supplier?   @relation(fields: [supplierFk], references: [id], onDelete: Restrict, map: "supplierAccount_FK")
  bankEntity   bankEntity? @relation(fields: [bankEntityFk], references: [id], onDelete: Restrict, map: "supplierAccount_FK_1")

  @@index([bankEntityFk], map: "fk_Proveedores_account_entity1_idx")
  @@index([bankFk], map: "fk_banco_prov_account_idx")
  @@index([supplierFk], map: "fk_proveedores_proveedores_account_idx")
}

model supplierActivity {
  code     String     @id @db.VarChar(45)
  name     String     @db.VarChar(45)
  supplier supplier[]
}

model supplierAddress {
  id         Int       @id @default(autoincrement())
  supplierFk Int?
  nickname   String?   @db.VarChar(40)
  street     String?   @db.VarChar(255)
  provinceFk Int?      @db.UnsignedSmallInt
  postalCode String?   @db.VarChar(10)
  city       String?   @db.VarChar(50)
  phone      String?   @db.VarChar(15)
  mobile     String?   @db.VarChar(15)
  province   province? @relation(fields: [provinceFk], references: [id], onDelete: Restrict, map: "supplierAddress_province_fk")

  @@index([provinceFk], map: "supplierAddress_province_fk")
}

model supplierAgencyTerm {
  agencyFk        Int       @id @db.UnsignedSmallInt
  supplierFk      Int?
  minimumPackages Int       @default(0)
  kmPrice         Decimal   @default(0.00) @db.Decimal(10, 2)
  packagePrice    Decimal   @default(0.00) @db.Decimal(10, 2)
  routePrice      Decimal?  @db.Decimal(10, 2)
  minimumKm       Int       @default(0)
  minimumM3       Decimal   @default(0.00) @db.Decimal(10, 2)
  m3Price         Decimal   @default(0.00) @db.Decimal(10, 2)
  agency          agency    @relation(fields: [agencyFk], references: [id], map: "agencyTerm_FK")
  supplier        supplier? @relation(fields: [supplierFk], references: [id], onDelete: Restrict, map: "agencyTerm_FK_1")

  @@index([supplierFk], map: "agencyTerm_FK_1")
}

model supplierContact {
  id          Int       @id @default(autoincrement())
  supplierFk  Int?
  phone       String?   @db.VarChar(16)
  mobile      String?   @db.VarChar(16)
  email       String?   @db.VarChar(255)
  observation String?   @db.Text
  name        String?   @db.VarChar(255)
  supplier    supplier? @relation(fields: [supplierFk], references: [id], onDelete: Cascade, map: "supplier_id")

  @@index([supplierFk], map: "supplier_id")
}

model supplierExpense {
  id            Int      @id @default(autoincrement()) @db.UnsignedInt
  dated         DateTime @db.Date
  supplierFk    Int
  currencyFk    Int      @default(2) @db.UnsignedTinyInt
  amount        Decimal  @default(0.00) @db.Decimal(10, 2)
  description   String?  @db.VarChar(50)
  companyFk     Int      @default(442) @db.UnsignedSmallInt
  dmsFk         Int?
  created       DateTime @default(now()) @db.Timestamp(0)
  isConciliated Boolean  @default(false)
  dueDated      DateTime @db.Date
  dms           dms?     @relation(fields: [dmsFk], references: [id], onDelete: Restrict, map: "gestdoc_fk")
  company       company  @relation(fields: [companyFk], references: [id], map: "pago_ibfk_1")
  currency      currency @relation(fields: [currencyFk], references: [id], map: "pago_moneda")
  supplier      supplier @relation(fields: [supplierFk], references: [id], map: "proveedor_pago")

  @@index([dueDated], map: "dueDatedIdx")
  @@index([companyFk], map: "empresa_id")
  @@index([dmsFk], map: "gestdoc_id")
  @@index([currencyFk], map: "id_moneda")
  @@index([supplierFk], map: "proveedor_pago")
  @@index([dated], map: "supplierExDated")
}

model supplierLog {
  id                Int       @id @default(autoincrement())
  originFk          Int
  userFk            Int       @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  supplier          supplier  @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "supplierLog_ibfk_1")

  @@index([originFk], map: "logSupplier_ibfk_1")
  @@index([userFk], map: "supplierLog_ibfk_2")
}

model tablet {
  uuid             String             @id @db.VarChar(100)
  name             String?            @db.VarChar(45)
  place            String?            @db.VarChar(45)
  macwifi          String?            @default("0") @db.VarChar(45)
  tabletDepartment tabletDepartment[]
}

model tabletDepartment {
  tabletFk     String     @db.VarChar(100)
  departmentFk Int
  department   department @relation(fields: [departmentFk], references: [id], onDelete: Cascade, map: "departmentFk")
  tablet       tablet     @relation(fields: [tabletFk], references: [uuid], onDelete: Cascade, map: "tablet_uuid")

  @@id([tabletFk, departmentFk])
  @@index([departmentFk], map: "departmentFk_idx")
}

model tag {
  id              Int               @id @default(autoincrement())
  code            String?           @db.VarChar(45)
  name            String            @db.VarChar(25)
  isFree          Boolean           @default(true)
  isQuantitatif   Int               @default(0) @db.TinyInt
  sourceTable     String?           @db.VarChar(255)
  unit            String?           @db.VarChar(45)
  ediTypeFk       String?           @unique(map: "tagEdiTypeFkIdx") @db.VarChar(3)
  overwrite       String?           @db.VarChar(45)
  itemTag         itemTag[]
  itemTypeTag     itemTypeTag[]
  tagAbbreviation tagAbbreviation[]

  @@unique([name, ediTypeFk], map: "tagNameIdx")
}

model tagAbbreviation {
  value        String @id @db.VarChar(20)
  abbreviation String @db.VarChar(10)
  tagFk        Int?
  tag          tag?   @relation(fields: [tagFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "tagAbbreviation_FK")

  @@index([tagFk], map: "tagAbbreviation_FK")
}

model tagI18n {
  tagFk Int    @db.UnsignedInt
  lang  String @db.Char(2)
  name  String @db.VarChar(255)

  @@id([tagFk, lang])
}

model taxArea {
  code                       String                       @id @db.VarChar(15)
  ClaveOperacionFactura      String?                      @db.VarChar(1)
  CodigoTransaccion          Int?
  bookingPlanner             bookingPlanner[]
  invoiceInSerial            invoiceInSerial[]
  invoiceInTaxBookingAccount invoiceInTaxBookingAccount[]
  invoiceOutSerial           invoiceOutSerial[]
}

model taxClass {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedTinyInt
  description                String                       @db.VarChar(30)
  code                       String                       @unique(map: "code_UNIQUE") @default("R") @db.VarChar(1)
  bookingPlanner             bookingPlanner[]
  duaTax                     duaTax[]
  intrastat                  intrastat[]
  invoiceInSage              invoiceInSage[]
  invoiceInTaxBookingAccount invoiceInTaxBookingAccount[]
  invoiceOutTaxConfig        invoiceOutTaxConfig[]
  itemTaxCountry             itemTaxCountry[]
  taxClassCode               taxClassCode[]
  ticketService              ticketService[]
}

model taxClassCode {
  taxClassFk Int      @db.UnsignedTinyInt
  effectived DateTime @db.Date
  taxCodeFk  Int      @db.UnsignedInt
  taxClass   taxClass @relation(fields: [taxClassFk], references: [id], map: "taxClassCode_ibfk_1")
  taxCode    taxCode  @relation(fields: [taxCodeFk], references: [id], map: "taxClassCode_ibfk_2")

  @@id([taxClassFk, effectived, taxCodeFk])
  @@index([taxCodeFk], map: "iva_codigo_id")
}

model taxCode {
  id               Int            @id @default(autoincrement()) @db.UnsignedInt
  dated            DateTime       @db.Date
  code             String         @db.VarChar(10)
  taxTypeFk        Int            @db.TinyInt
  rate             Decimal        @default(0.0) @db.Decimal(4, 1)
  equalizationTax  Decimal        @default(0.0) @db.Decimal(4, 1)
  type             String         @db.Char(1)
  link             Int?           @default(0) @db.UnsignedTinyInt
  isActive         Int            @default(1) @db.TinyInt
  updated          DateTime?      @default(now()) @db.Timestamp(0)
  transactionCode  String?        @db.VarChar(2)
  operationCode    String?        @db.VarChar(1)
  taxCode          Int?
  isIntracommunity Int?           @default(0) @db.TinyInt
  awb              awb[]
  taxClassCode     taxClassCode[]
  taxType          taxType        @relation(fields: [taxTypeFk], references: [id], onDelete: Cascade, map: "taxCode_ibfk_1")

  @@unique([dated, taxTypeFk, type, link], map: "taxCode_dated_IDX")
  @@index([code], map: "codigo")
  @@index([taxTypeFk], map: "iva_tipo_id")
  @@index([type], map: "tipo_index")
}

model taxType {
  id          Int       @id @default(autoincrement()) @db.TinyInt
  nickname    String    @db.VarChar(6)
  isAccrued   Int       @default(0) @db.TinyInt
  serial      String?   @db.Char(1)
  TIPOOPE     String    @default(" ") @db.VarChar(1)
  description String    @db.VarChar(100)
  countryFk   Int       @db.UnsignedMediumInt
  taxCode     taxCode[]
  country     country   @relation(fields: [countryFk], references: [id], onDelete: Cascade, map: "taxType_ibfk_1")

  @@index([countryFk], map: "Id_Pais")
  @@index([serial], map: "serie_id")
}

model temperature {
  code              String              @id @db.VarChar(10)
  description       String?             @db.Text
  name              String              @db.VarChar(10)
  itemType          itemType[]
  travelThermograph travelThermograph[]
}

model thermograph {
  id                String              @id @db.VarChar(45)
  model             thermograph_model
  travelThermograph travelThermograph[]
}

model ticket {
  id                                                 Int                 @id @default(autoincrement())
  clientFk                                           Int                 @default(0)
  warehouseFk                                        Int                 @default(1) @db.UnsignedSmallInt
  shipped                                            DateTime            @db.DateTime(0)
  nickname                                           String?             @db.VarChar(50)
  refFk                                              String?             @db.VarChar(20)
  addressFk                                          Int                 @default(0)
  workerFk                                           Int?
  observations                                       String?             @db.VarChar(255)
  isSigned                                           Boolean             @default(false)
  isLabeled                                          Boolean             @default(false)
  isPrinted                                          Boolean             @default(false)
  packages                                           Int?                @default(0) @db.UnsignedSmallInt
  location                                           String?             @db.VarChar(15)
  hour                                               Int?                @default(0)
  created                                            DateTime            @default(now()) @db.Timestamp(0)
  isBlocked                                          Boolean             @default(true)
  solution                                           String?             @db.VarChar(5)
  routeFk                                            Int?                @db.UnsignedInt
  priority                                           Int?                @db.UnsignedTinyInt
  hasPriority                                        Boolean             @default(true)
  companyFk                                          Int                 @default(442) @db.UnsignedSmallInt
  agencyModeFk                                       Int?
  landed                                             DateTime?           @db.Date
  isBoxed                                            Int                 @default(0) @db.TinyInt
  isDeleted                                          Int                 @default(0) @db.TinyInt
  zoneFk                                             Int?
  zonePrice                                          Decimal?            @db.Decimal(10, 2)
  zoneBonus                                          Decimal?            @db.Decimal(10, 2)
  totalWithVat                                       Decimal?            @db.Decimal(10, 2)
  totalWithoutVat                                    Decimal?            @db.Decimal(10, 2)
  weight                                             Decimal?            @db.Decimal(10, 2)
  autoRadioLogCall                                   autoRadioLogCall[]
  claim                                              claim[]
  cmr                                                cmr[]
  dmsRecover                                         dmsRecover[]
  expedition                                         expedition[]
  greuge                                             greuge[]
  orderTicket                                        orderTicket[]
  sale                                               sale[]
  invoiceOut                                         invoiceOut?         @relation(fields: [refFk], references: [ref], onDelete: Restrict, map: "ticket_FK")
  client                                             client              @relation(fields: [clientFk], references: [id], map: "ticket_customer_id")
  warehouse                                          warehouse           @relation(fields: [warehouseFk], references: [id], map: "ticket_ibfk_1")
  company                                            company             @relation(fields: [companyFk], references: [id], map: "ticket_ibfk_5")
  address                                            address             @relation(fields: [addressFk], references: [id], map: "ticket_ibfk_6")
  agencyMode                                         agencyMode?         @relation(fields: [agencyModeFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ticket_ibfk_8")
  route                                              route?              @relation(fields: [routeFk], references: [id], map: "ticket_ibfk_9")
  zone                                               zone?               @relation(fields: [zoneFk], references: [id], onDelete: Restrict, map: "tickets_zone_fk")
  ticketCollection                                   ticketCollection[]
  ticketDms                                          ticketDms[]
  ticketLastState                                    ticketLastState?
  ticketLog                                          ticketLog[]
  ticketObservation                                  ticketObservation[]
  ticketPackage_ticketPackage_ticketToticket         ticketPackage?      @relation("ticketPackage_ticketToticket")
  ticketPackaging                                    ticketPackaging[]
  ticketParking                                      ticketParking?
  ticketRefund_ticketRefund_refundTicketFkToticket   ticketRefund[]      @relation("ticketRefund_refundTicketFkToticket")
  ticketRefund_ticketRefund_originalTicketFkToticket ticketRefund[]      @relation("ticketRefund_originalTicketFkToticket")
  ticketRequest                                      ticketRequest[]
  ticketService                                      ticketService[]
  ticketSms                                          ticketSms[]
  ticketTracking                                     ticketTracking[]
  ticketTrolley_ticketTrolley_ticketToticket         ticketTrolley?      @relation("ticketTrolley_ticketToticket")
  ticketWeekly                                       ticketWeekly?

  @@index([refFk], map: "Factura")
  @@index([shipped, clientFk], map: "Fecha")
  @@index([agencyModeFk], map: "Id_Agencia")
  @@index([clientFk], map: "Id_Cliente")
  @@index([addressFk], map: "Id_Consigna")
  @@index([routeFk], map: "Id_Ruta")
  @@index([workerFk], map: "Id_Trabajador")
  @@index([companyFk], map: "empresa_id")
  @@index([zoneFk], map: "tickets_zone_fk_idx")
  @@index([warehouseFk, shipped], map: "warehouse_date")
  @@index([warehouseFk], map: "warehouse_id")
}

model ticketCollection {
  id           Int        @id @default(autoincrement())
  ticketFk     Int
  collectionFk Int
  created      DateTime   @default(now()) @db.Timestamp(0)
  level        Int?
  wagon        Int        @default(0)
  smartTagFk   String?    @db.VarChar(12)
  usedShelves  Int?
  itemCount    Int?
  liters       Int?
  smartTag     smartTag?  @relation(fields: [smartTagFk], references: [code], onDelete: Restrict, map: "ticketCollection_FK")
  collection   collection @relation(fields: [collectionFk], references: [id], onDelete: Cascade, map: "ticketCollection_fk1")
  ticket       ticket     @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "ticketCollection_fk2")

  @@unique([ticketFk, collectionFk], map: "ticketCollection_UN")
  @@index([created], map: "ticketCollection_created_IDX")
  @@index([collectionFk], map: "ticketCollection_fk1_idx")
  @@index([ticketFk], map: "ticketCollection_fk2_idx")
  @@index([smartTagFk], map: "ticketCollection_smartTagFk_IDX")
}

model ticketConfig {
  id           Int  @id @default(autoincrement())
  scopeDays    Int? @db.TinyInt
  pickingDelay Int  @default(10)
}

model ticketDms {
  ticketFk Int
  dmsFk    Int
  dms      dms    @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "ticketDms_dmsFk")
  ticket   ticket @relation(fields: [ticketFk], references: [id], map: "ticketDms_ticketFk")

  @@id([ticketFk, dmsFk])
  @@index([dmsFk], map: "gestdoc_id")
}

model ticketDocumentation {
  ticketFk Int @id
}

model ticketDown {
  ticketFk                 Int
  created                  DateTime                 @default(now()) @db.Timestamp(0)
  selected                 Int                      @default(0)
  collectionFk             Int
  id                       Int                      @id @default(autoincrement())
  collection               collection               @relation(fields: [collectionFk], references: [id], onDelete: Cascade, map: "ticketDown_FK")
  ticketDown_SelectionType ticketDown_SelectionType @relation(fields: [selected], references: [id], onDelete: Cascade, map: "ticketDown_fk1")

  @@index([created], map: "created_idx")
  @@index([selected], map: "selected_idx")
  @@index([collectionFk], map: "ticketDown_FK")
}

model ticketDown_SelectionType {
  id          Int          @id
  description String       @unique(map: "description_UNIQUE") @db.VarChar(45)
  ticketDown  ticketDown[]
}

model ticketLastState {
  ticketFk         Int            @id @default(0)
  ticketTrackingFk Int
  name             String         @db.VarChar(15)
  ticket           ticket         @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "Id_Ticket")
  ticketTracking   ticketTracking @relation(fields: [ticketFk, ticketTrackingFk], references: [ticketFk, id], onDelete: Cascade, map: "double_foreign")

  @@index([ticketFk, ticketTrackingFk], map: "double_foreign")
  @@unique([ticketFk, ticketTrackingFk])

}

model ticketLog {
  id                Int       @id @default(autoincrement())
  originFk          Int
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  ticket            ticket    @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "ticketLog_ibfk_1")

  @@index([originFk], map: "logTicketoriginFk")
  @@index([userFk], map: "logTicketuserFk")
}

model ticketObservation {
  id                Int             @id @default(autoincrement()) @db.UnsignedMediumInt
  ticketFk          Int
  observationTypeFk Int             @db.UnsignedTinyInt
  description       String          @db.Text
  ticket            ticket          @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "ticketObservation_ibfk_1")
  observationType   observationType @relation(fields: [observationTypeFk], references: [id], map: "ticketObservation_ibfk_2")

  @@unique([ticketFk, observationTypeFk], map: "Id_Ticket")
  @@index([observationTypeFk], map: "observation_type_id")
}

model ticketPackage {
  ticket                              Int    @id
  counter                             Int    @default(0) @db.UnsignedInt
  ticket_ticketPackage_ticketToticket ticket @relation("ticketPackage_ticketToticket", fields: [ticket], references: [id], onDelete: Cascade, map: "ticketPackage_ticketFk")
}

model ticketPackaging {
  id          Int       @id @default(autoincrement())
  ticketFk    Int
  packagingFk String    @db.VarChar(10)
  quantity    Int?      @default(0)
  created     DateTime  @default(now()) @db.Timestamp(0)
  pvp         Float?
  workerFk    Int?      @db.UnsignedInt
  ticket      ticket    @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "ticketPackaging_fk1")
  packaging   packaging @relation(fields: [packagingFk], references: [id], map: "ticketPackaging_fk2")
  worker      worker?   @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "ticketPackaging_fk3")

  @@index([ticketFk], map: "ticketPackaging_fk1_idx")
  @@index([packagingFk], map: "ticketPackaging_fk2_idx")
  @@index([workerFk], map: "ticketPackaging_fk3_idx")
}

model ticketPackagingStartingStock {
  clientFk     Int
  packagingFk  String    @db.VarChar(10)
  itemFk       Int
  sent         Int?
  returned     Int?
  isForgetable Boolean   @default(false)
  client       client    @relation(fields: [clientFk], references: [id], onDelete: Cascade, map: "ticketPackagingStartingStock_fk1")
  packaging    packaging @relation(fields: [packagingFk], references: [id], onDelete: Cascade, map: "ticketPackagingStartingStock_fk2")
  item         item      @relation(fields: [itemFk], references: [id], onDelete: Cascade, map: "ticketPackagingStartingStock_fk3")

  @@id([clientFk, packagingFk])
  @@index([packagingFk], map: "ticketPackagingStartingStock_fk2_idx")
  @@index([itemFk], map: "ticketPackagingStartingStock_fk3_idx")
}

model ticketParking {
  id        Int      @id @default(autoincrement())
  ticketFk  Int      @unique(map: "ticketFk_UNIQUE")
  parkingFk Int
  created   DateTime @default(now()) @db.Timestamp(0)
  workerFk  Int?
  ticket    ticket   @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "ticketParking_fk1")
  parking   parking  @relation(fields: [parkingFk], references: [id], map: "ticketParking_fk2")

  @@unique([ticketFk, parkingFk], map: "ticketParking_idx1")
  @@index([parkingFk], map: "ticketParking_fk1_idx")
}

model ticketRecalc {
  id       Int @id @default(autoincrement())
  ticketFk Int

  @@index([ticketFk], map: "ticketRecalc_ibfk_1")
}

model ticketRefund {
  id                                           Int    @id @default(autoincrement())
  refundTicketFk                               Int
  originalTicketFk                             Int
  ticket_ticketRefund_refundTicketFkToticket   ticket @relation("ticketRefund_refundTicketFkToticket", fields: [refundTicketFk], references: [id], onDelete: Cascade, map: "ticketRefund_FK")
  ticket_ticketRefund_originalTicketFkToticket ticket @relation("ticketRefund_originalTicketFkToticket", fields: [originalTicketFk], references: [id], map: "ticketRefund_FK_1")

  @@index([refundTicketFk], map: "ticketRefund_FK")
  @@index([originalTicketFk], map: "ticketRefund_FK_1")
}

model ticketRequest {
  id                                       Int       @id @default(autoincrement())
  description                              String?   @db.VarChar(255)
  ordered                                  DateTime? @db.DateTime(0)
  shipped                                  DateTime? @db.DateTime(0)
  salesPersonCode                          String?   @db.VarChar(3)
  buyerCode                                String    @default("NOE") @db.VarChar(3)
  quantity                                 Int?
  price                                    Float?
  itemFk                                   Float?
  clientFk                                 Int?
  response                                 String?   @db.LongText
  total                                    Int?
  buyed                                    DateTime? @db.DateTime(0)
  saleFk                                   Int?      @unique(map: "Id_Movimiento_UNIQUE")
  created                                  DateTime? @default(now()) @db.Timestamp(0)
  isOk                                     Boolean?
  requesterFk                              Int?      @db.UnsignedInt
  attenderFk                               Int?      @db.UnsignedInt
  ticketFk                                 Int?
  sale                                     sale?     @relation(fields: [saleFk], references: [id], map: "fgbMovimiento")
  worker_ticketRequest_attenderFkToworker  worker?   @relation("ticketRequest_attenderFkToworker", fields: [attenderFk], references: [id], onDelete: Restrict, map: "fgnAtender")
  worker_ticketRequest_requesterFkToworker worker?   @relation("ticketRequest_requesterFkToworker", fields: [requesterFk], references: [id], onDelete: Restrict, map: "fgnRequester")
  ticket                                   ticket?   @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "fgnTicket")

  @@index([itemFk], map: "Id_ARTICLE")
  @@index([clientFk], map: "Id_CLIENTE")
  @@index([buyerCode], map: "Id_Comprador")
  @@index([saleFk], map: "Id_Movimiento")
  @@index([salesPersonCode], map: "Id_Vendedor")
  @@index([attenderFk], map: "fgnAtender_idx")
  @@index([requesterFk], map: "fgnRequester_idx")
  @@index([ticketFk], map: "fgnTicket_idx")
}

model ticketService {
  id                  Int               @id @default(autoincrement())
  description         String?           @db.VarChar(45)
  quantity            Int               @default(0)
  price               Decimal           @default(0.00) @db.Decimal(10, 2)
  taxClassFk          Int               @default(2) @db.UnsignedTinyInt
  ticketFk            Int
  ticketServiceTypeFk Int
  ticket              ticket            @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "fgn_ticketFk")
  taxClass            taxClass          @relation(fields: [taxClassFk], references: [id], map: "ticketServiceIvaGroup")
  ticketServiceType   ticketServiceType @relation(fields: [ticketServiceTypeFk], references: [id], map: "ticketService_ticketServiceType")

  @@index([ticketFk], map: "fgn_ticketFk_idx")
  @@index([taxClassFk], map: "ticketServiceIvaGroup_idx")
  @@index([ticketServiceTypeFk], map: "ticketService_ticketServiceType_idx")
}

model ticketServiceType {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  expenceFk     String          @default("7050000000") @db.VarChar(10)
  ticketService ticketService[]
  expence       expence         @relation(fields: [expenceFk], references: [id], map: "ticketServiceType_expenceFk")

  @@index([expenceFk])
}

model ticketSms {
  smsFk    Int     @id @db.UnsignedMediumInt
  ticketFk Int?
  sms      sms     @relation(fields: [smsFk], references: [id], map: "ticketSms_FK")
  ticket   ticket? @relation(fields: [ticketFk], references: [id], onDelete: Restrict, map: "ticketSms_FK_1")

  @@index([ticketFk], map: "ticketSms_FK_1")
}

model ticketTracking {
  id              Int              @id @default(autoincrement())
  stateFk         Int              @db.UnsignedTinyInt
  failFk          Int              @default(21) @db.UnsignedInt
  notes           String?          @db.VarChar(255)
  created         DateTime?        @default(now()) @db.Timestamp(0)
  ticketFk        Int?
  workerFk        Int?
  supervisorFk    Int?             @db.UnsignedInt
  ticketLastState ticketLastState?
  state           state            @relation(fields: [stateFk], references: [id], map: "inter_state")
  worker          worker?          @relation(fields: [supervisorFk], references: [id], onDelete: Restrict, map: "responsable")
  ticket          ticket?          @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "ticketTracking_ibfk_1")

  @@index([workerFk], map: "currante")
  @@index([ticketFk, id], map: "inter_id")
  @@index([stateFk], map: "inter_state")
  @@index([supervisorFk], map: "responsable")
  @@index([ticketFk], map: "ticket")
  @@unique([ticketFk, id])
}

model ticketTrackingState {
  id           Int            @id @default(autoincrement())
  action       String         @db.VarChar(15)
  saleTracking saleTracking[]
}

model ticketTrolley {
  ticket                              Int    @id
  labelCount                          Int    @default(0)
  ticket_ticketTrolley_ticketToticket ticket @relation("ticketTrolley_ticketToticket", fields: [ticket], references: [id], onDelete: Cascade, map: "fk_ticketTrolley_vs_ticket")
}

model ticketUpdateAction {
  id          Int    @id @default(autoincrement())
  description String @db.VarChar(45)
  code        String @db.VarChar(45)
}

model ticketWeekly {
  ticketFk     Int         @id @default(autoincrement())
  weekDay      Boolean
  agencyModeFk Int?
  ticket       ticket      @relation(fields: [ticketFk], references: [id], onDelete: Cascade, map: "Id_Ticket_fk")
  agencyMode   agencyMode? @relation(fields: [agencyModeFk], references: [id], map: "agencyModeFk")

  @@index([agencyModeFk], map: "agencyModeFk_idx")
}

model till {
  id                Int         @id @default(autoincrement())
  dated             DateTime    @db.Date
  isAccountable     Boolean     @default(false)
  serie             String?     @db.VarChar(2)
  number            Int?
  concept           String      @db.VarChar(50)
  in                Decimal?    @db.Decimal(10, 2)
  out               Decimal?    @db.Decimal(10, 2)
  bankFk            Int?        @default(1)
  workerFk          Int?        @db.UnsignedInt
  companyFk         Int?        @default(442) @db.UnsignedSmallInt
  isLinked          Int?        @default(0) @db.TinyInt
  created           DateTime    @default(now()) @db.Timestamp(0)
  isOk              Int         @default(0) @db.TinyInt
  warehouseFk       Int         @default(1) @db.UnsignedSmallInt
  isConciliate      Int         @default(0) @db.TinyInt
  supplierAccountFk Int         @db.UnsignedMediumInt
  calculatedCode    String?     @unique(map: "id_calculated_UNIQUE") @db.VarChar(255)
  InForeignValue    Decimal?    @db.Decimal(10, 2)
  OutForeignValue   Decimal?    @db.Decimal(10, 2)
  accounting        accounting? @relation(fields: [bankFk], references: [id], onDelete: Restrict, map: "till_ibfk_2")
  worker            worker?     @relation(fields: [workerFk], references: [id], onDelete: Restrict, map: "till_ibfk_3")

  @@index([dated], map: "CajasCajafecha")
  @@index([bankFk], map: "Id_Banco")
  @@index([workerFk], map: "Id_Trabajador")
  @@index([companyFk], map: "empresa_id")
  @@index([supplierAccountFk], map: "fk_Cajas_Proveedores_account1_idx")
  @@index([warehouseFk], map: "warehouse_id")
}

model tillConfig {
  id             Int      @id
  openingBalance Decimal  @db.Decimal(10, 2)
  updated        DateTime @default(now()) @db.Timestamp(0)
}

model time {
  dated     DateTime @id @db.Date
  period    Int
  month     Int
  year      Int
  day       Int
  week      Int
  yearMonth Int
  salesYear Int

  @@index([day], map: "day_index")
  @@index([month], map: "month_index")
  @@index([period], map: "periodo")
  @@index([week], map: "week_index")
  @@index([yearMonth], map: "yearMonth")
  @@index([year], map: "year_index")
}

model town {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  provinceFk Int        @db.UnsignedSmallInt
  geoFk      Int?
  postCode   postCode[]
  property   property[]
  province   province   @relation(fields: [provinceFk], references: [id], onDelete: Cascade, map: "townProvinceFk")

  @@index([name], map: "name_idx")
  @@index([provinceFk], map: "townProvinceFk")
}

model train {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  collection          collection[]
  collectionColors    collectionColors[]
  collectionVolumetry collectionVolumetry[]
  operator            operator[]
}

model trainingCenter {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(45)
  trainingCourse trainingCourse[]
}

model trainingCourse {
  id                   Int                @id @default(autoincrement())
  workerFk             Int                @db.UnsignedInt
  trainingCourseTypeFk Int
  centerFk             Int?
  started              DateTime           @db.DateTime(0)
  ended                DateTime           @db.DateTime(0)
  invoice              String?            @db.VarChar(50)
  amount               Float?
  remark               String?            @db.LongText
  hasDiscount          Boolean            @default(false)
  hasDiploma           Boolean            @default(false)
  trainingCenter       trainingCenter?    @relation(fields: [centerFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "frgnCenter")
  trainingCourseType   trainingCourseType @relation(fields: [trainingCourseTypeFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "frgnTrainingCourseType")
  worker               worker             @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "frgnWorker")

  @@index([centerFk], map: "frgnCenter_idx")
  @@index([trainingCourseTypeFk], map: "frgnTrainingCourseType_idx")
  @@index([workerFk], map: "frgnWorker_idx")
}

model trainingCourseType {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  trainingCourse trainingCourse[]
}

model travel {
  id                                         Int                  @id @default(autoincrement()) @db.UnsignedInt
  shipped                                    DateTime?            @db.Date
  shipmentHour                               DateTime?            @db.Time(0)
  landed                                     DateTime             @db.Date
  landingHour                                DateTime?            @db.Time(0)
  warehouseInFk                              Int?                 @db.UnsignedSmallInt
  warehouseOutFk                             Int?                 @db.UnsignedSmallInt
  agencyFk                                   Int?
  ref                                        String?              @db.VarChar(20)
  isDelivered                                Boolean              @default(false)
  isReceived                                 Boolean              @default(false)
  m3                                         Decimal?             @db.Decimal(10, 2)
  kg                                         Decimal?             @db.Decimal(10, 0)
  cargoSupplierFk                            Int?
  totalEntries                               Int?                 @default(0) @db.UnsignedTinyInt
  appointment                                DateTime?            @db.DateTime(0)
  agencyModeFk                               Int?
  entry                                      entry[]
  agencyMode_travel_agencyModeFkToagencyMode agencyMode?          @relation("travel_agencyModeFkToagencyMode", fields: [agencyModeFk], references: [id], onDelete: Restrict, map: "travel_FK")
  warehouse_travel_warehouseInFkTowarehouse  warehouse?           @relation("travel_warehouseInFkTowarehouse", fields: [warehouseInFk], references: [id], onDelete: Restrict, map: "travel_ibfk_1")
  warehouse_travel_warehouseOutFkTowarehouse warehouse?           @relation("travel_warehouseOutFkTowarehouse", fields: [warehouseOutFk], references: [id], onDelete: Restrict, map: "travel_ibfk_2")
  agencyMode_travel_agencyFkToagencyMode     agencyMode?          @relation("travel_agencyFkToagencyMode", fields: [agencyFk], references: [id], onDelete: Restrict, map: "travel_ibfk_3")
  travelClonedWeekly                         travelClonedWeekly[]
  travelLog                                  travelLog[]
  travelThermograph                          travelThermograph[]

  @@unique([shipped, landed, warehouseInFk, warehouseOutFk, agencyFk, agencyModeFk, ref], map: "shipment_1")
  @@index([agencyFk], map: "agency_id")
  @@index([landed], map: "landing")
  @@index([shipped], map: "shipment")
  @@index([agencyModeFk], map: "travel_FK")
  @@index([cargoSupplierFk], map: "travel_ibfk_4_idx")
  @@index([warehouseInFk, landed], map: "warehouse_landing")
  @@index([warehouseOutFk, shipped], map: "warehouse_out_shipment")
}

model travelClonedWeekly {
  id                                                     Int        @id @default(autoincrement()) @db.UnsignedInt
  weekStart                                              Int        @db.UnsignedTinyInt
  weekEnd                                                Int        @db.UnsignedTinyInt
  warehouseOutFk                                         Int        @db.UnsignedSmallInt
  warehouseInFk                                          Int        @db.UnsignedSmallInt
  agencyModeFk                                           Int
  weekDay                                                Int        @db.UnsignedTinyInt
  duration                                               Int        @db.UnsignedTinyInt
  ref                                                    String     @db.VarChar(50)
  supplierFk                                             Int?
  kg                                                     Decimal?   @db.Decimal(10, 0)
  travelFk                                               Int?       @db.UnsignedInt
  warehouse_travelClonedWeekly_warehouseOutFkTowarehouse warehouse  @relation("travelClonedWeekly_warehouseOutFkTowarehouse", fields: [warehouseOutFk], references: [id], map: "travelClonedWeekly_FK")
  warehouse_travelClonedWeekly_warehouseInFkTowarehouse  warehouse  @relation("travelClonedWeekly_warehouseInFkTowarehouse", fields: [warehouseInFk], references: [id], map: "travelClonedWeekly_FK_1")
  agencyMode                                             agencyMode @relation(fields: [agencyModeFk], references: [id], map: "travelClonedWeekly_FK_2")
  supplier                                               supplier?  @relation(fields: [supplierFk], references: [id], map: "travelClonedWeekly_FK_3")
  travel                                                 travel?    @relation(fields: [travelFk], references: [id], onDelete: Restrict, map: "travelClonedWeekly_FK_4")

  @@index([warehouseOutFk], map: "travelClonedWeekly_FK")
  @@index([warehouseInFk], map: "travelClonedWeekly_FK_1")
  @@index([agencyModeFk], map: "travelClonedWeekly_FK_2")
  @@index([supplierFk], map: "travelClonedWeekly_FK_3")
  @@index([travelFk], map: "travelClonedWeekly_FK_4")
}

model travelLog {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  originFk          Int       @db.UnsignedInt
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  travel            travel    @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "travelLog_ibfk_1")

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model travelObservation {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  originFk    Int
  userFk      Int
  description String   @db.Text
  created     DateTime @default(now()) @db.Timestamp(0)
}

model travelRecalc {
  travelFk Int @id @db.UnsignedInt
}

model travelThermograph {
  id            Int          @id @default(autoincrement())
  thermographFk String       @db.VarChar(45)
  created       DateTime     @db.Date
  warehouseFk   Int          @db.UnsignedSmallInt
  travelFk      Int?         @db.UnsignedInt
  result        String?      @db.VarChar(45)
  dmsFk         Int?
  temperatureFk String?      @default("cool") @db.VarChar(10)
  dms           dms?         @relation(fields: [dmsFk], references: [id], onDelete: Restrict, map: "travelThermographDmsFgn")
  temperature   temperature? @relation(fields: [temperatureFk], references: [code], onDelete: Restrict, onUpdate: Restrict, map: "travelThermographTemperatureFgn")
  thermograph   thermograph  @relation(fields: [thermographFk], references: [id], map: "travelThermographThermographFgn")
  travel        travel?      @relation(fields: [travelFk], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "travelThermographTravelFgn")
  warehouse     warehouse    @relation(fields: [warehouseFk], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "travelThermographWarehouseFgn")

  @@index([dmsFk], map: "gestdoc_fk_idx")
  @@index([thermographFk], map: "thermograph_fk_idx")
  @@index([temperatureFk], map: "travelThermographTemperatureFgn")
  @@index([travelFk], map: "travel_id")
  @@index([warehouseFk], map: "warehouse_id")
}

model trolley {
  id       Int      @id @default(autoincrement())
  workerFk Int?     @db.UnsignedInt
  coupled  DateTime @default(now()) @db.Timestamp(0)
  worker   worker?  @relation(fields: [workerFk], references: [id], map: "trolley_FK")

  @@index([workerFk], map: "trolley_FK")
}

model userConfig {
  userFk      Int       @id @db.UnsignedInt
  warehouseFk Int?      @db.SmallInt
  companyFk   Int?      @db.UnsignedSmallInt
  created     DateTime? @default(now()) @db.Timestamp(0)
  updated     DateTime? @default(now()) @db.Timestamp(0)
  darkMode    Boolean   @default(true)
}

model userLog {
  id                Int       @id @default(autoincrement())
  originFk          Int       @db.UnsignedInt
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model userPhone {
  id            Int           @id @default(autoincrement())
  userFk        Int           @db.UnsignedInt
  typeFk        String        @db.VarChar(45)
  phone         String        @db.VarChar(25)
  userPhoneType userPhoneType @relation(fields: [typeFk], references: [code], map: "fgnTypeFk")

  @@unique([userFk, typeFk, phone], map: "UserFk_Phone")
  @@index([typeFk], map: "fgnTypeFk")
}

model userPhoneType {
  code        String      @id @db.VarChar(45)
  description String?     @db.VarChar(255)
  userPhone   userPhone[]
}

model vehicle {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  numberPlate      String             @db.VarChar(10)
  model            String             @db.VarChar(20)
  tradeMark        String             @db.VarChar(20)
  companyFk        Int                @default(442) @db.UnsignedSmallInt
  m3               Float?
  isActive         Int                @default(1) @db.TinyInt
  warehouseFk      Int?               @db.UnsignedSmallInt
  description      String?            @db.VarChar(45)
  deliveryPointFk  Int?               @default(6)
  isKmTruckRate    Int                @default(0) @db.TinyInt
  photo            Bytes?             @db.Blob
  chassis          String?            @db.VarChar(100)
  fuelTypeFk       Int?
  ppeFk            Int?
  province         province?          @relation(fields: [warehouseFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "provinceFk")
  fuelType         fuelType?          @relation(fields: [fuelTypeFk], references: [id], map: "vehicle_FK")
  ppe              ppe?               @relation(fields: [ppeFk], references: [id], map: "vehicle_FK_1")
  deliveryPoint    deliveryPoint?     @relation(fields: [deliveryPointFk], references: [id], onDelete: Restrict, map: "vehicle_deliveryPointFk")
  company          company            @relation(fields: [companyFk], references: [id], map: "vehicle_ibfk_1")
  vehicleDms       vehicleDms[]
  vehicleInvoiceIn vehicleInvoiceIn[]
  vehicleNotes     vehicleNotes[]

  @@index([companyFk], map: "empresa_id")
  @@index([warehouseFk], map: "provinceFk_idx")
  @@index([fuelTypeFk], map: "vehicle_FK")
  @@index([ppeFk], map: "vehicle_FK_1")
  @@index([deliveryPointFk])
}

model vehicleDms {
  id        Int     @id @default(autoincrement())
  vehicleFk Int     @db.UnsignedInt
  dmsFk     Int
  vehicle   vehicle @relation(fields: [vehicleFk], references: [id], onDelete: Cascade, map: "vehicleDms_FK")
  dms       dms     @relation(fields: [dmsFk], references: [id], onDelete: Cascade, map: "vehicleDms_FK_1")

  @@index([vehicleFk], map: "vehicleDms_FK")
  @@index([dmsFk], map: "vehicleDms_FK_1")
}

model vehicleEvent {
  id             Int           @id @default(autoincrement())
  started        DateTime?     @db.Date
  finished       DateTime?     @db.Date
  vehicleStateFk Int?
  description    String        @db.VarChar(250)
  vehicleFk      Int
  userFk         Int           @db.UnsignedInt
  vehicleState   vehicleState? @relation(fields: [vehicleStateFk], references: [id], onDelete: Cascade, map: "vehicleEvent_FK")

  @@index([vehicleStateFk], map: "vehicleEvent_FK")
  @@index([userFk], map: "vehicleEvent_FK_1")
}

model vehicleInvoiceIn {
  id          Int       @id @default(autoincrement())
  vehicleFk   Int       @db.UnsignedInt
  invoiceInFk Int       @db.UnsignedMediumInt
  amount      Decimal?  @db.Decimal(10, 2)
  vehicle     vehicle   @relation(fields: [vehicleFk], references: [id], onUpdate: Restrict, map: "vehicleInvoiceIn_FK")
  invoiceIn   invoiceIn @relation(fields: [invoiceInFk], references: [id], onUpdate: Restrict, map: "vehicleInvoiceIn_FK_1")

  @@index([vehicleFk], map: "vehicleInvoiceIn_FK")
  @@index([invoiceInFk], map: "vehicleInvoiceIn_FK_1")
}

model vehicleNotes {
  id        Int      @id @default(autoincrement())
  vehicleFk Int      @db.UnsignedInt
  created   DateTime @default(now()) @db.Timestamp(0)
  note      String   @db.Text
  userFk    Int?     @db.UnsignedInt
  vehicle   vehicle  @relation(fields: [vehicleFk], references: [id], onUpdate: Restrict, map: "vehicleNotes_FK")

  @@index([vehicleFk], map: "vehicleNotes_FK")
  @@index([userFk], map: "vehicleNotes_FK_1")
}

model vehicleState {
  id           Int            @id
  state        String         @db.VarChar(100)
  vehicleEvent vehicleEvent[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model volumeConfig {
  id                      Int      @id @default(autoincrement())
  palletM3                Decimal? @db.Decimal(10, 2)
  trolleyM3               Decimal? @db.Decimal(10, 2)
  dutchCompressionRate    Float    @default(1)
  standardFlowerBox       Int
  minCompressionRate      Decimal? @default(0.30) @db.Decimal(10, 2)
  ccLength                Int      @default(130)
  ccWidth                 Int      @default(60)
  sorterPallet_m3         Decimal  @default(2.0) @db.Decimal(5, 1)
  minTicketVolume         Int      @default(75)
  shelveVolume            Int?     @default(200)
  minTicketValue          Int      @default(50)
  aerealVolumetricDensity Decimal? @default(167.0) @db.Decimal(10, 1)
}

model wagon {
  id             Int              @id @default(autoincrement())
  volume         Int              @default(150)
  plate          String           @db.VarChar(10)
  wagonVolumetry wagonVolumetry[]
}

model wagonVolumetry {
  id      Int   @id @default(autoincrement())
  level   Int   @default(0) @db.UnsignedInt
  lines   Int   @default(1) @db.UnsignedInt
  liters  Int   @default(0) @db.UnsignedInt
  height  Int   @default(20) @db.UnsignedInt
  wagonFk Int
  wagon   wagon @relation(fields: [wagonFk], references: [id], onDelete: Cascade, map: "wagonVolumetry_FK")

  @@index([wagonFk], map: "wagonVolumetry_FK")
}

model warehouse {
  id                                                              Int                        @id @default(autoincrement()) @db.UnsignedSmallInt
  name                                                            String                     @unique(map: "name_UNIQUE") @db.VarChar(20)
  code                                                            String?                    @db.VarChar(3)
  isFeedStock                                                     Boolean                    @default(false)
  addressName                                                     String?                    @db.VarChar(45)
  delay                                                           Float                      @default(0.004)
  hasAvailable                                                    Int                        @default(0) @db.TinyInt
  isForTicket                                                     Int                        @default(0) @db.TinyInt
  countryFk                                                       Int                        @default(1) @db.UnsignedMediumInt
  labelZone                                                       Int                        @default(0) @db.TinyInt
  hasComission                                                    Int                        @default(0) @db.TinyInt
  isInventory                                                     Int                        @default(0) @db.TinyInt
  isComparative                                                   Int                        @default(0) @db.TinyInt
  valuatedInventory                                               Int                        @default(0) @db.TinyInt
  isManaged                                                       Int                        @default(0) @db.TinyInt
  hasConfectionTeam                                               Boolean                    @default(false)
  hasStowaway                                                     Boolean                    @default(false)
  hasDms                                                          Boolean                    @default(false)
  pickUpAgencyModeFk                                              Int?
  isBuyerToBeEmailed                                              Int                        @default(0) @db.TinyInt
  aliasFk                                                         Int?                       @db.UnsignedSmallInt
  labelReport                                                     Int?
  hasUbications                                                   Boolean                    @default(true)
  hasProduction                                                   Boolean                    @default(false)
  addressFk                                                       Int?
  hasMachine                                                      Boolean                    @default(false)
  isLogiflora                                                     Boolean                    @default(false)
  isBionic                                                        Boolean                    @default(true)
  addressFilter                                                   addressFilter[]
  agency                                                          agency[]
  collection                                                      collection[]
  dms                                                             dms[]
  floramondoConfig                                                floramondoConfig[]
  host                                                            host[]
  inventoryFailure                                                inventoryFailure[]
  itemCost                                                        itemCost[]
  itemType                                                        itemType[]
  operator                                                        operator[]
  origin                                                          origin[]
  packagingGifts                                                  packagingGifts[]
  priceFixed                                                      priceFixed[]
  province                                                        province[]
  rate                                                            rate[]
  sector                                                          sector[]
  ticket                                                          ticket[]
  travel_travel_warehouseInFkTowarehouse                          travel[]                   @relation("travel_warehouseInFkTowarehouse")
  travel_travel_warehouseOutFkTowarehouse                         travel[]                   @relation("travel_warehouseOutFkTowarehouse")
  travelClonedWeekly_travelClonedWeekly_warehouseOutFkTowarehouse travelClonedWeekly[]       @relation("travelClonedWeekly_warehouseOutFkTowarehouse")
  travelClonedWeekly_travelClonedWeekly_warehouseInFkTowarehouse  travelClonedWeekly[]       @relation("travelClonedWeekly_warehouseInFkTowarehouse")
  travelThermograph                                               travelThermograph[]
  address                                                         address?                   @relation(fields: [addressFk], references: [id], map: "warehouse_FK")
  agencyMode                                                      agencyMode?                @relation(fields: [pickUpAgencyModeFk], references: [id], onDelete: Restrict, map: "warehouse_FK_1")
  country                                                         country                    @relation(fields: [countryFk], references: [id], onUpdate: Restrict, map: "warehouse_ibfk_1")
  warehouseAlias                                                  warehouseAlias?            @relation(fields: [aliasFk], references: [id], map: "warehouse_ibfk_2")
  workerTimeControl                                               workerTimeControl[]
  workerTimeControlConfig_                                        workerTimeControlConfig_[]
  zoneWarehouse                                                   zoneWarehouse[]

  @@index([countryFk], map: "Id_Paises")
  @@index([isComparative], map: "isComparativeIdx")
  @@index([addressFk], map: "warehouse_FK")
  @@index([pickUpAgencyModeFk], map: "warehouse_FK_1")
  @@index([aliasFk], map: "warehouse_ibfk_1_idx")
}

model warehouseAlias {
  id        Int         @id @default(autoincrement()) @db.UnsignedSmallInt
  name      String      @unique(map: "name_UNIQUE") @db.VarChar(15)
  agency    agency[]
  warehouse warehouse[]
}

model workCenter {
  id                    Int                @id @default(0)
  name                  String?            @db.VarChar(255)
  payrollCenterFk       Int?
  counter               BigInt?
  warehouseFk           Int?               @db.SmallInt
  street                String?            @db.VarChar(255)
  geoFk                 Int?
  deliveryManAdjustment Decimal?           @db.Decimal(4, 2)
  agency                agency[]
  calendarHolidays      calendarHolidays[]
  route                 route[]
  routeCommission       routeCommission[]
  zoneGeo               zoneGeo?           @relation(fields: [geoFk], references: [id], onDelete: Restrict, map: "workCenter_geoFk")

  @@index([geoFk])
}

model workCenterHoliday {
  workCenterFk Int
  days         Float
  year         Int   @db.SmallInt

  @@id([workCenterFk, year])
}

model worker {
  id                                                     Int                           @id @default(autoincrement()) @db.UnsignedInt
  code                                                   String                        @unique(map: "CodigoTrabajador_UNIQUE") @db.VarChar(3)
  firstName                                              String?                       @db.VarChar(50)
  lastName                                               String?                       @db.VarChar(50)
  sub                                                    Int?                          @db.UnsignedInt
  photo                                                  Bytes?                        @db.Blob
  phone                                                  String?                       @db.VarChar(9)
  mobileExtension                                        Int?
  userFk                                                 Int?                          @unique(map: "user_id_UNIQUE") @db.UnsignedInt
  bossFk                                                 Int                           @default(103)
  fiDueDate                                              DateTime?                     @db.DateTime(0)
  hasMachineryAuthorized                                 Int?                          @default(0) @db.TinyInt
  seniority                                              DateTime?                     @db.Date
  isTodayRelative                                        Boolean                       @default(false)
  isF11Allowed                                           Boolean                       @default(false)
  sectorFk                                               Int?
  maritalStatus                                          worker_maritalStatus
  labelerFk                                              Int?                          @db.UnsignedTinyInt
  originCountryFk                                        Int?                          @db.UnsignedMediumInt
  educationLevelFk                                       Int?                          @db.SmallInt
  SSN                                                    String?                       @db.VarChar(15)
  fi                                                     String?                       @db.VarChar(15)
  birth                                                  DateTime?                     @db.Date
  isDisable                                              Boolean                       @default(false)
  isFreelance                                            Boolean                       @default(false)
  isSsDiscounted                                         Boolean                       @default(false)
  sex                                                    worker_sex                    @default(F)
  businessFk                                             Int?                          @unique(map: "worker_business")
  balance                                                Decimal?                      @db.Decimal(10, 2)
  business_business_workerFkToworker                     business[]                    @relation("business_workerFkToworker")
  claimDevelopment                                       claimDevelopment[]
  claimEnd                                               claimEnd[]
  claimObservation                                       claimObservation[]
  client_client_lastSalesPersonFkToworker                client[]                      @relation("client_lastSalesPersonFkToworker")
  client_client_salesPersonFkToworker                    client[]                      @relation("client_salesPersonFkToworker")
  clientCredit                                           clientCredit[]
  clientObservation                                      clientObservation[]
  clientProtected                                        clientProtected[]
  collection                                             collection[]
  company                                                company[]
  contratos_subvencion_270619                            contratos_subvencion_270619[]
  department                                             department[]
  deviceLog                                              deviceLog[]
  dms                                                    dms[]
  entry                                                  entry[]
  expedition                                             expedition[]
  expeditionMistake                                      expeditionMistake[]
  expeditionScan                                         expeditionScan[]
  host                                                   host[]
  inventoryFailure_inventoryFailure_throwerFkToworker    inventoryFailure[]            @relation("inventoryFailure_throwerFkToworker")
  inventoryFailure_inventoryFailure_guiltyFkToworker     inventoryFailure[]            @relation("inventoryFailure_guiltyFkToworker")
  itemType                                               itemType[]
  machine                                                machine[]
  machineDetail                                          machineDetail[]
  machineWorker                                          machineWorker[]
  medicalReview                                          medicalReview[]
  operator                                               operator?
  packingSiteLog                                         packingSiteLog[]
  payment                                                payment[]
  ppe                                                    ppe[]
  receipt                                                receipt[]
  route                                                  route[]
  routeComplement                                        routeComplement[]
  routeLoadWorker                                        routeLoadWorker[]
  routeUserPercentage__                                  routeUserPercentage__[]
  saleMistake                                            saleMistake[]
  sharingCart_sharingCart_workerSubstituteToworker       sharingCart[]                 @relation("sharingCart_workerSubstituteToworker")
  sharingCart_sharingCart_workerFkToworker               sharingCart[]                 @relation("sharingCart_workerFkToworker")
  sharingCartDaily_sharingCartDaily_substituteFkToworker sharingCartDaily[]            @relation("sharingCartDaily_substituteFkToworker")
  sharingCartDaily_sharingCartDaily_ownerFkToworker      sharingCartDaily[]            @relation("sharingCartDaily_ownerFkToworker")
  sharingClient                                          sharingClient[]
  shelving                                               shelving[]
  sinister                                               sinister[]
  sinisterDetail                                         sinisterDetail[]
  starredModule                                          starredModule[]
  supplier                                               supplier[]
  ticketPackaging                                        ticketPackaging[]
  ticketRequest_ticketRequest_attenderFkToworker         ticketRequest[]               @relation("ticketRequest_attenderFkToworker")
  ticketRequest_ticketRequest_requesterFkToworker        ticketRequest[]               @relation("ticketRequest_requesterFkToworker")
  ticketTracking                                         ticketTracking[]
  till                                                   till[]
  trainingCourse                                         trainingCourse[]
  trolley                                                trolley[]
  printer                                                printer?                      @relation(fields: [labelerFk], references: [id], onDelete: Cascade, map: "worker_FK")
  country                                                country?                      @relation(fields: [originCountryFk], references: [id], onDelete: Restrict, map: "worker_FK_1")
  educationLevel                                         educationLevel?               @relation(fields: [educationLevelFk], references: [id], onDelete: Restrict, map: "worker_FK_2")
  business_worker_businessFkTobusiness                   business?                     @relation("worker_businessFkTobusiness", fields: [businessFk], references: [id], map: "worker_businessFk")
  workerAppTester                                        workerAppTester?
  workerBosses_workerBosses_bossFkToworker               workerBosses[]                @relation("workerBosses_bossFkToworker")
  workerBosses_workerBosses_workerFkToworker             workerBosses[]                @relation("workerBosses_workerFkToworker")
  workerDisableExcluded                                  workerDisableExcluded?
  workerDistributionCategory                             workerDistributionCategory[]
  workerDocument_workerDocument_workerToworker           workerDocument[]              @relation("workerDocument_workerToworker")
  workerIrpf                                             workerIrpf?
  workerLog                                              workerLog[]
  workerMana                                             workerMana?
  workerManaExcluded                                     workerManaExcluded?
  workerMistake                                          workerMistake[]
  workerShelving                                         workerShelving[]
  workerTimeControlMail                                  workerTimeControlMail[]
  workerTimeControlPin                                   workerTimeControlPin?

  @@index([bossFk], map: "boss_idx")
  @@index([sub], map: "sub")
  @@index([labelerFk], map: "worker_FK")
  @@index([originCountryFk], map: "worker_FK_1")
  @@index([educationLevelFk], map: "worker_FK_2")
}

model workerAppTester {
  workerFk Int    @id @db.UnsignedInt
  worker   worker @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "workerAppTester_FK_1")

  @@index([workerFk], map: "workerAppTester_FK")
}

model workerBosses {
  id                                   Int    @id @default(autoincrement())
  workerFk                             Int    @db.UnsignedInt
  bossFk                               Int    @db.UnsignedInt
  worker_workerBosses_bossFkToworker   worker @relation("workerBosses_bossFkToworker", fields: [bossFk], references: [id], onDelete: Cascade, map: "fg_bossFk_worker")
  worker_workerBosses_workerFkToworker worker @relation("workerBosses_workerFkToworker", fields: [workerFk], references: [id], onDelete: Cascade, map: "fg_workerFk_worker")

  @@unique([workerFk, bossFk], map: "workerFk_UNIQUE")
  @@index([bossFk], map: "fg_bossFk_worker_idx")
  @@index([workerFk], map: "fg_worker_worker_idx")
}

model workerBusinessType {
  id                    Int        @id
  name                  String     @db.VarChar(255)
  isFullTime            Boolean    @default(true)
  isPermanent           Boolean    @default(true)
  hasHolidayEntitlement Boolean?   @default(true)
  business              business[]
}

model workerClockLog {
  id           Int       @id @default(autoincrement())
  originFk     Int
  userFk       Int       @db.UnsignedInt
  action       String
  creationDate DateTime? @default(now()) @db.Timestamp(0)
  description  String    @db.Text

  @@index([originFk], map: "logWorkerClockoriginFk")
  @@index([userFk], map: "logWorkerClockuserFk")
}

model workerConfig {
  id              Int       @id @default(autoincrement())
  businessUpdated DateTime? @db.Date
}

model workerDisableExcluded {
  workerFk Int       @id @db.UnsignedInt
  dated    DateTime? @db.Date
  worker   worker    @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "workerDisableExcludedFk1")
}

model workerDistributionCategory {
  id       Int    @id @default(autoincrement())
  workerFk Int    @db.UnsignedInt
  category Int
  worker   worker @relation(fields: [workerFk], references: [id], map: "workerDistributionCategory_workerFk")

  @@index([workerFk])
}

model workerDocument {
  id                                   Int     @id @default(autoincrement())
  worker                               Int?    @db.UnsignedInt
  document                             Int?
  isReadableByWorker                   Boolean @default(false)
  worker_workerDocument_workerToworker worker? @relation("workerDocument_workerToworker", fields: [worker], references: [userFk], onDelete: Restrict, map: "workerDocument_ibfk_1")
  dms                                  dms?    @relation(fields: [document], references: [id], onDelete: Cascade, map: "workerDocument_ibfk_2")

  @@index([worker], map: "workerDocument_ibfk_1")
  @@index([document], map: "workerDocument_ibfk_2")
}

model workerEmergencyBoss {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(45)
  value String? @db.VarChar(45)
}

model workerHourPrice {
  id         Int      @id @default(autoincrement())
  dated      DateTime @db.Date
  holidayInc Decimal? @db.Decimal(4, 2)
  nightInc   Decimal? @db.Decimal(4, 2)
  extraInc   Decimal? @db.Decimal(4, 2)
}

model workerIrpf {
  workerFk                Int                         @id @db.UnsignedInt
  spouseNif               String?                     @db.VarChar(45)
  geographicMobilityDate  DateTime?                   @db.Date
  disabilityGradeFk       Int?
  isDependend             Boolean                     @default(false)
  familySituation         workerIrpf_familySituation? @default(dbgenerated("1"))
  spousePension           Decimal?                    @db.Decimal(10, 2)
  childPension            Decimal?                    @db.Decimal(10, 2)
  hasHousingPaymentBefore Boolean                     @default(false)
  hasHousingPaymentAfter  Boolean                     @default(false)
  hasExtendedWorking      Boolean                     @default(false)
  updated                 DateTime?                   @default(now()) @db.Timestamp(0)
  disabilityGrade         disabilityGrade?            @relation(fields: [disabilityGradeFk], references: [id], onDelete: Restrict, map: "workerIrpf_disabilityGradeFk")
  worker                  worker                      @relation(fields: [workerFk], references: [id], map: "workerIrpf_wokerFk")
  workerRelatives         workerRelatives[]

  @@index([disabilityGradeFk], map: "workerIrpf_disabilityGradeFk")
}

model workerJourney {
  id                Int       @id @default(autoincrement())
  userFk            Int       @db.UnsignedInt
  dated             DateTime  @db.Date
  total             Decimal   @default(0.00) @db.Decimal(5, 2)
  priceOrdinaryHour Decimal   @default(0.00) @db.Decimal(5, 2)
  nocturn           Decimal   @default(0.00) @db.Decimal(5, 2)
  priceNocturnHour  Decimal   @default(0.00) @db.Decimal(5, 2)
  holiday           Decimal   @default(0.00) @db.Decimal(5, 2)
  priceHolidayHour  Decimal   @default(0.00) @db.Decimal(5, 2)
  lunch             Decimal   @default(0.00) @db.Decimal(5, 2)
  priceExtraHour    Decimal   @default(0.00) @db.Decimal(5, 2)
  extra             Decimal   @default(0.00) @db.Decimal(5, 2)
  contractJourney   Decimal   @default(0.00) @db.Decimal(5, 2)
  priceExtraHoliday Decimal   @default(0.00) @db.Decimal(5, 2)
  businessFk        Int?
  isPaid            Boolean   @default(false)
  isUpdated         Boolean   @default(false)
  permission        Decimal   @default(0.00) @db.Decimal(5, 2)
  business          business? @relation(fields: [businessFk], references: [id], onDelete: Restrict, map: "workerJourney_businessFk")

  @@unique([userFk, dated], map: "userFk_UNIQUE")
  @@index([userFk], map: "fk_workerJourney_user_idx")
  @@index([businessFk], map: "workerJourney_businessFk")
  @@index([dated])
}

model workerLog {
  id                Int       @id @default(autoincrement())
  originFk          Int       @db.UnsignedInt
  userFk            Int       @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String    @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  worker            worker    @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "workerFk")

  @@index([userFk], map: "userFk_idx")
  @@index([originFk], map: "workerFk_idx")
}

model workerMana {
  workerFk                  Int     @id @db.UnsignedInt
  size                      Int     @default(300)
  amount                    Int     @default(0)
  pricesModifierRate        Float   @default(0)
  isPricesModifierActivated Boolean @default(true)
  minRate                   Decimal @default(-0.05) @db.Decimal(3, 2)
  maxRate                   Decimal @default(0.05) @db.Decimal(3, 2)
  worker                    worker  @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "fk_mana_spellers_Trabajadores")

  @@index([workerFk], map: "fk_mana_spellers_Trabajadores_idx")
}

model workerManaExcluded {
  workerFk Int    @id @db.UnsignedInt
  worker   worker @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "mana_spellers_excluded_fk1")
}

model workerMistake {
  id                  Int               @id @default(autoincrement())
  userFk              Int               @db.UnsignedInt
  workerMistakeTypeFk String            @db.VarChar(10)
  created             DateTime          @default(now()) @db.Timestamp(0)
  worker              worker            @relation(fields: [userFk], references: [id], onDelete: Cascade, map: "workerMistake_fk1")
  workerMistakeType   workerMistakeType @relation(fields: [workerMistakeTypeFk], references: [code], onDelete: Cascade, map: "workerMistake_fk2")

  @@index([userFk], map: "workerMistake_fk1_idx")
  @@index([workerMistakeTypeFk], map: "workerMistake_fk2_idx")
}

model workerMistakeType {
  code          String          @id @db.VarChar(10)
  description   String          @db.VarChar(45)
  workerMistake workerMistake[]
}

model workerRelatives {
  id                Int              @id @default(autoincrement())
  workerFk          Int              @db.UnsignedInt
  isDescendant      Boolean?         @default(true)
  disabilityGradeFk Int?
  birthed           Int
  adoptionYear      Int?
  isDependend       Boolean?         @default(false)
  isJointCustody    Boolean?         @default(false)
  updated           DateTime?        @default(now()) @db.Timestamp(0)
  disabilityGrade   disabilityGrade? @relation(fields: [disabilityGradeFk], references: [id], onDelete: Restrict, map: "workerRelatives_disabilityGradeFk")
  workerIrpf        workerIrpf       @relation(fields: [workerFk], references: [workerFk], onDelete: Cascade, map: "workerRelatives_workerFk")

  @@index([disabilityGradeFk], map: "workerRelatives_disabilityGradeFk")
  @@index([workerFk], map: "workerRelatives_workerFk")
}

model workerShelving {
  id           Int         @id @default(autoincrement())
  workerFk     Int         @db.UnsignedInt
  shelvingFk   String      @db.VarChar(10)
  collectionFk Int?
  created      DateTime    @default(now()) @db.Timestamp(0)
  collection   collection? @relation(fields: [collectionFk], references: [id], map: "workerShelving_FK")
  shelving     shelving    @relation(fields: [shelvingFk], references: [code], map: "workerShelving_FK_1")
  worker       worker      @relation(fields: [workerFk], references: [id], onUpdate: Restrict, map: "workerShelving_worker_fk")

  @@index([workerFk], map: "workerShelving_FK")
  @@index([collectionFk], map: "workerShelving_FK_1")
  @@index([shelvingFk], map: "workerShelving_shelving_fk")
}

model workerTeam {
  id       Int @id @default(autoincrement())
  team     Int
  workerFk Int @db.UnsignedInt

  @@index([team], map: "team_idx")
  @@index([workerFk], map: "user_idx")
}

model workerTimeControl {
  id          Int                          @id @default(autoincrement())
  userFk      Int                          @db.UnsignedInt
  timed       DateTime                     @db.DateTime(0)
  manual      Int                          @default(0) @db.TinyInt
  order       Int?
  warehouseFk Int?                         @db.UnsignedSmallInt
  direction   workerTimeControl_direction? @default(middle)
  isSendMail  Int                          @default(0) @db.TinyInt
  warehouse   warehouse?                   @relation(fields: [warehouseFk], references: [id], onDelete: Restrict, map: "warehouseFk_1")

  @@unique([userFk, timed], map: "userFk_Timed_uniq")
  @@index([timed], map: "timed_idx")
  @@index([warehouseFk], map: "warehouseFkfk1_idx")
}

model workerTimeControlConfig {
  id                Int      @id @default(autoincrement())
  dayBreak          Int
  dayBreakDriver    Int
  shortWeekBreak    Int
  longWeekBreak     Int
  weekScope         Int
  mailPass          String   @db.VarChar(45)
  mailHost          String   @db.VarChar(45)
  mailSuccessFolder String   @db.VarChar(45)
  mailErrorFolder   String   @db.VarChar(45)
  mailUser          String   @db.VarChar(45)
  minHoursToBreak   Decimal  @db.Decimal(5, 2)
  breakHours        Decimal  @db.Decimal(5, 2)
  hoursCompleteWeek Int      @db.UnsignedInt
  startNightlyHours DateTime @db.Time(0)
  endNightlyHours   DateTime @db.Time(0)
  maxTimePerDay     Int      @db.UnsignedInt
  breakTime         Int?
  timeToBreakTime   Int?
  dayMaxTime        Int?
  shortWeekDays     Int?
  longWeekDays      Int?
}

model workerTimeControlConfig_ {
  id          Int       @id @default(autoincrement())
  warehouseFk Int       @db.UnsignedSmallInt
  host        String    @db.VarChar(45)
  warehouse   warehouse @relation(fields: [warehouseFk], references: [id], map: "warehouseFk_2")

  @@index([warehouseFk], map: "warehouseFk_1_idx")
}

model workerTimeControlLog {
  id          Int      @id @default(autoincrement())
  userFk      Int
  created     DateTime @default(now()) @db.DateTime(0)
  description String   @db.VarChar(45)
}

model workerTimeControlMail {
  id            Int                         @id @default(autoincrement())
  workerFk      Int                         @db.UnsignedInt
  year          Int
  week          Int
  state         workerTimeControlMail_state @default(SENDED)
  updated       DateTime                    @default(now()) @db.DateTime(0)
  sendedCounter Int                         @default(1)
  reason        String?                     @db.Text
  worker        worker                      @relation(fields: [workerFk], references: [id], map: "workerTimeControlMail_workerFk")

  @@unique([workerFk, year, week], map: "workerFk_UNIQUE")
  @@index([workerFk], map: "workerFk_idx")
}

model workerTimeControlParams {
  id                Int    @id @default(autoincrement())
  dayBreak          Int
  weekBreak         Int
  weekScope         Int
  dayWorkMax        Int
  dayStayMax        Int
  weekMaxBreak      Int
  weekMaxScope      Int
  askInOut          Int
  mailPass          String @db.VarChar(45)
  mailHost          String @db.VarChar(45)
  mailSuccessFolder String @db.VarChar(45)
  mailErrorFolder   String @db.VarChar(45)
  mailUser          String @db.VarChar(45)
}

model workerTimeControlPin {
  workerFk Int    @id @db.UnsignedInt
  pin      String @db.VarChar(255)
  worker   worker @relation(fields: [workerFk], references: [id], onDelete: Cascade, map: "workerFk_.1")
}

model workerTimeControlSchedule {
  id   Int       @id @default(autoincrement())
  time DateTime? @unique(map: "punique_trhf") @db.Time(0)
}

model workers20190711 {
  person_id       Int       @id @default(0)
  business_id     Int       @default(0)
  Apellidos       String    @db.VarChar(60)
  Nombre          String?   @db.VarChar(20)
  nif             String?   @unique(map: "nif_UNIQUE") @db.VarChar(15)
  Fecha_Inicio    DateTime? @db.Date
  Fecha_Fin       DateTime? @db.Date
  departamento    String    @db.VarChar(45)
  Jornada_Semanal Int?      @db.SmallInt
  Codigo_Contrato Int?
  userFk          Int       @unique(map: "userFk_UNIQUE")
}

model workers20190711_FichadasAbril {
  id        Int       @id @default(autoincrement())
  person_id Int       @default(0)
  nif       String?   @db.VarChar(15)
  Apellidos String    @db.VarChar(60)
  Nombre    String?   @db.VarChar(20)
  Fecha     DateTime? @db.Date
  Hora      Int?
  Minuto    Int?
  sumable   Float?
  jornada   Decimal   @default(8.00) @db.Decimal(5, 2)
}

model workers20190711_FichadasJulio11 {
  id        Int       @id @default(autoincrement())
  person_id Int       @default(0)
  nif       String?   @db.VarChar(15)
  Apellidos String    @db.VarChar(60)
  Nombre    String?   @db.VarChar(20)
  Fecha     DateTime? @db.Date
  Hora      Int?
  Minuto    Int?
  sumable   Float?
  jornada   Decimal   @default(8.00) @db.Decimal(5, 2)
}

model workers20190711_FichadasJunio {
  id        Int       @id @default(autoincrement())
  person_id Int       @default(0)
  nif       String?   @db.VarChar(15)
  Apellidos String    @db.VarChar(60)
  Nombre    String?   @db.VarChar(20)
  Fecha     DateTime? @db.Date
  Hora      Int?
  Minuto    Int?
  sumable   Float?
  jornada   Decimal   @default(8.00) @db.Decimal(5, 2)
}

model workers20190711_FichadasMayo {
  id        Int       @id @default(autoincrement())
  person_id Int       @default(0)
  nif       String?   @db.VarChar(15)
  Apellidos String    @db.VarChar(60)
  Nombre    String?   @db.VarChar(20)
  Fecha     DateTime? @db.Date
  Hora      Int?
  Minuto    Int?
  sumable   Float?
  jornada   Decimal   @default(8.00) @db.Decimal(5, 2)
}

model workers20190711_FichadasOctubre {
  id        Int       @id @default(autoincrement())
  person_id Int       @default(0)
  nif       String?   @db.VarChar(15)
  Apellidos String    @db.VarChar(60)
  Nombre    String?   @db.VarChar(20)
  Fecha     DateTime? @db.Date
  Hora      Int?
  Minuto    Int?
  sumable   Float?
  jornada   Decimal   @default(8.00) @db.Decimal(5, 2)
}

model workers20190711_Garrote {
  id        Int       @id @default(autoincrement())
  person_id Int       @default(0)
  nif       String?   @db.VarChar(15)
  Apellidos String    @db.VarChar(60)
  Nombre    String?   @db.VarChar(20)
  Fecha     DateTime? @db.Date
  Hora      Int?
  Minuto    Int?
  sumable   Float?
  jornada   Decimal   @default(8.00) @db.Decimal(5, 2)
}

model workingHours {
  id      Int       @id @default(autoincrement())
  timeIn  DateTime  @db.DateTime(0)
  timeOut DateTime? @db.DateTime(0)
  userId  Int       @db.UnsignedInt

  @@index([userId], map: "user_working_hour_idx")
}

model zipConfig {
  id      Float @id
  maxSize Int?
}

model zone {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(45)
  hour           DateTime         @db.DateTime(0)
  agencyModeFk   Int
  travelingDays  Int              @default(1)
  price          Float            @default(0)
  bonus          Float            @default(0)
  isVolumetric   Boolean          @default(false)
  inflation      Decimal          @default(1.00) @db.Decimal(5, 2)
  m3Max          Decimal?         @db.Decimal(10, 2)
  itemMaxSize    Int?
  code           String?          @db.VarChar(45)
  route          route[]
  ticket         ticket[]
  agencyMode     agencyMode       @relation(fields: [agencyModeFk], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_zone_2")
  zoneAgencyMode zoneAgencyMode[]
  zoneEvent      zoneEvent[]
  zoneExclusion  zoneExclusion[]
  zoneFilter     zoneFilter[]
  zoneIncluded   zoneIncluded[]
  zoneLog        zoneLog[]
  zoneWarehouse  zoneWarehouse[]

  @@index([agencyModeFk], map: "fk_zone_2_idx")
  @@index([name])
}

model zoneAgencyMode {
  id           Int        @id @default(autoincrement())
  agencyModeFk Int
  zoneFk       Int
  agencyMode   agencyMode @relation(fields: [agencyModeFk], references: [id], onDelete: Cascade, map: "zoneAgencyMode_FK")
  zone         zone       @relation(fields: [zoneFk], references: [id], onDelete: Cascade, map: "zoneAgencyMode_FK_1")

  @@unique([agencyModeFk, zoneFk], map: "zoneAgencyMode_UN")
  @@index([zoneFk], map: "zoneAgencyMode_FK_1")
}

model zoneClosure {
  zoneFk Int
  dated  DateTime @db.Date
  hour   DateTime @db.Time(0)

  @@id([zoneFk, dated])
}

model zoneConfig {
  id          Int @id @default(autoincrement()) @db.UnsignedInt
  scope       Int @db.UnsignedInt
  forwardDays Int @default(7)
}

model zoneEvent {
  id            Int            @id @default(autoincrement())
  zoneFk        Int
  type          zoneEvent_type
  dated         DateTime?      @db.Date
  started       DateTime?      @db.Date
  ended         DateTime?      @db.Date
  weekDays      String
  hour          DateTime?      @db.DateTime(0)
  travelingDays Int?
  price         Decimal?       @db.Decimal(10, 2)
  bonus         Decimal?       @db.Decimal(10, 2)
  m3Max         Decimal?       @db.Decimal(10, 2)
  zone          zone           @relation(fields: [zoneFk], references: [id], onDelete: Cascade, map: "zoneEvent_ibfk_1")

  @@unique([zoneFk, type, dated], map: "zoneFk")
}

model zoneExclusion {
  id               Int                @id @default(autoincrement())
  zoneFk           Int
  dated            DateTime           @db.Date
  created          DateTime           @default(now()) @db.Timestamp(0)
  userFk           Int?
  zone             zone               @relation(fields: [zoneFk], references: [id], onDelete: Cascade, map: "zoneExclusion_ibfk_1")
  zoneExclusionGeo zoneExclusionGeo[]

  @@unique([zoneFk, dated], map: "zoneFk_2")
  @@index([zoneFk], map: "zoneFk")
}

model zoneExclusionGeo {
  id              Int           @id @default(autoincrement())
  zoneExclusionFk Int
  geoFk           Int
  zoneGeo         zoneGeo       @relation(fields: [geoFk], references: [id], map: "zoneExclusionGeo_FK")
  zoneExclusion   zoneExclusion @relation(fields: [zoneExclusionFk], references: [id], onDelete: Cascade, map: "zoneExclusionGeo_FK_1")

  @@unique([zoneExclusionFk, geoFk], map: "zoneExclusionGeo_UN")
  @@index([geoFk], map: "zoneExclusionGeo2_FK_1")
}

model zoneFilter {
  id         Int      @id @default(autoincrement())
  zoneFk     Int
  sizeMax    Int?
  itemTypeFk Int      @db.UnsignedSmallInt
  zone       zone     @relation(fields: [zoneFk], references: [id], onDelete: Cascade, map: "zoneFilter_FK")
  itemType   itemType @relation(fields: [itemTypeFk], references: [id], onDelete: Cascade, map: "zoneFilter_FK_1")

  @@index([zoneFk], map: "zoneFilter_FK")
  @@index([itemTypeFk], map: "zoneFilter_FK_1")
}

model zoneGeo {
  id                Int                 @id @default(autoincrement())
  type              String
  name              String?             @db.VarChar(100)
  parentFk          Int?                @db.UnsignedInt
  path              String?             @db.VarChar(255)
  lft               Int?
  rgt               Int?
  depth             BigInt              @default(0)
  sons              Decimal?            @db.Decimal(10, 0)
  autonomy          autonomy[]
  country           country[]
  specieGeoInvasive specieGeoInvasive[]
  workCenter        workCenter[]
  zoneExclusionGeo  zoneExclusionGeo[]
  zoneIncluded      zoneIncluded[]

  @@index([lft, rgt, depth], map: "lft_rgt_depth_idx")
  @@index([name], map: "name_idx")
  @@index([parentFk], map: "parentFk")
  @@index([path], map: "path")
}

model zoneGeoRecalc {
  id        Int @id @default(autoincrement()) @db.UnsignedInt
  isChanged Int @db.TinyInt
}

model zoneIncluded {
  zoneFk     Int
  geoFk      Int
  isIncluded Boolean?
  zone       zone     @relation(fields: [zoneFk], references: [id], onDelete: Cascade, map: "zoneFk2")
  zoneGeo    zoneGeo  @relation(fields: [geoFk], references: [id], onDelete: Cascade, map: "zoneGeoFk2")

  @@id([zoneFk, geoFk])
  @@index([geoFk], map: "geoFk_idx")
}

model zoneLog {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  originFk          Int
  userFk            Int?      @db.UnsignedInt
  action            String
  creationDate      DateTime? @default(now()) @db.Timestamp(0)
  description       String?   @db.Text
  changedModel      String?   @db.VarChar(45)
  oldInstance       String?   @db.Text
  newInstance       String?   @db.Text
  changedModelId    Int?
  changedModelValue String?   @db.VarChar(45)
  zone              zone      @relation(fields: [originFk], references: [id], onDelete: Cascade, map: "zoneLog_ibfk_1")

  @@index([originFk], map: "originFk")
  @@index([userFk], map: "userFk")
}

model zoneWarehouse {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  zoneFk      Int
  warehouseFk Int       @db.UnsignedSmallInt
  warehouse   warehouse @relation(fields: [warehouseFk], references: [id], map: "zoneWarehouse_fk_warehouse")
  zone        zone      @relation(fields: [zoneFk], references: [id], onDelete: Cascade, map: "zoneWarehouse_ibfk_1")

  @@unique([zoneFk, warehouseFk], map: "zoneFk")
  @@index([warehouseFk], map: "warehouseFk")
}

enum thermograph_model {
  TL30
  SENSITECH
  TREKVIEW1
  TREKVIEW2
  DISPOSABLE
  TEMPMATE
}

enum campaign_code {
  mothersDay
  allSaints
  valentinesDay
}

enum zoneEvent_type {
  day
  indefinitely
  range
}

enum improvedGeneralLogProcedures_type {
  FUNCTION
  PROCEDURE
}

enum botanicExport_restriction {
  Sin_restriccion         @map("Sin restriccion")
  Importacion_Prohibida   @map("Importacion Prohibida")
  pasaporte_fitosanitario @map("pasaporte fitosanitario")
  pasaporte_individual    @map("pasaporte individual")
  declaracion_origen      @map("declaracion origen")
}

enum printQueue_statusCode {
  queued
  error
  printing
  printed
}

enum workerTimeControlMail_state {
  SENDED
  CONFIRMED
  REVISE
}

enum workerIrpf_familySituation {
  famSit1 @map("1")
  famSit2 @map("2")
  famSit3 @map("3")
}

enum workerTimeControl_direction {
  in
  out
  middle
}

enum botanicExport_code {
  importProhibited
  phytosanitaryPassport
  individualPassport
}

enum worker_maritalStatus {
  S
  M
}

enum worker_sex {
  M
  F
}
